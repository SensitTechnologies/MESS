@using Microsoft.AspNetCore.Components.Authorization
@using YourApp.Services  @* Update with actual namespace *@
@inject ProductService ProductService
@inject StationService StationService
@inherits LayoutComponentBase

<HeadContent>
    <script src="darkmode.js"></script>
</HeadContent>

<div class="page">
    <main>
        <article class="content px-4 mx-auto">
            <AuthorizeView Roles="Technician, Administrator">
                <div class="d-flex flex-wrap align-items-center gap-2 mb-3">
                    <!-- Nav Buttons -->
                    <NavLink class="btn btn-sm btn-outline-secondary text-decoration-none"
                             href="/WorkInstructionManager" Match="NavLinkMatch.All">
                        Phoebe
                    </NavLink>
                    <NavLink class="btn btn-sm btn-outline-secondary text-decoration-none"
                             href="/production-log" Match="NavLinkMatch.All">
                        Production Log
                    </NavLink>

                    <!-- Dynamic Product Select -->
                    <select id="product-select"
                            class="form-select form-select-sm w-auto"
                            @bind="SelectedProductId"
                            aria-label="Select Product">
                        <option value="-1">Select Product</option>
                        @foreach (var product in Products)
                        {
                            <option value="@product.Id">@product.Name</option>
                        }
                    </select>

                    <!-- Dynamic Station Select -->
                    <select id="station-select"
                            class="form-select form-select-sm w-auto"
                            @bind="SelectedStationId"
                            aria-label="Select Station">
                        <option value="-1">Select Station</option>
                        @foreach (var station in Stations)
                        {
                            <option value="@station.Id">@station.Name</option>
                        }
                    </select>
                </div>
            </AuthorizeView>

            <div class="mt-sm-3">
                @Body
            </div>

            <DarkModeButton></DarkModeButton>
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />
<FluentMenuProvider />

@code {
    /// <summary>
    /// Represents a product available for selection.
    /// </summary>
    public class Product
    {
        /// <summary>
        /// Unique identifier of the product.
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// Display name of the product.
        /// </summary>
        public required string Name { get; set; }
    }

    /// <summary>
    /// Represents a station available for selection.
    /// </summary>
    public class Station
    {
        /// <summary>
        /// Unique identifier of the station.
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// Display name of the station.
        /// </summary>
        public required string Name { get; set; }
    }

    private List<Product> Products { get; set; } = new();
    private List<Station> Stations { get; set; } = new();

    private int SelectedProductId { get; set; } = -1;
    private int SelectedStationId { get; set; } = -1;

    /// <summary>
    /// Loads product and station data on component initialization.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await RefreshDropdownsAsync();
    }

    /// <summary>
    /// Refreshes product and station dropdown content.
    /// </summary>
    public async Task RefreshDropdownsAsync()
    {
        Products = await ProductService.GetProductsAsync();
        Stations = await StationService.GetStationsAsync();
        StateHasChanged();
    }
}
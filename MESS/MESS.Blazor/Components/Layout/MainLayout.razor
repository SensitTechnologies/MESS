@inject IJSRuntime JS
@inherits LayoutComponentBase
@implements IDisposable
@using System.ComponentModel
@using MESS.Blazor.Components.Navigator
@using MESS.Services.DarkMode
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject DarkModeInstance DarkModeInstance

<HeadContent>
    <script src="darkmode.js"></script>
</HeadContent>

<link href="lib/bootstrap/dist/bootstrap-icons-1.11.0/bootstrap-icons.css" rel="stylesheet" />

<!-- Fixed Top Bar with Left and Right Buttons -->
<div class="position-fixed top-0 start-0 end-0 d-flex justify-content-between align-items-center px-3 custom-top-bar"
     style="z-index: 500; height: 50px;">

    <!-- Left-side button -->
    <div class="d-flex align-items-center">
        <AuthorizeView Roles="Technician, Administrator">
            @if (ShowSidebarToggle)
            {
                <button class="btn btn-outline-secondary"
                        @onclick="ToggleSidebar"
                        style="width: 32px; height: 32px; padding: 0; font-size: 1.1rem; display: flex; align-items: center; justify-content: center; border-radius: 0.25rem;">
                    ☰
                </button>
            }
        </AuthorizeView>
    </div>

    <!-- Right-side button -->
    <div class="d-flex align-items-center">
        @if (ShowDarkModeToggle)
        {
            <button class="btn btn-outline-secondary"
                    @onclick="ToggleDarkMode"
                    style="width: 32px; height: 32px; padding: 0; font-size: 1.1rem; display: flex; align-items: center; justify-content: center; border-radius: 0.25rem;">
                <i class="bi @(DarkModeInstance.IsDarkMode ? "bi-moon-stars" : "bi-sun")"></i>
            </button>
        }
    </div>
</div>

<!-- Sidebar -->
<AuthorizeView Roles="Technician, Administrator">
    <NavigationMenu IsOpen="@isSidebarOpen" OnToggle="ToggleSidebar" />
</AuthorizeView>

<!-- Main Content -->
<main class="content px-4 mx-auto"
      style="
          margin-left:@(isSidebarOpen ? "250px" : "0");
          padding-top: 36px;
          transition: margin-left 0.3s ease;">
    @Body
</main>

<!-- Mud Providers-->
<MudPopoverProvider />

<!-- Fluent Providers -->
<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />
<FluentMenuProvider />

<!-- Error UI -->
<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool isSidebarOpen = false;
    private bool ShowSidebarToggle = true;
    private bool ShowDarkModeToggle = true;
    private bool isDarkMode = false;

    /// <summary>
    /// Called by the framework when parameters are set.
    /// Checks the current page and determines whether the sidebar toggle and dark mode toggle should be shown.
    /// </summary>
    protected override void OnParametersSet()
    {
        var relativeUri = Navigation.ToBaseRelativePath(Navigation.Uri).TrimEnd('/');

        // Hide toggle button on the WorkInstructionManager page
        ShowSidebarToggle = !relativeUri.Equals("WorkInstructionManager", StringComparison.OrdinalIgnoreCase);

        // Also hide dark mode toggle on WorkInstructionManager page
        ShowDarkModeToggle = ShowSidebarToggle;
    }
    
    /// <summary>
    /// Called when the component is initialized. Registers this component with the DarkModeInstance
    /// to receive updates when the dark mode state changes.
    /// </summary>
    protected override void OnInitialized()
    {
        DarkModeInstance.PropertyChanged += OnDarkModeChanged;
    }
    
    private void OnDarkModeChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(DarkModeInstance.IsDarkMode))
        {
            InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Toggles the sidebar open/closed state.
    /// Also invokes the SidebarToggleRequested callback if assigned.
    /// </summary>
    private async Task ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;

        if (SidebarToggleRequested.HasDelegate)
        {
            await SidebarToggleRequested.InvokeAsync(null);
        }
    }

    /// <summary>
    /// Toggles dark mode by invoking the JS function and updates the icon.
    /// </summary>
    private async Task ToggleDarkMode()
    {
        DarkModeInstance.Toggle();
        isDarkMode = !isDarkMode;
        await JS.InvokeVoidAsync("toggleDarkMode", isDarkMode);
    }

    /// <summary>
    /// Performs any necessary cleanup when the component is disposed.
    /// </summary>
    public void Dispose()
    {
        DarkModeInstance.PropertyChanged -= OnDarkModeChanged;
    }

    /// <summary>
    /// Event callback for notifying external components when the sidebar toggle is requested.
    /// </summary>
    [Parameter]
    public EventCallback SidebarToggleRequested { get; set; }
}

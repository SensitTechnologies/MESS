@using MESS.Services.CRUD.ProductionLogs
@using MESS.Services.DTOs.ProductionLogs.Detail
@using MESS.Services.DTOs.ProductionLogs.LogSteps.Attempts.Detail
@using Microsoft.AspNetCore.Components.Authorization
@implements IDialogContentComponent<(ProductionLogDetailDTO, bool)>
@inject IProductionLogService ProductionLogService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthProvider

<FluentToastProvider />

@* Header *@
<FluentDialogHeader>
    <div class="d-flex justify-content-between" style="flex-direction: row">
        <h2>@Dialog.Instance.Parameters.Title</h2>
    </div>
</FluentDialogHeader>

@* Body *@
<FluentDialogBody>
    @if (shownLog is not null)
    {
        <div class="d-flex mx-1" style="flex-direction: row">
        <div class="d-flex me-5" style="flex-direction: row">
            <p class="me-1">
                Product:<br/>
                Instruction:<br/>
                Product SN:<br/>
            </p>
            <p class="ms-1">
                @shownLog.ProductName<br/>
                @shownLog.WorkInstructionName<br/>
                @shownLog?.ProductSerialNumber<br/>
            </p>
        </div>

        @if (ShowPersonalInfo)
        {
            <div class="d-flex mx-5" style="flex-direction: row">
                <p class="me-1">
                    Created By:<br/>
                    Last Modified By:<br/>
                </p>
                <p class="ms-1">
                    @shownLog?.CreatedBy<br/>
                    @shownLog?.LastModifiedBy<br/>
                </p>
            </div>
        }


        <div class="d-flex mx-5" style="flex-direction: row">
            <p class="me-1">
                Created On:<br/>
                Last Modified On:<br/>
            </p>
            <p class="ms-1">
                @shownLog?.CreatedOn.LocalDateTime.ToString("yyyy-MM-dd HH:mm")<br/>
                @shownLog?.LastModifiedOn.LocalDateTime.ToString("yyyy-MM-dd HH:mm")<br/>
            </p>
        </div>
        </div>

        <MudTable @ref="table"
                  ServerData="ServerReload"
                  Height="250px"
                  Loading="@IsLoading"
                  Class="border rounded-3 pt-1"
                  TableClass="fixed-header-cell table table-striped">
            <ColGroup>
                <col style="width: 45%"/>
                <col/>
                <col/>
                <col style="width: 20%"/>
                <col/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Step Name</MudTh>
                <MudTh>Submit Time</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Failure Notes</MudTh>
                <MudTh>Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Step Name">@context.StepName</MudTd>
                <MudTd DataLabel="Submit Time">@context.SubmitTime.ToString("yyyy-MM-dd HH:mm")</MudTd>
                <MudTd DataLabel="Status">
                    <button class="btn btn-sm @(context.IsSuccess ? "btn-success confirmed" : "btn-outline-success pending")"
                            @onclick="() => UpdateStatus(context, true)">
                        Success
                    </button>
                    <button class="btn btn-sm @(!context.IsSuccess ? "btn-danger failed" : "btn-outline-danger")"
                            @onclick="() => UpdateStatus(context, false)">
                        Failure
                    </button>
                </MudTd>
                <MudTd DataLabel="Failure Notes">
                    @if (!context.IsSuccess) @* Show textarea only if not success *@
                    {
                        <textarea class="form-control form-control-sm"
                              rows="1"
                              @bind="context.FailureNote"
                              placeholder="Optional failure note" />
                    }
                </MudTd>
                <MudTd DataLabel="Delete">
                    <button class="btn btn-sm btn-danger" @onclick="@(() => HandleAttemptDeleted(context))">
                        Delete
                    </button>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
    else
    {
        <p><em>Loading log details...</em></p>
    }
</FluentDialogBody>

@* Footer *@
<FluentDialogFooter>
    <button type="button" class="btn btn-sm btn-outline-secondary me-2" @onclick="SaveAsync">
        Save Log
    </button>
    <button type="button" class="btn btn-sm btn-outline-secondary ms-2" @onclick="DeleteLog">
        Delete Log
    </button>
</FluentDialogFooter>


@code {

    /// <summary>
    /// A tuple representing the production log data to be shown
    /// and a boolean expressing whether to show personal details or not
    /// </summary>
    [Parameter]
    public (ProductionLogDetailDTO, bool) Content { get; set; } = default!;
    private ProductionLogDetailDTO shownLog = default!;
    private List<StepAttemptDetailDTO> shownAttempts = [];
    private StepAttemptDetailDTO[] attemptsToDelete = [];
    private bool IsLoading { get; set; } = true;
    
    private bool ShowPersonalInfo => Content.Item2;
    
    /// <summary>
    ///  References this dialog while it's being displayed
    /// </summary>
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    
    private IEnumerable<StepAttemptDetailDTO> pagedData = new List<StepAttemptDetailDTO>();
    private MudTable<StepAttemptDetailDTO> table = new();
    private int totalItems;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await GrabServerData();
        await table.ReloadServerData();
    }

    private async Task GrabServerData()
    {
        IsLoading = true;

        // Get fresh DTO from service
        shownLog = await ProductionLogService.GetDetailByIdAsync(Content.Item1.Id) ?? new ProductionLogDetailDTO();

        // Flattened attempts are already included in the DTO
        shownAttempts = shownLog.Attempts?.ToList() ?? [];

        IsLoading = false;
    }
    
    private async Task<TableData<StepAttemptDetailDTO>> ServerReload(TableState state, CancellationToken token)
    {
        IEnumerable<StepAttemptDetailDTO> data = shownAttempts;
        await Task.Delay(20, token);
        totalItems = data.Count();
        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<StepAttemptDetailDTO>() {TotalItems = totalItems, Items = pagedData};
    }
    
    private async Task SaveAsync()
    {
        // If all attempts are removed → delete log
        if (shownAttempts.Count <= 0)
        {
            await DeleteLog();
            return;
        }

        // Handle deletions
        if (attemptsToDelete.Length > 0)
        {
            foreach (var attempt in attemptsToDelete)
            {
                await ProductionLogService.DeleteAttemptAsync(attempt.AttemptId);
            }

            // Refresh from server
            await GrabServerData();
        }

        // Update metadata (last modified by)
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var username = user.Identity.Name;
            if (!string.IsNullOrWhiteSpace(username))
            {
                shownLog.LastModifiedBy = username;
            }
        }
        
        var success = await ProductionLogService.UpdateDetailAsync(shownLog);

        if (success)
        {
            ToastService.ShowSuccess("Production log saved successfully.");
        }
        else
        {
            ToastService.ShowError("Failed to save production log.");
        }

        await Dialog.CloseAsync(Content);
    }
    
    private async Task DeleteLog()
    {
        var deletionResult = await ProductionLogService.DeleteProductionLogAsync(shownLog.Id);

        if (deletionResult)
            await Dialog.CloseAsync();
        else
            ToastService.ShowWarning("There was a problem deleting this log. Please try again");
    }
    
    private Task UpdateStatus(StepAttemptDetailDTO attempt, bool isSuccess)
    {
        attempt.IsSuccess = isSuccess;
        if (isSuccess)
        {
            attempt.FailureNote = string.Empty;
        }
        return Task.CompletedTask;
    }
   
    private async Task HandleAttemptDeleted(StepAttemptDetailDTO attempt)
    {
        // Mark attempt for deletion
        attemptsToDelete = [.. attemptsToDelete, attempt];

        // Remove from list
        shownAttempts.Remove(attempt);

        // Reload table
        await table.ReloadServerData();

        if (!table.FilteredItems.Any())
        {
            ToastService.ShowWarning("All attempts removed. Saving will now delete this log.");
        }
    }
}
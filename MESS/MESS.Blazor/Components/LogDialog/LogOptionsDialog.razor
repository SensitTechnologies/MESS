@using MESS.Data.Models
@using MESS.Services.ProductionLogServices
@using Microsoft.AspNetCore.Components.Authorization
@implements IDialogContentComponent<(ProductionLog, bool)>
@inject IProductionLogService ProductionLogService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthProvider

<FluentToastProvider />

@* Header *@
<FluentDialogHeader>
    <div class="d-flex justify-content-between" style="flex-direction: row">
        <h2>@Dialog.Instance.Parameters.Title</h2>
    </div>
</FluentDialogHeader>

@* Body *@
<FluentDialogBody>
    <div class="d-flex mx-1" style="flex-direction: row">
        <div class="d-flex me-5" style="flex-direction: row">
            <p class="me-1">
                Product:<br/>
                Instruction:<br/>
                Product SN:<br/>
            </p>
            <p class="ms-1">
                @shownLog?.Product?.Name<br/>
                @shownLog?.WorkInstruction?.Title<br/>
                @shownLog?.ProductSerialNumber<br/>
            </p>
        </div>

        @if (ShowPersonalInfo)
        {
            <div class="d-flex mx-5" style="flex-direction: row">
                <p class="me-1">
                    Created By:<br/>
                    Last Modified By:<br/>
                </p>
                <p class="ms-1">
                    @shownLog?.CreatedBy<br/>
                    @shownLog?.LastModifiedBy<br/>
                </p>
            </div>  
        }
    
        
        <div class="d-flex mx-5" style="flex-direction: row">
            <p class="me-1">
                Created On:<br/>
                Last Modified On:<br/>
            </p>
            <p class="ms-1">
                @shownLog?.CreatedOn.LocalDateTime.ToString("yyyy-MM-dd HH:mm")<br/>
                @shownLog?.LastModifiedOn.LocalDateTime.ToString("yyyy-MM-dd HH:mm")<br/>
            </p>
        </div>
    </div>
    
    <MudTable @ref="table"
              ServerData="ServerReload"
              Height="250px"
              Loading="@IsLoading"
              Class="border rounded-3 pt-1"
              TableClass="fixed-header-cell table table-striped ">
        <ColGroup>
            <col style="width: 45%"/>
            <col/>
            <col/>
            <col style="width: 20%"/>
            <col/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Step Name</MudTh>
            <MudTh>Submit Time</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Failure Notes</MudTh>
            <MudTh>Delete</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="text-wrap: balance;" DataLabel="Step Name">@context.ProductionLogStep?.WorkInstructionStep?.Name.Trim()</MudTd>
            <MudTd Style="text-wrap: balance;" DataLabel="Submit Time">@context.SubmitTime.LocalDateTime.ToString("yyyy-MM-dd HH:mm")</MudTd>
            <MudTd Style="" DataLabel="Status">
                <button class="btn btn-sm @((context.Success.HasValue && context.Success.Value) ? "btn-success confirmed" : "btn-outline-success pending")"
                        @onclick="() => UpdateStatus(context, true)">
                    Success
                </button>
                <button class="btn btn-sm @(context.Success == false ? "btn-danger failed" : "btn-outline-danger")" 
                        @onclick="() => UpdateStatus(context, false)">
                    Failure
                </button>
            </MudTd>
            <MudTd Style="text-wrap: balance;" DataLabel="Failure Notes">
                @if (context.Success != true)  @* Show textarea only if not success *@
                {
                    <textarea class="form-control form-control-sm"
                      rows="1"
                      @bind="@context.Notes"
                      placeholder="Optional failure note"/>
                }
            </MudTd>
            <MudTd Style="" DataLabel="Delete">
                <button class="btn btn-sm btn-danger" @onclick="@(() => HandleAttemptDeleted(context))">
                    Delete
                </button>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</FluentDialogBody>

@* Footer *@
<FluentDialogFooter>
    <button type="button" class="btn btn-sm btn-outline-secondary me-2" @onclick="SaveAsync">
        Save Log
    </button>
    <button type="button" class="btn btn-sm btn-outline-secondary ms-2" @onclick="DeleteLog">
        Delete Log
    </button>
</FluentDialogFooter>


@code {

    /// <summary>
    /// A tuple representing the production log data to be shown
    /// and a boolean expressing whether to show personal details or not
    /// </summary>
    [Parameter]
    public (ProductionLog, bool) Content { get; set; } = default!;
    private ProductionLog shownLog = default!;
    private List<ProductionLogStepAttempt> shownAttempts = [];
    private ProductionLogStepAttempt[] attemptsToDelete = [];
    private bool IsLoading { get; set; } = true;
    
    private bool ShowPersonalInfo => Content.Item2;
    
    /// <summary>
    ///  References this dialog while it's being displayed
    /// </summary>
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    
    private IEnumerable<ProductionLogStepAttempt> pagedData = new List<ProductionLogStepAttempt>();
    private MudTable<ProductionLogStepAttempt> table = new MudTable<ProductionLogStepAttempt>();
    private int totalItems;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await GrabServerData();
        await table.ReloadServerData();
    }

    private async Task GrabServerData()
    {
        IsLoading = true; 
        shownLog = await ProductionLogService.GetByIdAsync(Content.Item1.Id) ?? default!;
        shownAttempts = shownLog.LogSteps.SelectMany(step => step.Attempts).ToList() ?? [];
        IsLoading = false;
    }
    
    private async Task<TableData<ProductionLogStepAttempt>> ServerReload(TableState state, CancellationToken token)
    {
        IEnumerable<ProductionLogStepAttempt> data = shownAttempts;
        await Task.Delay(20, token);
        totalItems = data.Count();
        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ProductionLogStepAttempt>() {TotalItems = totalItems, Items = pagedData};
    }
    
    private async Task SaveAsync()
    {
        // delete everything
        if (shownAttempts.Count <= 0)
        {
            await DeleteLog();
            return;
        }
        
        if (shownAttempts.Count > 0)
        {
            foreach (var step in shownLog.LogSteps)
            {
                step.Attempts.Clear();
                foreach (var attempt in  shownAttempts)
                {
                    if (attempt.ProductionLogStep == step)
                    {
                        step.Attempts.Add(attempt);
                    }
                }
            }
        }
        
        
        // delete some stuff
        if (attemptsToDelete.Length > 0)
        {
            foreach (var attempt in attemptsToDelete)
            {
                // Explicitly Delete the Attempt
                await ProductionLogService.DeleteAttemptAsync(attempt.Id);
            }   
            // refresh from server 
            await GrabServerData();
        }

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var username = user.Identity.Name;

            if (!string.IsNullOrWhiteSpace(username))
            {
                shownLog.LastModifiedBy = username;
            }
        }


        var success = await ProductionLogService.UpdateAsync(shownLog);
        if (success)
        {
            ToastService.ShowSuccess("Production log saved successfully.");
        }
        else
        {
            ToastService.ShowError("Failed to save production log.");
        }
        await Dialog.CloseAsync(Content);
    }

    private async Task DeleteLog()
    {
        var deletionResult = await ProductionLogService.DeleteProductionLogAsync(shownLog.Id);

        if (deletionResult)
            await Dialog.CloseAsync();
        else
            ToastService.ShowWarning("There was a problem deleting this log. Please try again");
    }
    
    private Task UpdateStatus(ProductionLogStepAttempt attempt, bool isSuccess)
    {
        attempt.Success = isSuccess;
        if (isSuccess)
        {
            attempt.Notes = string.Empty;
        }
        return Task.CompletedTask;
    }
   
    private async Task HandleAttemptDeleted(ProductionLogStepAttempt attempt)
    {
        // Mark attempt for deletion
        attemptsToDelete = [..attemptsToDelete, attempt];
        
        // cosmetically remove the attempt from the log step
        shownAttempts.Remove(attempt);
        
        // Reload the Table
        await table.ReloadServerData();
        
        // User feedback if no attempts remain
        if (!table.FilteredItems.Any())
        {
            ToastService.ShowWarning("All attempts removed. Saving will now delete this log.");
        }
    }
}
@page "/line-operators"
@using MESS.Services
@using MESS.Data.Models
@rendermode InteractiveServer
@inject LineOperatorService LineOperatorService


<PageTitle>Operator Login</PageTitle>

<h1>Operator Login</h1>

@if (Operators == null)
{
    <p>Loading...</p>
}
else
{
    <select @bind="SelectedOperatorId" @onchange="OperatorChanged">
        <option value=""> Select Operator </option>
        @foreach (var op in Operators)
        {
            <option value="@op.Id">@op.FirstName @op.LastName</option>
        }
    </select>
    
    @if (SelectedOperator != null)
    {
        <p>Current Operator: @SelectedOperator.FirstName @SelectedOperator.LastName</p>
    }
    
    <h1>Operator Management</h1>
    <input type="text" @bind="NewLineOperator.FirstName" placeholder="First Name" />
    <input type="text" @bind="NewLineOperator.LastName" placeholder="Last Name" />
    <button @onclick="AddOperator">Add Operator</button>
}

@code {
    private List<LineOperator> Operators = new();
    private int? SelectedOperatorId;
    private LineOperator? SelectedOperator;

    private LineOperator NewLineOperator = new()
    {
        FirstName = string.Empty,
        LastName = string.Empty,
        CreatedBy = "Admin",
        LastModifiedBy = "Admin",
        CreatedOn = DateTime.UtcNow,
        LastModifiedOn = DateTime.UtcNow
    };

    protected async Task OnInitializationAsync()
    {
        await LoadOperators();
    }

    private async Task LoadOperators()
    {
        Operators = await LineOperatorService.GetLineOperators();
    }

    private void OperatorChanged(ChangeEventArgs x)
    {
        if (int.TryParse(x.Value?.ToString(), out int selectedId))
        {
            SelectedOperatorId = selectedId;
            SelectedOperator = Operators.FirstOrDefault(op => op.Id == selectedId);
        }
        else
        {
            SelectedOperator = null;
        }
    }

    private async Task AddOperator()
    {
        if (!string.IsNullOrWhiteSpace(NewLineOperator.FirstName) && !string.IsNullOrWhiteSpace(NewLineOperator.LastName))
        {
            await LineOperatorService.AddLineOperator(NewLineOperator);
            NewLineOperator = new()
            {
                FirstName = NewLineOperator.FirstName,
                LastName = NewLineOperator.LastName,
                CreatedBy = "Admin",
                LastModifiedBy = "Admin",
                CreatedOn = DateTime.UtcNow,
                LastModifiedOn = DateTime.UtcNow
            };
            await LoadOperators();
        }
    }

    private async Task UpdateOperator(LineOperator op)
    {
        await LineOperatorService.UpdateLineOperator(op);
        await LoadOperators();
    }

    private async Task DeleteOperator(int id)
    {
        await LineOperatorService.DeleteLineOperator(id);
        await LoadOperators();
    }
    
}
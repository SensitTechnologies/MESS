@* @page "/lineoperators" *@
@* @using MESS.Services.LineOperator *@
@* @using MESS.Data.Models *@
@* @rendermode InteractiveServer *@
@* @inject ILineOperatorService LineOperatorService *@
@* @inject NavigationManager NavigationManager *@
@* *@
@* <PageTitle>Operator Select</PageTitle> *@
@* *@
@* <h2>Operator Select</h2> *@
@* <br/> *@
@* *@
@* @if (Operators == null || Operators.Count == 0) *@
@* { *@
@*     <p>ERROR: No operators found.</p> *@
@* } *@
@* else *@
@* { *@
@*     <select @bind="SelectedOperatorId"> *@
@*         <option value=""> Select Operator </option> *@
@*         @foreach (var op in Operators) *@
@*         { *@
@*             <option value="@op.Id">@op.FirstName @op.LastName</option> *@
@*         } *@
@*     </select> *@
@* *@
@*     @if (SelectedOperator != null) *@
@*     { *@
@*         <p>Current Operator: @SelectedOperator.FirstName @SelectedOperator.LastName</p> *@
@*     } *@
@* *@
@*     <h3>Operator Management</h3> *@
@*     <br/> *@
@*     <button @onclick="AddOperator">Add Operator</button> *@
@*     <button @onclick="UpdateOperator">Update Operator</button> *@
@*     <button @onclick="DeleteOperator">Delete Operator</button> *@
@* } *@
@* *@
@* @code { *@
@*     private List<LineOperator> Operators = new(); *@
@*     private string? _selectedOperatorId; *@
@*     private LineOperator? SelectedOperator; *@
@* *@
@*     private string? SelectedOperatorId *@
@*     { *@
@*         get => _selectedOperatorId; *@
@*         set *@
@*         { *@
@*             _selectedOperatorId = value; *@
@*             SelectedOperator = Operators.FirstOrDefault(op => op.Id == value); *@
@*         } *@
@*     } *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await LoadOperators(); *@
@*     } *@
@* *@
@*     private Task LoadOperators() *@
@*     { *@
@*         Operators = LineOperatorService.GetLineOperators(); *@
@*         StateHasChanged(); *@
@*         return Task.CompletedTask; *@
@*     } *@
@* *@
@*     private void AddOperator() *@
@*     { *@
@*         NavigationManager.NavigateTo("/lineoperators/addoperator"); *@
@*     } *@
@* *@
@*     private void DeleteOperator() *@
@*     { *@
@*         NavigationManager.NavigateTo("/lineoperators/deleteoperator"); *@
@*     } *@
@* *@
@*     private void UpdateOperator() *@
@*     { *@
@*         NavigationManager.NavigateTo($"/lineoperators/updateoperator/{SelectedOperatorId}"); *@
@*     } *@
@* } *@
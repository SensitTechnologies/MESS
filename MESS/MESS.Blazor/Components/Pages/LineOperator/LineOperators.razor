@page "/lineoperators"
@using MESS.Services.LineOperator
@using MESS.Data.Models
@rendermode InteractiveServer
@inject LineOperatorService LineOperatorService
@inject NavigationManager NavigationManager


<PageTitle>Operator Login</PageTitle>

<h2>Operator Login</h2>
<br/>

@if (Operators == null)
{
    <p>ERROR: No operators found.</p>
}
else
{
    <select @bind="SelectedOperatorId" @bind:event="OperatorChanged">
        <option value=""> Select Operator </option>
        @foreach (var op in Operators)
        {
            <option value="@op.Id">@op.FirstName @op.LastName</option>
        }
    </select>
    
    @if (SelectedOperator != null)
    {
        <p>Current Operator: @SelectedOperator.FirstName @SelectedOperator.LastName</p>
    }

    <h3>Operator Management</h3>
    <br/>
    <button @onclick="AddOperator">Add Operator</button>
}

@code {
    private List<LineOperator> Operators = new();
    private int? SelectedOperatorId;
    private LineOperator? SelectedOperator;

    private List<LineOperator> LoadOperators()
    {
        Operators = LineOperatorService.GetLineOperators();
        return Operators;
    }

    private void OperatorChanged(ChangeEventArgs x)
    {
        if (int.TryParse(x.Value?.ToString(), out int selectedId))
        {
            SelectedOperatorId = selectedId;
            SelectedOperator = Operators.FirstOrDefault(op => op.Id == selectedId);
        }
        else
        {
            SelectedOperator = null;
        }
    }

    private void AddOperator()
    {
        NavigationManager.NavigateTo("/lineoperators/addoperator");
    }

    private async Task UpdateOperator(LineOperator op)
    {
        await LineOperatorService.UpdateLineOperator(op);
        LoadOperators();
    }

    private async Task DeleteOperator(int id)
    {
        await LineOperatorService.DeleteLineOperator(id);
        LoadOperators();
    }
    
}
@* @page "/lineoperators/deleteperator" *@
@* @using MESS.Data.Models *@
@* @using MESS.Services.LineOperator *@
@* @rendermode InteractiveServer *@
@* @inject ILineOperatorService LineOperatorService *@
@* *@
@* *@
@* @if (Operators == null || Operators.Count == 0) *@
@* { *@
@*     <p>ERROR: No operators found.</p> *@
@* } *@
@* else *@
@* { *@
@*     <select @bind="SelectedOperatorId" @bind:event="OperatorChanged"> *@
@*         <option value=""> Select Operator </option> *@
@*         @foreach (var op in Operators) *@
@*         { *@
@*             <option value="@op.Id">@op.FirstName @op.LastName</option> *@
@*         } *@
@*     </select> *@
@*      *@
@*     @if (SelectedOperator != null) *@
@*     { *@
@*         <p>Selected Operator: @SelectedOperator.FirstName @SelectedOperator.LastName</p> *@
@*         <button @onclick="DeleteLineOperator">Delete Operator</button> *@
@*     } *@
@* } *@
@* *@
@* *@
@* @code { *@
@*     private List<LineOperator> Operators = new(); *@
@*     private string? SelectedOperatorId; *@
@*     private LineOperator? SelectedOperator; *@
@*      *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await LoadOperators(); *@
@*     } *@
@* *@
@*     private Task LoadOperators() *@
@*     { *@
@*         Operators = LineOperatorService.GetLineOperators();  *@
@*         StateHasChanged(); *@
@*         return Task.CompletedTask; *@
@*     } *@
@*      *@
@*     private async Task<bool> DeleteLineOperator() *@
@*     { *@
@*         if (SelectedOperatorId != null) *@
@*         { *@
@*             await LineOperatorService.DeleteLineOperator(SelectedOperatorId); *@
@*             await LoadOperators(); *@
@*             SelectedOperator = null; *@
@*             SelectedOperatorId = null; *@
@*         } *@
@*         return true; *@
@*     } *@
@* } *@
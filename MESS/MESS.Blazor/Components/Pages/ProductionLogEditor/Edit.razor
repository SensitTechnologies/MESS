@page "/production-log/edit/{LogId:int}"
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@inject IProductionLogService ProductionLogService
@inject NavigationManager NavManager
@inject IToastService ToastService

<PageTitle>Edit Production Log</PageTitle>

@if (_productionLog == null)
{
    <div class="text-center my-5">
        <div class="spinner-border" role="status"></div>
        <p>Loading production log...</p>
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Submit Time</th>
                <th>Step Name</th>
                <th>Status</th>
                <th>Failure Note</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var attempt in _allAttempts)
            {
                <ProductionLogStepAttemptRow Attempt="attempt" @key="attempt.Id" ParentStep="_attemptToStep[attempt]"
                                             OnChanged="HandleAttemptChanged"
                                             OnDelete="HandleAttemptDeleted" />
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="Save">Save Changes</button>
}

@code {
    /// <summary>
    /// 
    /// </summary>
    [Parameter]
    public int LogId { get; set; }

    private ProductionLog? _productionLog;
    private List<ProductionLogStepAttempt> _allAttempts = new();
    private Dictionary<ProductionLogStepAttempt, ProductionLogStep> _attemptToStep = new();

    /// <summary>
    /// 
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Load from database every time LogId changes
        _productionLog = await ProductionLogService.GetByIdAsync(LogId);

        if (_productionLog == null)
        {
            // Log or show error, then redirect
            NavManager.NavigateTo("/production-logs");
            return;
        }

        _allAttempts = _productionLog.LogSteps.SelectMany(step => step.Attempts).ToList();

        _attemptToStep = _productionLog.LogSteps
            .SelectMany(step => step.Attempts.Select(attempt => new { attempt, step }))
            .ToDictionary(x => x.attempt, x => x.step);
    }

    private Task HandleAttemptChanged(ProductionLogStepAttempt updated)
    {
        var index = _allAttempts.FindIndex(a => a.Id == updated.Id);
        if (index >= 0)
            _allAttempts[index] = updated;
        return Task.CompletedTask;
    }

    private Task HandleAttemptDeleted(ProductionLogStepAttempt attempt)
    {
        _allAttempts.Remove(attempt);
        if (_attemptToStep.TryGetValue(attempt, out var parentStep))
        {
            parentStep.Attempts.Remove(attempt);
            _attemptToStep.Remove(attempt);
        }
        return Task.CompletedTask;
    }

    private async Task Save()
    {
        if (_productionLog == null) return;

        // Update log steps with current attempts
        _productionLog.LogSteps.Clear();
        foreach (var step in _attemptToStep.Values.Distinct())
        {
            _productionLog.LogSteps.Add(step);
        }

        var success = await ProductionLogService.UpdateAsync(_productionLog);
        if (success)
        {
            ToastService.ShowSuccess("Production log saved successfully.");
            NavManager.NavigateTo("/production-logs");
        }
        else
        {
            ToastService.ShowError("Failed to save production log.");
        }
    }
}
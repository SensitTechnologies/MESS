@using MESS.Data.Models
<tr>
    <td>@Attempt.SubmitTime.LocalDateTime.ToString("yyyy-MM-dd HH:mm:ss")</td>

    <td>@ToMarkup(ParentStep.WorkInstructionStep?.Name ?? "(No Step Name)")</td>

    <td>
        <div class="d-flex gap-2">
            @{
                var isConfirmed = Attempt.Success.HasValue && Attempt.Success.Value;
            }

            <button class="btn btn-sm @(isConfirmed ? "btn-success confirmed" : "btn-outline-success pending")"
                    @onclick="() => UpdateStatus(true)">
                Success
            </button>
            <button class="btn btn-sm @(Attempt.Success == false ? "btn-danger failed" : "btn-outline-danger")" @onclick="() => UpdateStatus(false)">
                Failure
            </button>
        </div>
    </td>

    <td>
        @if (Attempt.Success != true)  @* Show textarea only if not success *@
        {
            <textarea class="form-control form-control-sm"
                  rows="1"
                  @bind="Attempt.Notes"
                  placeholder="Optional failure note"></textarea>
        }
    </td>

    <td>
        <button class="btn btn-sm btn-danger" @onclick="Delete">
            Delete
        </button>
    </td>
</tr>

@code {
    /// <summary>
    /// The current production log step attempt being displayed.
    /// </summary>
    [Parameter, EditorRequired]
    public ProductionLogStepAttempt Attempt { get; set; } = null!;
    
    /// <summary>
    /// The parent production log step to the current attempt.
    /// </summary>
    [Parameter, EditorRequired]
    public ProductionLogStep ParentStep { get; set; } = null!;
    
    /// <summary>
    /// Callback triggered when the attempt is modified (e.g., success/failure status or notes).
    /// </summary>
    [Parameter]
    public EventCallback<ProductionLogStepAttempt> OnChanged { get; set; }
    
    /// <summary>
    /// Callback triggered when the attempt is deleted.
    /// </summary>
    [Parameter]
    public EventCallback<ProductionLogStepAttempt> OnDelete { get; set; }

    static MarkupString ToMarkup(string? html) => new MarkupString(html ?? "");

    private async Task UpdateStatus(bool isSuccess)
    {
        Attempt.Success = isSuccess;
        if (isSuccess)
        {
            Attempt.Notes = string.Empty;
        }
        await OnChanged.InvokeAsync(Attempt);
    }

    private async Task Delete()
    {
        await OnDelete.InvokeAsync(Attempt);
    }
}
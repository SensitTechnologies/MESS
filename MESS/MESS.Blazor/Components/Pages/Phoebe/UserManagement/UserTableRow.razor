@using MESS.Data.DTO
@using MESS.Data.Models
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager

@if (User != null)
{
    <tr>
        <th scope="row">@RowNumber</th>
        <td>
            <input type="email" class="form-control" @bind="User.Email" @bind:event="oninput"/>
        </td>
        <td>
            <input type="text" class="form-control" @bind="User.FirstName" @bind:event="oninput"/>
        </td>
        <td>
            <input type="text" class="form-control" @bind="User.LastName" @bind:event="oninput"/>
        </td>
        <td>
            <div class="btn-group" role="group">
                <input type="checkbox" checked="@IsOperator" @onchange="@((e) => UpdateRoleAsync("Operator", (bool)e.Value!))" class="btn-check" id="operator@(User.Id)" autocomplete="off">
                <label class="btn btn-outline-primary" for="operator@(User.Id)">Operator</label>

                <input type="checkbox" checked="@IsTechnician" @onchange="@((e) => UpdateRoleAsync("Technician", (bool)e.Value!))" class="btn-check" id="technician@(User.Id)" autocomplete="off">
                <label class="btn btn-outline-primary" for="technician@(User.Id)">Technician</label>

                <input type="checkbox" checked="@IsAdmin" @onchange="@((e) => UpdateRoleAsync("Administrator", (bool)e.Value!))" class="btn-check" id="administrator@(User.Id)" autocomplete="off">
                <label class="btn btn-outline-primary" for="administrator@(User.Id)">Administrator</label>
            </div>
        </td>
        <td>
            <button type="button"
                    class="btn @(IsLockedOut ? "btn-danger" : "btn-outline-secondary")"
                    @onclick="ToggleLockoutAsync">
                @(IsLockedOut ? "Unlock" : "Lock") User
            </button>
        </td>
    </tr>
}

@code {
    [Parameter]
    public required int RowNumber { get; set; }
    [Parameter]
    public required UserRoleDto UserRoleDto { get; set; }
    private ApplicationUser? User { get; set; }
    private IList<string>? CurrentRoles { get; set; }
    
    private bool IsLockedOut { get; set; }
    
    private bool IsOperator { get; set; }
    private bool IsTechnician { get; set; }
    private bool IsAdmin { get; set; }

    protected override void OnInitialized()
    {
        User = UserRoleDto.User;
        CurrentRoles = UserRoleDto.Roles;
        IsLockedOut = UserRoleDto.IsLockedOut;
        
        if (CurrentRoles != null)
        {
            IsAdmin = CurrentRoles.Contains("Administrator");
            IsOperator = CurrentRoles.Contains("Operator");
            IsTechnician = CurrentRoles.Contains("Technician");
        }
    }

    private async Task UpdateRoleAsync(string selectedRole, bool isChecked)
    {
        try
        {
            if (User == null)
            {
                return;
            }

            if (isChecked)
            {
                
                await UserManager.AddToRoleAsync(User, selectedRole);
            }
            else
            {
                await UserManager.RemoveFromRoleAsync(User, selectedRole);
            }
            
            switch (selectedRole)
            {
                case "Operator":
                    IsOperator = isChecked;
                    break;
                case "Technician":
                    IsTechnician = isChecked;
                    break;
                case "Administrator":
                    IsAdmin = isChecked;
                    break;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task ToggleLockoutAsync()
    {
        if (User == null)
        {
            return;
        }
        
        try
        {
            if (IsLockedOut)
            {
                await UserManager.SetLockoutEndDateAsync(User, null);
                IsLockedOut = false;
            }
            else
            {
                await UserManager.SetLockoutEndDateAsync(User, DateTimeOffset.UtcNow.AddYears(100));
                IsLockedOut = true;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}
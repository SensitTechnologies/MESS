@using MESS.Data.DTO
@using MESS.Data.Models
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject IToastService ToastService

@if (User != null)
{
    <tr>
        <th scope="row">@RowNumber</th>
        <td>
            <input type="email" class="form-control" @bind="User.Email" @bind:event="oninput"/>
        </td>
        <td>
            <input type="text" class="form-control" @bind="User.UserName" @bind:event="oninput"/>
        </td>
        <td>
            <input type="text" class="form-control" @bind="User.FirstName" @bind:event="oninput" />
        </td>
        <td>
            <input type="text" class="form-control" @bind="User.LastName" @bind:event="oninput" />
        </td>
        <td>
            @if (UserRoleDto.IsNew)
            {
                <InputText @bind-Value="UserRoleDto.Password" type="password" placeholder="Password" class="form-control mb-2" />
            }
            <button type="button" class="btn btn-user" @onclick="async () => await SaveChanges.InvokeAsync(User)">
                Save Changes
            </button>
        </td>
        <td>
            <div class="btn-group" role="group">
                <input type="checkbox" checked="@IsOperator" disabled="@UserRoleDto.IsNew" @onchange="@((e) => UpdateRoleAsync("Operator", (bool)e.Value!))" class="btn-check" id="operator@(User.Id)" autocomplete="off">
                <label class="btn btn-checkbox" for="operator@(User.Id)">Operator</label>

                <input type="checkbox" checked="@IsTechnician" disabled="@UserRoleDto.IsNew" @onchange="@((e) => UpdateRoleAsync("Technician", (bool)e.Value!))" class="btn-check" id="technician@(User.Id)" autocomplete="off">
                <label class="btn btn-checkbox" for="technician@(User.Id)">Technician</label>

                <input type="checkbox" checked="@IsAdmin" disabled="@UserRoleDto.IsNew" @onchange="@((e) => UpdateRoleAsync("Administrator", (bool)e.Value!))" class="btn-check" id="administrator@(User.Id)" autocomplete="off">
                <label class="btn btn-checkbox" for="administrator@(User.Id)">Administrator</label>
            </div>
        </td>
        <td>
            <button type="button"
                    class="btn @(IsLockedOut ? "btn-user" : "btn-warning")"
                    @onclick="ToggleLockoutAsync">
                @(IsLockedOut ? "Unlock" : "Lock") User
            </button>
            @if (IsConfirmingDelete && UserToDeleteId == User.Id)
            {
            <div class="confirm-delete mt-2">
                <span>Are you sure?</span>
                <button type="button" class="btn btn-sm btn-danger" @onclick="ConfirmDeleteUser">Yes</button>
                <button type="button" class="btn btn-sm btn-secondary" @onclick="CancelDeleteUser">No</button>
            </div>
            }
            else
            {
            <button type="button"
                    class="btn btn-warning"
                    @onclick="() => InitiateDeleteUser(User.Id)">
                Delete
            </button>
            }
            <button type="button" class="btn btn-user" @onclick="async () => await SaveChanges.InvokeAsync(User)">
                Save Changes
            </button>

        </td>
    </tr>
}

@code {
    /// <summary>
    /// Row number of the user in the table.
    /// </summary>
    [Parameter]
    public required int RowNumber { get; set; }

    /// <summary>
    /// The UserRoleDto containing user and role information.
    /// </summary>
    [Parameter]
    public required UserRoleDto UserRoleDto { get; set; }

    /// <summary>
    /// Event callback to save changes made to the user.
    /// </summary>
    [Parameter]
    public EventCallback<ApplicationUser> SaveChanges { get; set; }
    
    private ApplicationUser? User { get; set; }
    private IList<string>? CurrentRoles { get; set; }
    
    private bool IsLockedOut { get; set; }
    private bool IsConfirmingDelete { get; set; } = false;
    private string? UserToDeleteId { get; set; }
    
    private bool IsOperator { get; set; }
    private bool IsTechnician { get; set; }
    private bool IsAdmin { get; set; }
    
    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        User = UserRoleDto.User;
        CurrentRoles = UserRoleDto.Roles;
        IsLockedOut = UserRoleDto.IsLockedOut;
        
        if (CurrentRoles != null)
        {
            IsAdmin = CurrentRoles.Contains("Administrator");
            IsOperator = CurrentRoles.Contains("Operator");
            IsTechnician = CurrentRoles.Contains("Technician");
        }

        // Try to determine if user is new (not persisted in DB)
        if (User != null)
        {
            var existingUser = await UserManager.FindByIdAsync(User.Id);
            UserRoleDto.IsNew = existingUser == null;
        }
    }

    private async Task UpdateRoleAsync(string selectedRole, bool isChecked)
    {
        try
        {
            if (User == null)
            {
                return;
            }

            if (isChecked)
            {
                
                await UserManager.AddToRoleAsync(User, selectedRole);
            }
            else
            {
                await UserManager.RemoveFromRoleAsync(User, selectedRole);
            }
            
            switch (selectedRole)
            {
                case "Operator":
                    IsOperator = isChecked;
                    ToastService.ShowSuccess("Operator Updated");
                    break;
                case "Technician":
                    IsTechnician = isChecked;
                    ToastService.ShowSuccess("Technician Updated");
                    break;
                case "Administrator":
                    IsAdmin = isChecked;
                    ToastService.ShowSuccess("Administrator Updated");
                    break;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task ToggleLockoutAsync()
    {
        if (User == null)
        {
            return;
        }
        
        try
        {
            ToastService.ShowSuccess("Message");
            if (IsLockedOut)
            {
                await UserManager.SetLockoutEndDateAsync(User, null);
                IsLockedOut = false;
                ToastService.ShowSuccess("User unlocked.");
            }
            else
            {
                await UserManager.SetLockoutEndDateAsync(User, DateTimeOffset.UtcNow.AddYears(100));
                IsLockedOut = true;
                ToastService.ShowWarning("User locked.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void InitiateDeleteUser(string userId)
    {
        UserToDeleteId = userId;
        IsConfirmingDelete = true;
    }

    private void CancelDeleteUser()
    {
        IsConfirmingDelete = false;
        UserToDeleteId = null;
    }

    private async Task ConfirmDeleteUser()
    {
        if (User == null)
        {
            return;
        }

        try
        {
            var result = await UserManager.DeleteAsync(User);
            if (result.Succeeded)
            {
                ToastService.ShowSuccess($"User {User.Email} has been deleted");
                StateHasChanged();
            }
            else
            {
                ToastService.ShowError($"Failed to delete user: {string.Join(", ", result.Errors.Select(e => e.Description))}");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ToastService.ShowError($"Error deleting user: {e.Message}");
        }
        finally
        {
            IsConfirmingDelete = false;
            UserToDeleteId = null;
        }
    }

    private void DeleteUserAsync()
    {
        if (User == null)
        {
            return;
        }
    
        InitiateDeleteUser(User.Id);
    }

}
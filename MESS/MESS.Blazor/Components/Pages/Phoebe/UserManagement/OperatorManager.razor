@page "/users"
@attribute [Authorize(Roles = "Technician")]
@using MESS.Data.DTO
@using MESS.Data.Models
@using MESS.Services.ApplicationUser
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthProvider
@inject IApplicationUserService ApplicationUserService
@inject UserManager<ApplicationUser> UserManager

<div class="container justify-content-center">
    <h1>
        Users
    </h1>
    <button class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
    <div>
        <table>
            <thead>
            <tr>
                <th scope="col">
                    #
                </th>
                <th scope="col">Email</th>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
                <th scope="col">Role</th>
                <th scope="col">Actions</th>
            </tr>
            </thead>
            <tbody>
                @if (ApplicationUserDtoList != null)
                {
                    @foreach (var (userDto, index) in ApplicationUserDtoList.Select((user, index) => (user, index)))
                    {
                        <UserTableRow RowNumber="index" UserRoleDto="userDto" />
                    }
                }
            </tbody>
        </table>
        
    </div>
    <div>

    </div>
</div>

@code {
    private List<UserRoleDto> ApplicationUserDtoList { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var applicationUsers = await ApplicationUserService.GetApplicationUsers();
        foreach (var user in applicationUsers)
        {
            var roles = await UserManager.GetRolesAsync(user);
            var userDto = new UserRoleDto
            {
                User = user,
                Roles = roles
            };
            
            ApplicationUserDtoList.Add(userDto);
        }
    }

    private async Task SaveChanges()
    {
        if (ApplicationUserDtoList != null)
        {
            foreach (var user in ApplicationUserDtoList)
            {
                await ApplicationUserService.UpdateApplicationUser(user.User);
            }
        }
    }

}
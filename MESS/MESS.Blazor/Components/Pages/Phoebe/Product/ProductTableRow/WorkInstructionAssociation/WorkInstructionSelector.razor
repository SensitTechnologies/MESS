@using MESS.Data.Models

<div class="mb-3">
    <h5>Associated Work Instructions</h5>

    <div class="list-group scrollable-checkbox-container">
        @if (Instructions == null)
        {
            <div class="list-group-item text-muted text-center">Loading work instructions...</div>
        }
        else if (!Instructions.Any())
        {
            <div class="list-group-item text-muted text-center">No associated work instructions.</div>
        }
        else
        {
            @foreach (var instruction in Instructions)
            {
                <label class="list-group-item">
                    <input type="checkbox"
                           class="form-check-input me-1"
                           checked="@SelectedInstructionIds.Contains(instruction.Id)"
                           @onchange="(e => ToggleSelection(instruction.Id, (bool)(e.Value ?? false)))" />
                    @($"{instruction.Title} v{instruction.Version}")
                </label>
            }
        }
    </div>
    <div class="dropdown float-end">
        <button type="button" class="btn btn-sm btn-light dropdown-toggle @(IsDropdownOpen ? "show" : "")" aria-expanded="@IsDropdownOpen" @onclick="ToggleDropdown">
            Actions
        </button>
        <ul class="dropdown-menu @(IsDropdownOpen ? "show" : "")">
            <li>
                <a class="dropdown-item" @onclick="() => OnAddClicked.InvokeAsync()">Add Instructions</a>
            </li>
            <li><hr class="dropdown-divider" /></li>
            <li>
                <a class="dropdown-item text-danger" @onclick="RemoveSelected">Remove Selected</a>
            </li>
        </ul>
    </div>
</div>

@code {
    /// <summary>
    /// The work instructions currently associated with this product.
    /// </summary>
    [Parameter, EditorRequired]
    public List<WorkInstruction> Instructions { get; set; } = [];

    /// <summary>
    /// The instruction IDs that are selected for bulk actions.
    /// </summary>
    [Parameter]
    public List<int> SelectedInstructionIds { get; set; } = [];

    /// <summary>
    /// Notifies the parent when the selection changes.
    /// </summary>
    [Parameter]
    public EventCallback<List<int>> SelectedInstructionIdsChanged { get; set; }
    
    /// <summary>
    /// An event callback triggered when the user pushes the "Add Instructions" button.
    /// </summary>
    [Parameter] public EventCallback OnAddClicked { get; set; }
    
    /// <summary>
    /// An event callback triggered when the user chooses to remove selected instructions.
    /// </summary>
    [Parameter]
    public EventCallback<List<int>> OnRemoveSelected { get; set; }
    
    private void OnActionsClicked()
    {
        // Your custom logic when Actions button is clicked
        Console.WriteLine("Actions button clicked");
    }

    private async Task ToggleSelection(int instructionId, bool isChecked)
    {
        if (isChecked)
        {
            if (!SelectedInstructionIds.Contains(instructionId))
                SelectedInstructionIds.Add(instructionId);
        }
        else
        {
            SelectedInstructionIds.Remove(instructionId);
        }

        await SelectedInstructionIdsChanged.InvokeAsync(SelectedInstructionIds);
    }
    
    private async Task RemoveSelected()
    {
        if (SelectedInstructionIds.Any())
        {
            await OnRemoveSelected.InvokeAsync(SelectedInstructionIds);
            IsDropdownOpen = false; // close dropdown after removal
        }
    }
    
    private bool IsDropdownOpen;
    
    private void ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
    }


}

@using MESS.Data.Models
@using MESS.Blazor.Components.Dialogs
@using MESS.Blazor.Components.Pages.Phoebe.Product.ProductTableRow.WorkInstructionAssociation
@using DialogParameters = Microsoft.FluentUI.AspNetCore.Components.DialogParameters
@inject Microsoft.FluentUI.AspNetCore.Components.IDialogService DialogService

<MudTd DataLabel="Name">
    <InputText id="name" @bind-Value="Product.Name" class="form-control" placeholder="Enter product name" @oninput="OnInputChanged"/>
</MudTd>
<MudTd DataLabel="Active">
    <InputCheckbox id="isActive"
                   Value="Product.IsActive"
                   ValueChanged="HandleCheckboxChanged"
                   ValueExpression="() => Product.IsActive"
                   class="form-check-input" />
</MudTd>
<MudTd DataLabel="Work Instruction">
    <WorkInstructionSelector 
        Instructions="Instructions"
        SelectedInstructionIds="SelectedInstructionIds"
        SelectedInstructionIdsChanged="SelectedInstructionIdsChanged"
        OnAddClicked="OnAddInstructions"
        OnRemoveSelected="OnRemoveInstructions" />
</MudTd>
<MudTd DataLabel="Actions">
    @if (!IsNewProduct)
    {
        <div class="save-button-container">
            <button class="btn btn-sm btn-success" @onclick="HandleSubmit" disabled="@isSaving" title="Save">
                <i class="bi bi-floppy"></i>
                @if (IsDirty)
                {
                    <span class="red-dot"></span>
                }
            </button>
        </div>
        <button class="btn btn-sm btn-danger ms-2" @onclick="ShowDeleteConfirmation">
            <i class="bi bi-trash" />
        </button>
    }
    else
    {
        <button class="btn btn-sm btn-primary" @onclick="HandleSubmit" disabled="@isSaving">
            <i class="bi bi-plus-lg"></i>
        </button>
    }
</MudTd>

@code {
    /// <summary>
    /// The product associated with this row.
    /// </summary>
    [Parameter]
    public required Product Product { get; set; }

    /// <summary>
    /// Work instructions already associated with this product (filtered).
    /// </summary>
    [Parameter]
    public List<WorkInstruction> Instructions { get; set; } = [];

    /// <summary>
    /// Currently selected instruction IDs for bulk action.
    /// </summary>
    [Parameter]
    public List<int> SelectedInstructionIds { get; set; } = [];

    /// <summary>
    /// Callback for when selection changes.
    /// </summary>
    [Parameter]
    public EventCallback<List<int>> SelectedInstructionIdsChanged { get; set; }

    /// <summary>
    /// Callback when the "Add Instructions" action is triggered.
    /// </summary>
    [Parameter]
    public EventCallback OnAddInstructions { get; set; }

    /// <summary>
    /// Callback when "Remove Selected" is triggered.
    /// </summary>
    [Parameter]
    public EventCallback<List<int>> OnRemoveInstructions { get; set; }
    
    /// <summary>
    /// Callback to notify the parent that this product should be deleted.
    /// </summary>
    [Parameter]
    public EventCallback<Product> OnDeleteRequested { get; set; }


    /// <summary>
    /// An event callback triggered upon pushing the create/save button.
    /// </summary>
    [Parameter]
    public EventCallback<Product> OnSubmit { get; set; }

    private bool IsNewProduct => Product.Id == 0;
    private bool isSaving = false;
    private bool IsDirty { get; set; } = false;
    

    
    private void OnInputChanged(ChangeEventArgs e)
    {
        IsDirty = true;
    }

    private async Task HandleSubmit()
    {
        if (!IsDirty)
            return;

        isSaving = true;
        await OnSubmit.InvokeAsync(Product);
        isSaving = false;
        IsDirty = false;
    }

    
    private async Task ShowDeleteConfirmation()
    {
        var data = (
            bodyMessage: $"Are you sure you want to delete '{Product.Name}'?", 
            callback: EventCallback.Factory.Create(this, RaiseDeleteEvent)
        );
        
        var dialog =  await DialogService.ShowDialogAsync<ConfirmationDialog>(data, new DialogParameters()
        {
            Title = $"Delete Product",
            PreventScroll = true,
            PreventDismissOnOverlayClick = true,
        });

        await dialog.Result;
    }
    

    private async Task RaiseDeleteEvent()
    {
        await OnDeleteRequested.InvokeAsync(Product);
    }
    
    private void HandleCheckboxChanged(bool newValue)
    {
        Product.IsActive = newValue;
        IsDirty = true;
    }
}

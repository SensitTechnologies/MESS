@page "/products"
@layout PhoebeLayout
@attribute [Authorize(Roles = "Technician, Administrator")]
@using MESS.Blazor.Components.Layout
@using MESS.Data.Models
@using MESS.Services.Product
@using MESS.Services.WorkInstruction
@using Microsoft.AspNetCore.Authorization
@using Serilog
@inject IProductService ProductService
@inject IWorkInstructionService WorkInstructionService
@inject IToastService ToastService

<PageTitle>Product List</PageTitle>

<h3>Product List</h3>

@if (Products.Count == 0)
{
    <p>No products currently available.</p>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Name</th>
            <th>Active</th>
            <th>Work Instructions</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in Products)
        {
            <ProductTableRow Product="product" OnSubmit="HandleSubmitProduct" AllInstructions="_allInstructions"/>
        }
        <ProductTableRow Product="_newProduct" OnSubmit="HandleSubmitProduct" AllInstructions="_allInstructions" />
        </tbody>
    </table>
}

@code {
    private List<Product> Products { get; set; } = new List<Product>();
    private Product _newProduct = new Product { Name = "", IsActive = true };
    private List<WorkInstruction>? _allInstructions;
    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        _allInstructions = await WorkInstructionService.GetAllAsync();
    }

    private async Task LoadProducts()
    {
        Products = (await ProductService.GetAllAsync()).ToList();
    }

    private async Task HandleSubmitProduct(Product product)
    {
        try
        {
            Log.Information("Submitting product: {ProductName} (ID: {ProductId})", product.Name, product.Id);

            if (product.Id == 0) 
            {
                await ProductService.CreateAsync(product);  // Create new product
                ToastService.ShowSuccess($"Product '{product.Name}' created successfully!");
            }
            else
            {
                await ProductService.UpdateProductAsync(product);  // Update existing product
                ToastService.ShowSuccess($"Product '{product.Name}' updated successfully!");
            }

            await LoadProducts();

            _newProduct = new Product
            {
                Name = "",
                IsActive = true
            };

            Log.Information("Product submitted successfully: {ProductName} (ID: {ProductId})", product.Name, product.Id);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error occurred while submitting product: {ProductName} (ID: {ProductId})", product.Name, product.Id);
            ToastService.ShowError($"Error submitting product '{product.Name}'. Please try again.");
        }
    }

}

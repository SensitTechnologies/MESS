@namespace MESS.Blazor.Components.Pages.Phoebe.MenuBar
@using Microsoft.AspNetCore.Components.Authorization
@inject ILogger<MenuBarPhoebe> DemoLogger
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components

<style>
    .menu-bar-card {
        background-color: var(--menu-bg);
        border: 1px solid var(--menu-border);
        color: var(--menu-item-color);
        border-radius: 0.5rem;
        box-shadow: 0 2px 6px rgb(0 0 0 / 0.1);
        padding: 0.5rem 1rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        user-select: none;
        gap: 1rem;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }

    body.dark-mode .menu-bar-card {
        background-color: var(--menu-bg);
        border-color: var(--menu-border);
        color: var(--menu-item-color);
        box-shadow: 0 2px 6px rgb(255 255 255 / 0.1);
    }

    /* Transparent buttons with yellow hover */
    .btn-small {
        background-color: transparent;
        color: inherit;
        border: none;
        padding: 0.3rem 0.6rem;
        border-radius: 0.25rem;
        cursor: pointer;
        font-size: 0.9rem;
        min-width: 2.5rem;
        transition: background-color 0.2s ease, color 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-small:hover,
    .btn-small:focus {
        background-color: gold;
        color: black;
        outline: none;
    }

    .dark-toggle-btn {
        font-size: 1.1rem;
    }

    /* Logout button */
    .btn-logout {
        background-color: transparent;
        color: inherit;
        border: none;
        border-radius: 0.25rem;
        padding: 0.25rem 0.5rem;
        font-size: 1rem;
        line-height: 1;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
    }

    .btn-logout:hover,
    .btn-logout:focus {
        background-color: gold;
        color: black;
    }

    .btn-logout-icon {
        font-size: 1.25rem;
        line-height: 1;
        padding: 0;
    }

    /* Input styling */
    .menu-input,
    .menu-input-secondary {
        padding: 0.3rem 0.6rem;
        font-size: 0.9rem;
        border: 1px solid #ccc;
        border-radius: 0.25rem;
        min-width: 120px;
        transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
    }

    .menu-input:focus,
    .menu-input-secondary:focus {
        outline: none;
        border-color: gold;
        box-shadow: 0 0 0 0.1rem rgba(255, 215, 0, 0.5);
    }

    body.dark-mode .menu-input,
    body.dark-mode .menu-input-secondary {
        background-color: #2c2c2c;
        color: white;
        border-color: #555;
    }

    body.dark-mode .menu-input::placeholder,
    body.dark-mode .menu-input-secondary::placeholder {
        color: #aaa;
    }

    body:not(.dark-mode) .menu-input,
    body:not(.dark-mode) .menu-input-secondary {
        background-color: #fff;
        color: #000;
    }

    /* Layout containers */
    .menu-left-buttons,
    .menu-right-content {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .menu-input-container {
        flex-grow: 1;
        display: flex;
        align-items: center;
    }

    .logout-container {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        white-space: nowrap;
    }

    form.logout-form {
        margin: 0;
    }
</style>

<div class="menu-bar-card">
    <!-- Sidebar toggle button on the far left -->
    <button class="btn-small" title="Toggle Sidebar" @onclick="OnSidebarToggleClicked" aria-label="Toggle sidebar">
        ☰
    </button>

    <!-- Left Section: File + Options buttons -->
    <div class="menu-left-buttons">
        <button class="btn-small" @onclick="ToggleFileMenu" id="btnOpen1" aria-expanded="@open">File</button>
        <FluentMenu Anchor="btnOpen1" Open="@open" OpenChanged="@(val => open = val)" OnMenuChange="OnMenuChange" VerticalThreshold="170">
            <FluentMenuItem OnClick="@(() => LogAndClose("New"))">New</FluentMenuItem>
            <FluentMenuItem OnClick="@(() => LogAndClose("Import"))">Import</FluentMenuItem>
            <FluentMenuItem OnClick="@(() => LogAndClose("Export"))">Export</FluentMenuItem>
            <FluentMenuItem OnClick="@(() => LogAndClose("Save"))">Save</FluentMenuItem>
            <FluentMenuItem OnClick="@(() => LogAndClose("Save As"))">Save As</FluentMenuItem>
            <FluentMenuItem OnClick="@(() => LogAndClose("Delete"))">Delete</FluentMenuItem>
        </FluentMenu>

        <button class="btn-small" @onclick="ToggleOptionsMenu" id="btnOpen2" aria-expanded="@openOptions">Options</button>
        <FluentMenu Anchor="btnOpen2" Open="@openOptions" OpenChanged="@(val => openOptions = val)" OnMenuChange="OnMenuChange" VerticalThreshold="170">
            <FluentMenuItem Checked="@qrChecked" OnClick="@(() => ToggleOption(nameof(qrChecked)))">QR Code</FluentMenuItem>
            <FluentMenuItem Checked="@serialChecked" OnClick="@(() => ToggleOption(nameof(serialChecked)))">Serial Number</FluentMenuItem>
            <FluentMenuItem Checked="@activeChecked" OnClick="@(() => ToggleOption(nameof(activeChecked)))">Active</FluentMenuItem>
        </FluentMenu>
    </div>

    <!-- Input container that grows to fill space between Options button and right inputs -->
    <div class="menu-input-container">
        <input type="text" class="menu-input" placeholder="Enter Title Here..." @bind="inputText" @onkeydown="HandleKeyDown" />
    </div>

    <!-- Right Section: Additional inputs + user + logout -->
    <div class="menu-right-content" style="align-items:center; gap: 1rem;">
        <input type="text" class="menu-input-secondary" placeholder="Version..." @bind="additionalInput" />
        <button class="btn-small" title="Clock">⏰</button>
        <button class="btn-small" title="Save">💾</button>
        <button class="btn-small dark-toggle-btn" title="Dark Mode" @onclick="ToggleDarkMode">@darkModeIcon</button>

        @if (!string.IsNullOrWhiteSpace(ActiveLineOperator))
        {
            <div class="logout-container">
                <span>@ActiveLineOperator</span>
                <form method="post" action="/api/auth/logout" class="logout-form">
                    <button type="submit" class="btn btn-logout btn-logout-icon" title="Logout">👤</button>
                </form>
            </div>
        }
    </div>
</div>

@code {
    /// <summary>
    /// The currently active line operator's username, displayed near the logout button.
    /// </summary>
    [Parameter]
    public string? ActiveLineOperator { get; set; }

    /// <summary>
    /// Event callback to notify parent layout to toggle sidebar visibility.
    /// </summary>
    [Parameter]
    public EventCallback OnSidebarToggle { get; set; }

    private bool open = false;
    private bool openOptions = false;

    private bool qrChecked = false;
    private bool serialChecked = false;
    private bool activeChecked = false;

    private string inputText = "";
    private string additionalInput = "";

    private string darkModeIcon = "🌙";

    private void ToggleFileMenu()
    {
        open = !open;
        openOptions = false;
    }

    private void ToggleOptionsMenu()
    {
        openOptions = !openOptions;
        open = false;
    }

    private void OnMenuChange(MenuChangeEventArgs args)
    {
        if (args?.Value is not null)
        {
            DemoLogger.LogInformation($"Item '{args.Value}' clicked");
        }
    }

    private void LogAndClose(string item)
    {
        open = false;
        openOptions = false;
        DemoLogger.LogInformation($"Clicked: {item}");
    }

    private void ToggleOption(string field)
    {
        switch (field)
        {
            case nameof(qrChecked): qrChecked = !qrChecked; break;
            case nameof(serialChecked): serialChecked = !serialChecked; break;
            case nameof(activeChecked): activeChecked = !activeChecked; break;
        }

        openOptions = false;
        DemoLogger.LogInformation($"Toggled: {field}");
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(inputText))
        {
            DemoLogger.LogInformation($"Entered: {inputText}");
            inputText = "";
        }
    }

    private async Task ToggleDarkMode()
    {
        await JS.InvokeVoidAsync("document.body.classList.toggle", "dark-mode");
        var isDark = await JS.InvokeAsync<bool>("document.body.classList.contains", "dark-mode");
        darkModeIcon = isDark ? "☀️" : "🌙";
        DemoLogger.LogInformation("Toggled dark mode");
    }

    private async Task OnSidebarToggleClicked()
    {
        if (OnSidebarToggle.HasDelegate)
        {
            await OnSidebarToggle.InvokeAsync(null);
        }
    }
}

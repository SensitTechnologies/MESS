@using MESS.Data.Models
@inject MESS.Services.Product.IProductService ProductService

<div class="list-group scrollable-checkbox-container">
    @if (AllProducts == null)
    {
        <div class="text-muted">Loading products...</div>
    }
    else
    {
        @foreach (var product in AllProducts)
        {
            <div class="list-group-item d-flex align-items-center gap-2">
                <input type="checkbox"
                       class="form-check-input me-1"
                       checked="@IsProductSelected(product.Id)"
                       @onchange="@(e => ToggleProductSelection(product, e.Value is bool b && b))" />

                @if (product.Id == 0)
                {
                    <input class="form-control"
                           value="@product.Name"
                           @onchange="@((ChangeEventArgs e) => UpdateProductName(product, e.Value?.ToString()))"
                           placeholder="Product name" />
                }
                else
                {
                    <span>@product.Name</span>
                }
            </div>
        }
        @foreach (var product in UnsavedProducts)
        {
            <input class="form-control"
                   value="@product.Name"
                   @onchange="(e => UpdateProductName(product, e.Value?.ToString()))"
                   placeholder="Product name"
                   @onblur="@(() => SaveNewProductAsync(product))" />
        }
        
        <div class="list-group-item d-flex justify-content-between align-items-center">
            <button class="btn btn-sm btn-outline-primary" @onclick="AddNewProduct">
                + Add Product
            </button>
        </div>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the complete list of all available products to display and manage.
    /// This list is typically provided by the parent component.
    /// </summary>
    [Parameter, EditorRequired]
    public List<Product> AllProducts { get; set; } = new();

    /// <summary>
    /// Gets or sets the list of currently selected products.
    /// </summary>
    [Parameter]
    public List<Product> SelectedProducts { get; set; } = new List<Product>();

    /// <summary>
    /// Event callback invoked whenever the selection of products changes.
    /// The updated list of selected products is passed as an argument.
    /// </summary>
    [Parameter]
    public EventCallback<List<Product>> SelectedProductsChanged { get; set; }
    
    private List<Product> UnsavedProducts { get; set; } = new();

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        // Defensive: make sure SelectedProducts is never null
        if (SelectedProducts == null)
        {
            SelectedProducts = new List<Product>();
        }
    }

    /// <summary>
    /// Determines whether the product with the specified ID is currently selected.
    /// </summary>
    /// <param name="productId">The ID of the product to check.</param>
    /// <returns><c>true</c> if the product is selected; otherwise, <c>false</c>.</returns>
    private bool IsProductSelected(int productId) =>
        SelectedProducts.Any(p => p.Id == productId);

    /// <summary>
    /// Toggles the selection state of the specified product.
    /// The list is rebuilt after each operation.
    /// </summary>
    /// <param name="product">The product whose selection state changed.</param>
    /// <param name="isChecked">Indicates whether the product is selected.</param>
    /// <returns>A task that completes when the selection change is processed.</returns>
    private async Task ToggleProductSelection(Product product, bool isChecked)
    {
        Console.WriteLine($"Toggle: {product.Name} - Checked: {isChecked}");

        var updatedSelection = SelectedProducts.ToList();

        if (isChecked)
        {
            if (!updatedSelection.Any(p => p.Id == product.Id))
                updatedSelection.Add(product);
        }
        else
        {
            updatedSelection.RemoveAll(p => p.Id == product.Id);
        }

        await SelectedProductsChanged.InvokeAsync(updatedSelection);
    }

    /// <summary>
    /// Updates the name of the given product and persists the change through the product service.
    /// </summary>
    /// <param name="product">The product to update.</param>
    /// <param name="newName">The new name for the product.</param>
    /// <returns>A task that completes when the update operation finishes.</returns>
    private async Task UpdateProductName(Product product, string? newName)
    {
        if (string.IsNullOrWhiteSpace(newName) || newName == product.Name)
            return;

        product.Name = newName;
        
        await ProductService.UpdateProductAsync(product);
    }
    
    private void AddNewProduct()
    {
        var newProduct = new Product { Name = "" };
        UnsavedProducts.Add(newProduct);
    }
    
    private async Task SaveNewProductAsync(Product product)
    {
        if (!string.IsNullOrWhiteSpace(product.Name))
        {
            await ProductService.CreateAsync(product);
            AllProducts.Add(product);
            UnsavedProducts.Remove(product);
            SelectedProducts.Add(product);
            await SelectedProductsChanged.InvokeAsync(SelectedProducts);
        }
    }
}
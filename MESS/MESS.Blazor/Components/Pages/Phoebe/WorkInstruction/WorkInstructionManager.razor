@page "/WorkInstructionManager"
@using MESS.Data.DTO
@using MESS.Data.Models
@using MESS.Services.Product
@using MESS.Services.WorkInstruction
@using Serilog
@using MESS.Blazor.Components.Pages.Phoebe.MenuBar
@using MESS.Blazor.Components.Navigator
@using Microsoft.AspNetCore.Authorization
@inject IWorkInstructionService WorkInstructionService
@inject IProductService ProductService
@inject IToastService ToastService
@attribute [Authorize(Roles = "Technician, Administrator")]

<MenuBarPhoebe OnSidebarToggle="ToggleSidebar" />

<!-- Sidebar component with IsOpen and OnToggle -->
<NavigationMenu IsOpen="@isSidebarOpen" OnToggle="ToggleSidebar" />

<div class="container justify-content-center" style="margin-left:@(isSidebarOpen ? "250px" : "0"); transition: margin-left 0.3s ease;">
    <WorkInstructionImport OnImportComplete="HandleImportComplete" />
    <FluentGrid Class="mt-5" Justify="JustifyContent.Center">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
            <FluentLabel>Title</FluentLabel>
            <FluentLabel>Version</FluentLabel>
            <FluentLabel>Actions</FluentLabel>
        </FluentStack>

        @foreach (var (instruction, index) in WorkInstructions.Select((instruction, index) => (instruction, index)))
        {
            <FluentGridItem xs="12">
                <WorkInstructionTableRow RowNumber="index" WorkInstruction="instruction" SaveChanges="SaveChanges"
                                         OnDuplicate="HandleDuplicate" OnDelete="HandleDelete"
                                         AllProducts="AllProducts" />
            </FluentGridItem>
        }
    </FluentGrid>
</div>

@code {
    private List<WorkInstruction> WorkInstructions { get; set; } = new();
    private List<Product>? AllProducts { get; set; }

    /// <summary>
    /// Tracks whether the sidebar is currently open.
    /// </summary>
    private bool isSidebarOpen = false;

    /// <summary>
    /// Toggles the sidebar open/closed state.
    /// Called by MenuBarPhoebe component or NavigationMenu component.
    /// </summary>
    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
        StateHasChanged();
    }

    /// <summary>
    /// Loads all work instructions and products asynchronously.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        WorkInstructions = await WorkInstructionService.GetAllAsync();
        AllProducts = (await ProductService.GetAllProductsAsync()).ToList();
    }

    private async Task SaveChanges(WorkInstruction instruction)
    {
        if (string.IsNullOrWhiteSpace(instruction.Title))
        {
            Log.Information("Attempted Work Instruction save changes with empty or null Title, for instruction ID: {InstructionId}", instruction.Id);
            ToastService.ShowError("A Work Instruction must have a title.");
            return;
        }

        try
        {
            var saveResult = await WorkInstructionService.UpdateWorkInstructionAsync(instruction);
            if (saveResult)
            {
                ToastService.ShowSuccess($"Work Instruction: {instruction.Title} Version: {instruction.Version}, was successfully saved.");
            }
            else
            {
                ToastService.ShowError($"Unable to save Work Instruction: {instruction.Title}. Please ensure that both the Title and Version are unique.");
            }
        }
        catch (Exception e)
        {
            Log.Error("Error saving Work Instruction changes: {errorMessage}", e.Message);
            ToastService.ShowError("An error occurred while saving changes");
        }
    }

    private Task HandleDuplicate(WorkInstruction newInstruction)
    {
        WorkInstructions.Add(newInstruction);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleDelete(WorkInstruction workInstructionToRemove)
    {
        WorkInstructions.Remove(workInstructionToRemove);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void HandleImportComplete(WorkInstruction importedWorkInstruction)
    {
        WorkInstructions.Add(importedWorkInstruction);
        ToastService.ShowSuccess($"Successfully imported Work Instruction: {importedWorkInstruction.Title}, Version: {importedWorkInstruction.Version}", 3000);
    }
}

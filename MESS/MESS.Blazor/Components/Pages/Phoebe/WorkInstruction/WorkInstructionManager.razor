@page "/WorkInstructionManager"
@using MESS.Blazor.Components.Pages.Phoebe.WorkInstruction.WorkInstructionNodes
@using MESS.Data.Models
@using MESS.Services.Product
@using MESS.Services.WorkInstruction
@using Serilog
@using MESS.Blazor.Components.Pages.Phoebe.MenuBar
@using MESS.Blazor.Components.Navigator
@using Microsoft.AspNetCore.Authorization
@inject IWorkInstructionService WorkInstructionService
@inject IProductService ProductService
@inject IToastService ToastService
@inject IWorkInstructionEditorService WorkInstructionEditorService
@attribute [Authorize(Roles = "Technician, Administrator")]

<MenuBarPhoebe 
    Products="@Products"
    WorkInstructions="@FilteredWorkInstructions"
    SelectedProductId="@SelectedProductId"
    SelectedWorkInstructionId="@SelectedWorkInstructionId"
    OnProductSelected="OnProductSelected"
    OnWorkInstructionSelected="OnWorkInstructionSelected"
    OnSidebarToggle="ToggleSidebar"
    OnNewConfirmed="HandleNewInstruction"
    OnDelete="DeleteInstruction"
    OnSave="SaveEditorChanges"
    OnSaveAsConfirmed="HandleSaveAs"
    OnRestoredFromVersionHistory="HandleRestoredFromVersionHistory"
    OnImportComplete="HandleImportComplete"
    IsDirty="WorkInstructionEditorService.IsDirty"
    CurrentInstruction="WorkInstructionEditorService.Current" />

<NavigationMenu IsOpen="@isSidebarOpen" OnToggle="ToggleSidebar" />

<div class="container justify-content-center" style="margin-left:@(isSidebarOpen ? "250px" : "0"); transition: margin-left 0.3s ease;">
    <WorkInstructionNodeManagerList
        WorkInstructionNodes="WorkInstructionEditorService.Current?.Nodes ?? new List<WorkInstructionNode>()" 
        OnChanged="MarkEditorDirty" />
</div>

@code {
    private bool isSidebarOpen = false;

    private List<Product> Products { get; set; } = new();
    private List<WorkInstruction> AllWorkInstructions { get; set; } = new();

    private List<WorkInstruction> FilteredWorkInstructions =>
        SelectedProductId == null || SelectedProductId == -1
            ? AllWorkInstructions
            : AllWorkInstructions
                .Where(wi => wi.Products?.Any(p => p.Id == SelectedProductId) == true)
                .ToList();

    private int? SelectedProductId { get; set; }
    private int? SelectedWorkInstructionId { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        WorkInstructionEditorService.OnChanged += HandleEditorChanged;

        // Load initial data
        Products = (await ProductService.GetAllAsync())?.ToList() ?? new List<Product>();
        AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync() ?? new List<WorkInstruction>();


        await base.OnInitializedAsync();
    }

    private void HandleEditorChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
        StateHasChanged();
    }

    private async Task SaveEditorChanges()
    {
        var current = WorkInstructionEditorService.Current;
        if (current == null)
        {
            ToastService.ShowError("No Work Instruction is currently loaded.");
            return;
        }

        if (string.IsNullOrWhiteSpace(current.Title))
        {
            ToastService.ShowError("A Work Instruction must have a title.");
            return;
        }

        try
        {
            bool isEditable = await WorkInstructionService.IsEditable(current);

            bool success;
            if (isEditable)
            {
                success = await WorkInstructionEditorService.SaveAsync();
                if (success)
                    ToastService.ShowSuccess("Work Instruction updated successfully.");
                else
                    ToastService.ShowError("Unable to save Work Instruction. Please ensure Title and Version are unique.");
            }
            else
            {
                if (WorkInstructionEditorService.Mode == EditorMode.CreateNew)
                {
                    success = await WorkInstructionEditorService.SaveAsync();
                    if (success)
                        ToastService.ShowSuccess("New Work Instruction saved successfully.");
                    else
                        ToastService.ShowError("Error saving new work instruction.");
                }
                else
                {
                    // Create new version, then save
                    await WorkInstructionEditorService.LoadForNewVersionAsync(current.OriginalId ?? current.Id);
                    success = await WorkInstructionEditorService.SaveAsync();
                    if (success)
                        ToastService.ShowSuccess("New version of Work Instruction created successfully.");
                    else
                        ToastService.ShowError("Unable to save new version. Please ensure Title and Version are unique.");
                }
            }

            if (success)
            {
                // Refresh all latest work instructions list after save
                AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync() ?? new List<WorkInstruction>();
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error saving Work Instruction");
            ToastService.ShowError("An error occurred while saving changes.");
        }
    }

    private async Task DeleteInstruction()
    {
        var current = WorkInstructionEditorService.Current;
        if (current == null)
        {
            ToastService.ShowError("No Work Instruction is currently loaded.");
            return;
        }

        if (string.IsNullOrWhiteSpace(current.Title))
        {
            ToastService.ShowError("A Work Instruction must have a title.");
            return;
        }

        try
        {
            bool success = await WorkInstructionService.DeleteAllVersionsByIdAsync(current.Id);
            if (success)
                ToastService.ShowSuccess("Work Instructions deleted successfully.");
            else
                ToastService.ShowError("Unable to delete Work Instruction. Please ensure Title and Version are unique.");

            if (success)
            {
                // Refresh all latest work instructions list after save
                AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync() ?? new List<WorkInstruction>();
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error deleting Work Instruction");
            ToastService.ShowError("An error occurred while deleting Instructions");
        }
    }

    private async Task HandleImportComplete(WorkInstruction importedWorkInstruction)
    {
        ToastService.ShowSuccess(
            $"Successfully imported Work Instruction: {importedWorkInstruction.Title}, Version: {importedWorkInstruction.Version}",
            3000);

        // Refresh latest instructions list
        AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync();

        // Reset product filter to show all
        SelectedProductId = null;

        // Set selection to the newly imported instruction
        SelectedWorkInstructionId = importedWorkInstruction.Id;

        // Load into editor service to sync editor state
        await WorkInstructionEditorService.LoadForEditAsync(importedWorkInstruction.Id);

        // Trigger UI refresh
        StateHasChanged();
    }
    
    private async Task HandleNewInstruction((string Title, List<Product> Products) workInstructionData)
    {
        WorkInstructionEditorService.StartNew(workInstructionData.Title, workInstructionData.Products);
        AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync();
        ToastService.ShowInfo($"Started New Work Instruction \"{workInstructionData.Title}\"");
        
        //Setting the Dropdown to the New Unsaved Instruction
        if (WorkInstructionEditorService.Current != null)
        {
            AllWorkInstructions.Add(WorkInstructionEditorService.Current);
            SelectedWorkInstructionId = WorkInstructionEditorService.Current.Id;
        }
        
        StateHasChanged();
    }
    
    private async Task HandleSaveAs((string Title, List<Product> Products) workInstructionData)
    {
        await WorkInstructionEditorService.StartNewFromCurrent(workInstructionData.Title, workInstructionData.Products);
        await WorkInstructionEditorService.SaveAsync();
        AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync();
        ToastService.ShowInfo($"Saved new work instruction \"{workInstructionData.Title}\"");
        if (WorkInstructionEditorService.Current != null)
        {
            SelectedWorkInstructionId = WorkInstructionEditorService.Current.Id;
        }
        
        StateHasChanged();
    }

    private Task OnProductSelected(int productId)
    {
        SelectedProductId = (productId == -1) ? null : productId;
        SelectedWorkInstructionId = null;

        WorkInstructionEditorService.Reset(); // clear the loaded WI
        
        StateHasChanged();

        return Task.CompletedTask;
    }

    private async Task OnWorkInstructionSelected(int instructionId)
    {
        SelectedWorkInstructionId = instructionId;

        if (instructionId > 0)
        {
            try
            {
                await WorkInstructionEditorService.LoadForEditAsync(instructionId);
                AllWorkInstructions.RemoveAll(wi => wi.Id <= 0);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Failed to load Work Instruction");
                ToastService.ShowError("Failed to load Work Instruction for editing.");
            }
        }
        else
        {
            // Resetting Changes here may or may not be necessary
            // For the moment, it is being bypassed
            //WorkInstructionEditorService.Reset();
        }
    }
    
    private async Task MarkEditorDirty()
    {
        WorkInstructionEditorService.MarkDirty();
        await InvokeAsync(StateHasChanged);
    }
    
    private void HandleRestoredFromVersionHistory()
    {
        ToastService.ShowInfo("Version restored from history.");
    }
}

@page "/WorkInstructionManager"
@using MESS.Blazor.Components.Dialogs
@using MESS.Blazor.Components.Pages.Phoebe.WorkInstruction.WorkInstructionNodes
@using MESS.Data.Models
@using MESS.Services.Product
@using MESS.Services.WorkInstruction
@using Serilog
@using MESS.Blazor.Components.Pages.Phoebe.MenuBar
@using MESS.Blazor.Components.Navigator
@using Microsoft.AspNetCore.Authorization
@using DialogParameters = Microsoft.FluentUI.AspNetCore.Components.DialogParameters
@using DialogResult = Microsoft.FluentUI.AspNetCore.Components.DialogResult
@inject IJSRuntime JSRuntime
@inject IWorkInstructionService WorkInstructionService
@inject IWorkInstructionEditorService WorkInstructionEditorService
@inject IProductService ProductService
@inject IToastService ToastService
@inject Microsoft.FluentUI.AspNetCore.Components.IDialogService DialogService

@attribute [Authorize(Roles = "Technician, Administrator")]

<MenuBarPhoebe 
    Products="@Products"
    WorkInstructions="@FilteredWorkInstructions"
    SelectedProductId="@SelectedProductId"
    SelectedWorkInstructionId="@SelectedWorkInstructionId"
    OnProductSelected="OnProductSelected"
    OnWorkInstructionSelected="OnWorkInstructionSelected"
    OnSidebarToggle="ToggleSidebar"
    OnNewConfirmed="HandleNewInstruction"
    OnDelete="ConfirmAndDelete"
    OnSave="SaveEditorChanges"
    OnSaveAsConfirmed="HandleSaveAs"
    OnEditAssociationsConfirmed="HandleEditAssociations"
    OnRestoredFromVersionHistory="HandleRestoredFromVersionHistory"
    OnImportComplete="HandleImportComplete"
    IsDirty="WorkInstructionEditorService.IsDirty"
    CurrentInstruction="WorkInstructionEditorService.Current" 
    OnNewPart="(() => NewNodeAtBottom(part))"
    OnNewStep="(() => NewNodeAtBottom(step))"/>

<NavigationMenu IsOpen="@isSidebarOpen" OnToggle="ToggleSidebar" />

<div class="d-flex w-100" style="flex-direction: column; margin-left:@(isSidebarOpen ? "250px" : "0"); transition: margin-left 0.3s ease;">
    @if (HasInstruction)
    {
        <div class="flex-grow-1">
            <WorkInstructionNodeManagerList
                WorkInstructionNodes="WorkInstructionEditorService.Current?.Nodes ?? new List<WorkInstructionNode>()" 
                OnChanged="OnListChanged" 
                OnNewNodeAt="NewNodeAt"
                OnNodeRemoved="HandleNodeRemoved" />
        </div>
        
        <div class="d-flex ms-2 disable-highlight justify-content-around">
            <div class="d-flex" style="flex-direction: column">
                @if ( !InstructionHasSteps)
                {
                    <div class="alert alert-info" role="alert">
                        <div>
                            @(!(InstructionHasPart || InstructionHasSteps) ? "This Instruction is empty..." : "")
                            @((InstructionHasPart && !InstructionHasSteps) ? "There are no steps to this Instruction...": "")
                            <br/>
                            Add a Step or Part!    
                        </div>
                    </div>
                }
                
                <div id="buttons-holder" class="d-flex border rounded p-2 justify-content-around" style="flex-direction: row; max-width: 190px; min-width: 190px;">
                    <button class="btn btn-sm btn-primary p-2 me-1" @onclick="(() => NewNodeAtBottom(part))">
                        Add Part
                    </button>
                    <button class="btn btn-sm btn-primary p-2 ms-1" @onclick="(() => NewNodeAtBottom(step))">
                        Add Step
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isSidebarOpen = false;
    
    private bool HasInstruction => WorkInstructionEditorService.Current != null;

    private bool InstructionHasPart => WorkInstructionEditorService.CurrentHasParts();
    private bool InstructionHasSteps => WorkInstructionEditorService.CurrentHasSteps();
    
    private List<Product> Products { get; set; } = new();
    private List<WorkInstruction> AllWorkInstructions { get; set; } = new();

    private List<WorkInstruction> FilteredWorkInstructions =>
        SelectedProductId == null || SelectedProductId == -1
            ? AllWorkInstructions
            : AllWorkInstructions
                .Where(wi => wi.Products?.Any(p => p.Id == SelectedProductId) == true)
                .ToList();

    private int? SelectedProductId { get; set; }
    private int? SelectedWorkInstructionId { get; set; }
    
    private IJSObjectReference? scrollToModule;
    
    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        WorkInstructionEditorService.OnChanged += HandleEditorChanged;

        // Load initial data
        Products = (await ProductService.GetAllAsync())?
            .Where(p => p.IsActive)
            .ToList() ?? new List<Product>();
        AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync() ?? new List<WorkInstruction>();
        
        await base.OnInitializedAsync();
    }
    
    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            scrollToModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import",
                "./Scripts/ScrollTo.js");
        }
    }

    private void HandleEditorChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
        StateHasChanged();
    }

    private async Task SaveEditorChanges()
    {
        var current = WorkInstructionEditorService.Current;
        if (current == null)
        {
            ToastService.ShowError("No Work Instruction is currently loaded.");
            return;
        }

        if (string.IsNullOrWhiteSpace(current.Title))
        {
            ToastService.ShowError("A Work Instruction must have a title.");
            return;
        }

        await OnListChanged(null);

        try
        {
            bool isEditable = await WorkInstructionService.IsEditable(current);

            bool success;
            if (isEditable)
            {
                success = await WorkInstructionEditorService.SaveAsync();
                if (success)
                    ToastService.ShowSuccess("Work Instruction updated successfully.");
                else
                    ToastService.ShowError("Unable to save Work Instruction. Please ensure Title and Version are unique.");
            }
            else
            {
                if (WorkInstructionEditorService.Mode == EditorMode.CreateNew)
                {
                    success = await WorkInstructionEditorService.SaveAsync();
                    if (success)
                        ToastService.ShowSuccess("New Work Instruction saved successfully.");
                    else
                        ToastService.ShowError("Error saving new work instruction.");
                }
                else
                {
                    // Create new version, then save
                    await WorkInstructionEditorService.LoadForNewVersionAsync(current.OriginalId ?? current.Id);
                    success = await WorkInstructionEditorService.SaveAsync();
                    if (success)
                        ToastService.ShowSuccess("New version of Work Instruction created successfully.");
                    else
                        ToastService.ShowError("Unable to save new version. Please ensure Title and Version are unique.");
                }
            }

            if (success)
            {
                // Refresh all latest work instructions list after save
                AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync() ?? new List<WorkInstruction>();
                
                Products = (await ProductService.GetAllAsync())?
                    .Where(p => p.IsActive)
                    .ToList() ?? new List<Product>();
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error saving Work Instruction");
            ToastService.ShowError("An error occurred while saving changes.");
        }
    }

    private async Task DeleteInstruction()
    {
        var current = WorkInstructionEditorService.Current;
        if (current == null)
        {
            ToastService.ShowError("No Work Instruction is currently loaded.");
            return;
        }
        
        try
        {
            bool success = await WorkInstructionService.DeleteAllVersionsByIdAsync(current.Id);
            if (success)
                ToastService.ShowSuccess("Work Instructions deleted successfully.");
            else
                ToastService.ShowError("Unable to delete Work Instruction.");

            if (success)
            {
                // Refresh all latest work instructions list after delete
                AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync() ?? new List<WorkInstruction>();
                WorkInstructionEditorService.Reset();
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error deleting Work Instruction");
            ToastService.ShowError("An error occurred while deleting Instructions");
        }
    }
    
    private async Task ConfirmAndDelete()
    {

        bool needsConfirmation = false;
        var current = WorkInstructionEditorService.Current;

        if (current != null)
        {
            if (current.OriginalId != null)
            {
                needsConfirmation = true;
            }
            
        }

        if (needsConfirmation)
        {
            var data = (
                message: "This Work Instruction or one of its older versions has already been used in Production. " +
                         "Deleting it now will result in the deletion of sensitive data that will become unrecoverable. " +
                         "Would you like to proceed?",
                callback: EventCallback.Factory.Create(this, DeleteInstruction)
            );

            var dialog =  await DialogService.ShowDialogAsync<ConfirmationDialog>(data, new DialogParameters()
            {
                Title = $"Warning: Sensitive Data Might Be Lost",
                Width = "43%",
                PreventScroll = true,
                PreventDismissOnOverlayClick = true,
            });

            await dialog.Result;            
        }
        else
        {
            await DeleteInstruction();
        }
    }
    
    private async Task HandleImportComplete(WorkInstruction importedWorkInstruction)
    {
        ToastService.ShowSuccess(
            $"Successfully imported Work Instruction: {importedWorkInstruction.Title}, Version: {importedWorkInstruction.Version}",
            3000);

        // Refresh latest instructions list
        AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync();

        // Reset product filter to show all
        SelectedProductId = null;

        // Set selection to the newly imported instruction
        SelectedWorkInstructionId = importedWorkInstruction.Id;

        // Load into editor service to sync editor state
        await WorkInstructionEditorService.LoadForEditAsync(importedWorkInstruction.Id);

        // Trigger UI refresh
        StateHasChanged();
    }
    
    private async Task HandleNewInstruction((string Title, List<Product> Products) workInstructionData)
    {
        WorkInstructionEditorService.StartNew(workInstructionData.Title, workInstructionData.Products);
        AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync();
        ToastService.ShowInfo($"Started New Work Instruction \"{workInstructionData.Title}\"");
        
        //Setting the Dropdown to the New Unsaved Instruction
        if (WorkInstructionEditorService.Current != null)
        {
            AllWorkInstructions.Add(WorkInstructionEditorService.Current);
            SelectedWorkInstructionId = WorkInstructionEditorService.Current.Id;
        }
        
        StateHasChanged();
    }
    
    private async Task HandleSaveAs((string Title, List<Product> Products) workInstructionData)
    {
        await WorkInstructionEditorService.StartNewFromCurrent(workInstructionData.Title, workInstructionData.Products);
        await WorkInstructionEditorService.SaveAsync();
        AllWorkInstructions = await WorkInstructionService.GetAllLatestAsync();
        ToastService.ShowInfo($"Saved new work instruction \"{workInstructionData.Title}\"");
        if (WorkInstructionEditorService.Current != null)
        {
            SelectedWorkInstructionId = WorkInstructionEditorService.Current.Id;
        }
        
        StateHasChanged();
    }
    
    private async Task HandleEditAssociations((string Title, List<Product> Products) workInstructionData)
    {
        if (WorkInstructionEditorService.Current != null)
        {
            if (!string.IsNullOrWhiteSpace(workInstructionData.Title))
            {
                WorkInstructionEditorService.Current.Title = workInstructionData.Title;
            }

            WorkInstructionEditorService.Current.Products = workInstructionData.Products;
        }

        SelectedWorkInstructionId = null;
            
        StateHasChanged();
        await MarkEditorDirty();
    }

    private Task OnProductSelected(int productId)
    {
        SelectedProductId = (productId == -1) ? null : productId;
        SelectedWorkInstructionId = null;

        WorkInstructionEditorService.Reset(); // clear the loaded WI
        
        StateHasChanged();

        return Task.CompletedTask;
    }

    private async Task OnListChanged(WorkInstructionNode? node)
    {
        RecalculatePositions();
        WorkInstructionEditorService.MarkDirty();
        await InvokeAsync(StateHasChanged);
        if (node != null)
        {
            await Task.Delay(20);
            await ScrollToElement(node);
        }
    }
    
    private const string step = "step";
    private const string part = "part";
    private async Task NewNodeAtBottom(string nodeType) => await NewNodeAt((nodeType, -1));
    
    private async Task NewNodeAt((string nodeType, int index)args)
    {
        WorkInstructionNode newNode;

        switch (args.nodeType)
        {
            case part:
                newNode = new PartNode { NodeType = WorkInstructionNodeType.Part, Parts = [new Part { PartName = "", PartNumber = "" }] };
                break;

            default:
                newNode = new Step {NodeType = WorkInstructionNodeType.Step, Name = "", Body = "", DetailedBody = "" };
                break;
        }

        if (args.index < 0 || args.index > WorkInstructionEditorService?.Current?.Nodes.Count)
        {
            WorkInstructionEditorService?.Current?.Nodes.Add(newNode);      // new node at end
        }
        else
        {
            WorkInstructionEditorService?.Current?.Nodes.Insert(args.index, newNode);    // new step at index
        }

        await OnListChanged(newNode);
    }

    private void RecalculatePositions()
    {
        if (WorkInstructionEditorService?.Current?.Nodes != null)
        {
            for (var i = 0; i < WorkInstructionEditorService?.Current?.Nodes.Count; i++)
            {
                WorkInstructionEditorService.Current.Nodes[i].Position = i;
            }
        }
    }

    private async Task ScrollToElement(WorkInstructionNode node)
    {
        string elementId = $"node-{node.Position}";
        if (scrollToModule != null)
        {
            await scrollToModule.InvokeVoidAsync("scrollTo", elementId);
        }
    }
    
    private async Task OnWorkInstructionSelected(int instructionId)
    {
        SelectedWorkInstructionId = instructionId;

        if (instructionId > 0)
        {
            try
            {
                await WorkInstructionEditorService.LoadForEditAsync(instructionId);
                AllWorkInstructions.RemoveAll(wi => wi.Id <= 0);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Failed to load Work Instruction");
                ToastService.ShowError("Failed to load Work Instruction for editing.");
            }
        }
    }
    
    private async Task MarkEditorDirty()
    {
        WorkInstructionEditorService.MarkDirty();
        await InvokeAsync(StateHasChanged);
    }
    
    private void HandleRestoredFromVersionHistory()
    {
        ToastService.ShowInfo("Version restored from history.");
    }
    
    private void HandleNodeRemoved(WorkInstructionNode removedNode)
    {
        // Add the removed node to the queue for deletion in the editor service
        WorkInstructionEditorService.QueueNodeForDeletion(removedNode);
    }
}

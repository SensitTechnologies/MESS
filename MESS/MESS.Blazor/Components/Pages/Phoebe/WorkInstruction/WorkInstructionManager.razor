@page "/WorkInstructionManager"
@using MESS.Data.DTO
@using MESS.Data.Models
@using MESS.Services.WorkInstruction
@using Serilog
@inject IWorkInstructionService WorkInstructionService
@inject IToastService ToastService

<div class="container justify-content-center">
    <div>
        <FluentGrid Justify="JustifyContent.Center">
            @foreach (var (instruction, index) in WorkInstructions.Select((instruction, index) => (instruction, index)))
            {
                <FluentGridItem xs="12">
                    <WorkInstructionTableRow RowNumber="index" WorkInstruction="instruction" SaveChanges="SaveChanges" OnDuplicate="HandleDuplicate" OnDelete="HandleDelete"></WorkInstructionTableRow>
                </FluentGridItem>
            }
        </FluentGrid>
    </div>
</div>
<FluentFooter Class="fixed-bottom">
    <FluentCard>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left">

            </FluentStack>
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right">
                <WorkInstructionImport OnImportComplete="HandleImportComplete"/>
            </FluentStack>
        </FluentStack>
    </FluentCard>
</FluentFooter>


@code {
    private List<WorkInstruction> WorkInstructions { get; set; } = [];
    private string? AlertMessage { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        WorkInstructions = await WorkInstructionService.GetAllAsync();
    }
    
    private async Task SaveChanges(WorkInstruction instruction)
    {
        if (instruction is { Title: {Length: <= 0 } })
        {
            Log.Information("Attempted Work Instruction save changes with empty or null Title, for instruction ID: {InstructionId}", instruction.Id);
            ToastService.ShowError("A Work Instruction must have a title.");
            return;
        }

        try
        {
            // Only have to account for updates here since a work instruction can currently
            // only be created via importation as of 4/3/2025.
            await WorkInstructionService.UpdateWorkInstructionAsync(instruction);
        }
        catch (Exception e)
        {
            Log.Error("Error saving Work Instruction changes: {errorMessage}", e.Message);
            ToastService.ShowError("An error occurred while saving changes");
        }
    }

    private Task HandleDuplicate(WorkInstruction newInstruction)
    {
        WorkInstructions.Add(newInstruction);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleDelete(WorkInstruction workInstructionToRemove)
    {
        WorkInstructions.Remove(workInstructionToRemove);
        ToastService.ShowInfo($"Work Instruction: {workInstructionToRemove.Title} Deleted.");
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void HandleImportComplete(WorkInstruction importedWorkInstruction)
    {
        WorkInstructions.Add(importedWorkInstruction);
        ToastService.ShowSuccess($"Successfully imported Work Instruction: {importedWorkInstruction.Title}, Version: {importedWorkInstruction.Version}", 3000);
    }

}
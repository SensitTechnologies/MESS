@page "/WorkInstructionManager"
@using MESS.Data.DTO
@using MESS.Data.Models
@using MESS.Services.WorkInstruction
@using Serilog
@inject IWorkInstructionService WorkInstructionService

<div class="container justify-content-center">
    @if (AlertMessage?.Length > 0)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            @AlertMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div>
        <WorkInstructionImport OnImportComplete="HandleImportComplete"/>
    </div>
    <div>
        <FluentGrid Justify="JustifyContent.Center">
            @foreach (var (instruction, index) in WorkInstructions.Select((instruction, index) => (instruction, index)))
            {
                <FluentGridItem xs="12">
                    <WorkInstructionTableRow RowNumber="index" WorkInstruction="instruction" DisplayAlert="DisplayAlert" SaveChanges="SaveChanges" OnDuplicate="HandleDuplicate" OnDelete="HandleDelete"></WorkInstructionTableRow>
                </FluentGridItem>
            }
        </FluentGrid>
    </div>

</div>

@code {
    private List<WorkInstruction> WorkInstructions { get; set; } = [];
    private string? AlertMessage { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        WorkInstructions = await WorkInstructionService.GetAllAsync();
    }
    
    private async Task SaveChanges(WorkInstruction instruction)
    {
        if (instruction is { Title: {Length: <= 0 } })
        {
            Log.Information("Attempted Work Instruction save changes with empty or null Title, for instruction ID: {InstructionId}", instruction.Id);
            await DisplayAlert("A Work Instruction must have a title.");
            return;
        }

        try
        {
            // Only have to account for updates here since a work instruction can currently
            // only be created via importation as of 4/3/2025.
            await WorkInstructionService.UpdateWorkInstructionAsync(instruction);
        }
        catch (Exception e)
        {
            Log.Error("Error saving Work Instruction changes: {errorMessage}", e.Message);
            await DisplayAlert("An error occurred while saving changes");
        }
    }
    
    private async Task DisplayAlert(string message)
    {
        AlertMessage = message;

        await Task.Delay(2000);
        AlertMessage = string.Empty;
        
        StateHasChanged();
    }

    private Task HandleDuplicate(WorkInstruction newInstruction)
    {
        WorkInstructions.Add(newInstruction);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleDelete(WorkInstruction workInstructionToRemove)
    {
        WorkInstructions.Remove(workInstructionToRemove);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task HandleImportComplete(WorkInstruction importedWorkInstruction)
    {
        WorkInstructions.Add(importedWorkInstruction);
        await DisplayAlert($"Successfully imported Work Instruction: {importedWorkInstruction.Title}, Version: {importedWorkInstruction.Version}");
    }

}
<div class="dropdown-container" style="position: relative;">
    <button class="btn btn-sm btn-secondary" @onclick="ToggleDropdown">
        ...
    </button>

    @if (IsMenuOpen)
    {
        <div class="dropdown-menu-custom">
            <button class="dropdown-item" @onclick="() => InvokeMove(Up)">Move Up</button>
            <button class="dropdown-item" @onclick="() => InvokeMove(Down)">Move Down</button>
            <button class="dropdown-item" @onclick="() => InvokeMove(Top)">Move to Top</button>
            <button class="dropdown-item" @onclick="() => InvokeMove(Bottom)">Move to Bottom</button>
        </div>
    }
</div>

@code {
    /// <summary>
    /// Invoked when the user selects a move action.
    /// Direction will be one of "up", "down", "top", or "bottom".
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<string> OnAction { get; set; }

    private bool IsMenuOpen { get; set; } = false;

    private const string Up = "up";
    private const string Down = "down";
    private const string Top = "top";
    private const string Bottom = "bottom";

    private void ToggleDropdown()
    {
        IsMenuOpen = !IsMenuOpen;
    }

    private async Task InvokeMove(string direction)
    {
        IsMenuOpen = false;

        if (OnAction.HasDelegate)
        {
            await OnAction.InvokeAsync(direction);
        }
    }
}
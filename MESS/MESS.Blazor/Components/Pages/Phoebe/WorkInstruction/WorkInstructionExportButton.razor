@using MESS.Data.Models
@using MESS.Services.WorkInstruction
@inject IWorkInstructionService WorkInstructionService
@inject IToastService ToastService
@inject IJSRuntime JsRuntime

<button class="btn btn-outline-secondary" type="button" @onclick="DownloadWorkInstruction" disabled="@isLoading">
    Download
    @if (isLoading)
    {
        <span class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></span>
    }
</button>

@code {
    private bool isLoading = false;
    
    /// <summary>
    /// The WorkInstruction object that contains the details of the work instruction to be downloaded.
    /// This parameter is required.
    /// </summary>
    [Parameter]
    public required WorkInstruction WorkInstruction { get; set; }
    
    private async Task DownloadWorkInstruction()
    {
        isLoading = true;
        try
        {
            var workInstructionPath = WorkInstructionService.ExportToXlsx(WorkInstruction);

            if (string.IsNullOrEmpty(workInstructionPath))
            {
                ToastService.ShowError($"Unable to Download Work Instruction: {WorkInstruction.Title}. Please try again.");
                return;
            }

            using var fileStream = File.OpenRead(workInstructionPath);
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            
            // Sanitize filename - remove invalid characters
            var fileName = string.Join("_", (WorkInstruction.Title + WorkInstruction.Version).Split(Path.GetInvalidFileNameChars()));
            fileName = $"{fileName}.xlsx";
            
            await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error downloading file: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

}
@using MESS.Data.Models
@using MESS.Services.CRUD.WorkInstructions
@using MESS.Services.DTOs
@inject IWorkInstructionService WorkInstructionService
@inject IToastService ToastService

<FluentCard Width="400" Class="m-0 w-100">
    <div class="d-flex align-items-center">
        <button @onclick="Import" class="btn btn-primary" disabled="@(IsImporting || File == null)">
            Import File
        </button>
        <InputFile OnChange="LoadFile" accept=".xlsx" class="form-control mb-3"/>
    </div>

    @if (IsImporting)
    {
        <div class="mt-3">
            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%">
                    Importing...
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="alert alert-info mt-3">
            @StatusMessage
        </div>
    }
</FluentCard>


@code {
    /// <summary>
    /// Event callback triggered when the import process is complete.
    /// Passes the imported <see cref="WorkInstruction"/> as a parameter.
    /// </summary>
    [Parameter]
    public EventCallback<WorkInstruction> OnImportComplete { get; set; }
    
    private IBrowserFile? File { get; set; }
    private bool IsImporting { get; set; }
    private string? StatusMessage { get; set; }
    private ImportStatus? FileStatus { get; set; }
    private bool ImportComplete { get; set; }
    
    private async Task Import()
    {
        IsImporting = true;
        ImportComplete = false;

        if (File == null)
        {
            IsImporting = false;
            ImportComplete = true;
            ToastService.ShowError("File is null. Please try again.");
            return;
        }
        
        var importResult = await WorkInstructionService.ImportFromXlsx(File);

        FileStatus = importResult.Status;
        if (importResult is { Status: ImportStatus.Error, ImportError: not null })
        {
            StatusMessage = importResult.ImportError.ToString();
            ToastService.ShowError(StatusMessage, 10000);
        }

        IsImporting = importResult is {Status: ImportStatus.Pending};

        if (importResult.Status == ImportStatus.Complete)
        {
            IsImporting = false;
            ImportComplete = true;
            if (importResult.WorkInstruction == null)
            {
                return;
            }
            await OnImportComplete.InvokeAsync(importResult.WorkInstruction);
            ToastService.ShowSuccess($"Successfully Imported WorkInstruction: {importResult.WorkInstruction.Title}. Version: {importResult.WorkInstruction.Version}", 3000);
        }
    }

    private void LoadFile(InputFileChangeEventArgs obj)
    {
        File = obj.File;
    }

}
@typeparam TItem

<select class="form-select"
        style="max-width: 180px;"
        @onchange="OnSelectionChanged"
        disabled="@Disabled">
    <option value="-1" selected="@IsDefaultSelected">Select @Label</option>

    @foreach (var item in SortedItems)
    {
        <option selected="@IsSelected(item)" value="@GetId(item)">
            @GetDisplayName(item)
        </option>
    }
</select>

@code {
    /// <summary>
    /// The list of items to show in the dropdown.
    /// </summary>
    [Parameter] public List<TItem>? Items { get; set; }

    /// <summary>
    /// Current selected item ID.
    /// </summary>
    [Parameter] public int SelectedId { get; set; } = -1;

    /// <summary>
    /// Label to show in the default option.
    /// </summary>
    [Parameter] public string Label { get; set; } = "Item";

    /// <summary>
    /// Whether the dropdown is disabled.
    /// </summary>
    [Parameter] public bool Disabled { get; set; } = false;

    /// <summary>
    /// Called when an item is selected, passes selected item's ID.
    /// </summary>
    [Parameter] public EventCallback<int> SelectedIdChanged { get; set; }

    /// <summary>
    /// Items sorted by prefix, number, and fallback (custom logic).
    /// </summary>
    private IEnumerable<TItem> SortedItems => Items?.OrderBy(GetNamePrefix)
                                                  .ThenBy(GetNameNumber)
                                                  .ThenBy(GetId)
                                                  ?? Enumerable.Empty<TItem>();

    private bool IsDefaultSelected => SelectedId == -1;

    private bool IsSelected(TItem item) => GetId(item) == SelectedId;

    private async Task OnSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id) && id != -1)
        {
            SelectedId = id;
            await SelectedIdChanged.InvokeAsync(id);
        }
    }

    /// <summary>
    /// Abstract functions to extract info from TItem.
    /// Override or supply via cascading parameters if needed.
    /// </summary>
    private string GetDisplayName(TItem item)
    {
        return item switch
        {
            MESS.Data.Models.WorkInstruction wi => $"{wi.Title} v{wi.Version}",
            MESS.Data.Models.Product p => p.Name,
            _ => item?.ToString() ?? ""
        };
    }

    private int GetId(TItem item)
    {
        return item switch
        {
            MESS.Data.Models.WorkInstruction wi => wi.Id,
            MESS.Data.Models.Product p => p.Id,
            _ => -1
        };
    }

    private string GetNamePrefix(TItem item)
    {
        var name = item switch
        {
            MESS.Data.Models.WorkInstruction wi => wi.Title,
            MESS.Data.Models.Product p => p.Name,
            _ => ""
        };
        var match = System.Text.RegularExpressions.Regex.Match(name ?? "", @"^[^\d]+");
        return match.Success ? match.Value.Trim() : name ?? "";
    }

    private int GetNameNumber(TItem item)
    {
        var name = item switch
        {
            MESS.Data.Models.WorkInstruction wi => wi.Title,
            MESS.Data.Models.Product p => p.Name,
            _ => ""
        };
        var match = System.Text.RegularExpressions.Regex.Match(name ?? "", @"\d+");
        return match.Success ? int.Parse(match.Value) : int.MaxValue;
    }
}

@using MESS.Data.Models
@using MESS.Services.WorkInstruction
@using Serilog
@inject IWorkInstructionService WorkInstructionService
@inject IToastService ToastService

@if (WorkInstruction != null)
{
    <FluentGrid Class="w-100" Spacing="4" Justify="JustifyContent.SpaceEvenly">
            <FluentGridItem xs="12">
                <div class="row w-100 align-items-center">
                    <div class="col-4">
                        <input disabled="@(!IsEditable)" type="text" class="form-control" @bind="WorkInstruction.Title" @bind:event="oninput"/>
                    </div>
                    <div class="col-2">
                        <input disabled="@(!IsEditable)" type="text" class="form-control" @bind="WorkInstruction.Version" @bind:event="oninput"/>
                    </div>
                    <div class="col-6">
                        <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween" Orientation="Orientation.Horizontal">
                            
                        @if (IsEditable)
                        {
                            <button type="button" class="btn btn-secondary btn-outline-secondary" @onclick="ShowStepManager">
                                Edit Actions
                            </button>
                            <button type="button" class="btn btn-outline-danger" @onclick="DeleteWorkInstruction">
                                Delete
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-outline-primary" @onclick="DuplicateWorkInstruction">
                                Duplicate
                            </button>
                        }
                        <button type="button" class="btn btn-outline-info" @onclick="() => WorkInstruction.IsActive = !WorkInstruction.IsActive">
                            @if (WorkInstruction.IsActive)
                            {
                                @("Hide")
                            }
                            else
                            {
                                @("Show")
                            }
                        </button>
                        <FluentDivider/>
                        <button type="button" class="btn btn-outline-success" @onclick="async () => await SaveChanges.InvokeAsync(WorkInstruction)">
                            Save
                        </button>
                        <FluentDivider />
                        <WorkInstructionExportButton WorkInstruction="WorkInstruction"/>
                        </FluentStack>
                    </div>
                </div>
            </FluentGridItem>
            @if (DisplayStepManager)
            {
                <WorkInstructionNodeManagerList WorkInstructionNodes="WorkInstruction.Nodes"/>
            }
        
    </FluentGrid>
}

@code {
    /// <summary>
    /// The row number of the work instruction table.
    /// </summary>
    [Parameter]
    public required int RowNumber { get; set; }

    /// <summary>
    /// Event callback triggered when a work instruction is saved.
    /// </summary>
    [Parameter]
    public EventCallback<WorkInstruction> SaveChanges { get; set; }

    /// <summary>
    /// The work instruction associated with this table row.
    /// </summary>
    [Parameter]
    public required WorkInstruction WorkInstruction { get; set; }

    /// <summary>
    /// Event callback triggered when the work instruction is duplicated.
    /// </summary>
    [Parameter]
    public EventCallback<WorkInstruction> OnDuplicate { get; set; }

    /// <summary>
    /// Event callback triggered when the work instruction is deleted.
    /// </summary>
    [Parameter]
    public EventCallback<WorkInstruction> OnDelete { get; set; }
    
    private bool IsEditable { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        IsEditable = await WorkInstructionService.IsEditable(WorkInstruction);
        await base.OnInitializedAsync();
    }

    private bool IsConfirmingDelete { get; set; } = false;
    private int? WorkInstructionToDeleteId { get; set; }
    private bool DisplayStepManager { get; set; } = false;
    
    private void ShowStepManager()
    {
        DisplayStepManager = !DisplayStepManager;
    }

    private async Task DuplicateWorkInstruction()
    {
        var newInstruction = await WorkInstructionService.DuplicateAsync(WorkInstruction);

        if (newInstruction != null)
        {
            await OnDuplicate.InvokeAsync(newInstruction);
            ToastService.ShowSuccess($"Work Instruction: {newInstruction.Title} duplicated successfully");
        }
        else
        {
            ToastService.ShowError("Failed to duplicate work instruction.");
        }
    }

    /// Only Delete a Work Instruction if it does not have any associated Production Logs
    private async Task DeleteWorkInstruction()
    {
        if (!IsEditable)
        {
            Log.Information("Attempt to delete Work Instruction: {WorkInstructionTitle} with ID: {ID},  Failed since it is not editable.", WorkInstruction.Title, WorkInstruction.Id);
            ToastService.ShowError($"Unable to delete WorkInstruction: {WorkInstruction.Title}, as it is not editable.");
            return;
        }
        var deletionResult = await WorkInstructionService.DeleteByIdAsync(WorkInstruction.Id);
        if (deletionResult)
        {
            await OnDelete.InvokeAsync(WorkInstruction);
            ToastService.ShowSuccess($"Successfully deleted WorkInstruction: {WorkInstruction.Title}.");
        }
        else
        {
            ToastService.ShowError($"Unable to delete WorkInstruction: {WorkInstruction.Title}. Please contact the administrator or check the Log files.");
        }
    }

}
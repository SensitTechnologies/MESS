@using MESS.Data.Models
@using MESS.Services.WorkInstruction
@using Serilog
@inject IWorkInstructionService WorkInstructionService

@if (WorkInstruction != null)
{
    <FluentGrid Justify="JustifyContent.Center">
            <div>
            <FluentGridItem>
                <th scope="row">@RowNumber</th>
                <td>
                    <input type="text" class="form-control" @bind="WorkInstruction.Title" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" class="form-control" @bind="WorkInstruction.Version" @bind:event="oninput"/>
                </td>
                <td>
                    <button disabled="@(!IsEditable)" type="button" class="btn @(IsEditable ? "btn-outline-info" : "btn-outline-secondary")" @onclick="ShowStepManager">
                        Edit
                    </button>
                    <button type="button" class="@(WorkInstruction.IsActive ? "btn-danger" : "btn-success") btn" @onclick="() => WorkInstruction.IsActive = !WorkInstruction.IsActive">
                        @if (WorkInstruction.IsActive)
                        {
                            <p>Hide</p>
                        }
                        else
                        {
                            <p>Show</p>
                        }
                    </button>
                    <button type="button" class="btn btn-success" @onclick="async () => await SaveChanges.InvokeAsync(WorkInstruction)">
                        Save Changes
                    </button>
                </td>
            </FluentGridItem>
            @if (DisplayStepManager)
            {
                <WorkInstructionNodeManagerList WorkInstructionNodes="WorkInstruction.Nodes"/>
            }
            </div>
        
    </FluentGrid>
}

@code {
    [Parameter]
    public required int RowNumber { get; set; }
    [Parameter]
    public EventCallback<string> DisplayAlert { get; set; }
    [Parameter]
    public EventCallback<WorkInstruction> SaveChanges { get; set; }
    [Parameter]
    public required WorkInstruction WorkInstruction { get; set; }
    private bool IsEditable { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsEditable = await WorkInstructionService.IsEditable(WorkInstruction);
        await base.OnInitializedAsync();
    }

    private bool IsConfirmingDelete { get; set; } = false;
    private int? WorkInstructionToDeleteId { get; set; }
    private bool DisplayStepManager { get; set; } = false;
    
    private void ShowStepManager()
    {
        DisplayStepManager = !DisplayStepManager;
    }
}
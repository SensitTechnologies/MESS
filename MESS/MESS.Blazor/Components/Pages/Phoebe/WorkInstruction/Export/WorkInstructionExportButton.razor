@using MESS.Data.Models
@using MESS.Services.WorkInstruction
@inject IWorkInstructionService WorkInstructionService
@inject IToastService ToastService
@inject IJSRuntime JsRuntime

<button class="btn btn-outline-secondary" type="button" @onclick="DownloadWorkInstruction" disabled="@_isLoading">
    Download
    @if (_isLoading)
    {
        <span class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></span>
    }
</button>

@code {
    private bool _isLoading;
    
    /// <summary>
    /// The WorkInstruction object that contains the details of the work instruction to be downloaded.
    /// This parameter is required.
    /// </summary>
    [Parameter]
    public required WorkInstruction WorkInstruction { get; set; }
    
    /// <summary>
    /// Event callback that is invoked when the download operation completes successfully.
    /// This allows the parent component to react to the completion of the export, such as closing a dialog or updating UI state.
    /// </summary>
    [Parameter]
    public EventCallback OnDownloadComplete { get; set; }
    
    /// <summary>
    /// An event callback triggered when the download state changes.
    /// Invoked with <c>true</c> when the download starts, and <c>false</c> when it completes or fails.
    /// This allows parent components to react to changes in the download lifecycle, such as disabling UI elements.
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnDownloadStateChanged { get; set; }
    
    private async Task DownloadWorkInstruction()
    {
        _isLoading = true;
        await OnDownloadStateChanged.InvokeAsync(true); // Notify: started
        StateHasChanged(); // force UI refresh to show spinner immediately
        await Task.Yield(); // yield control to let UI update
        
        try
        {
            var workInstructionPath = WorkInstructionService.ExportToXlsx(WorkInstruction);

            if (string.IsNullOrEmpty(workInstructionPath))
            {
                ToastService.ShowError($"Unable to Download Work Instruction: {WorkInstruction.Title}. Please try again.");
                return;
            }

            await using var fileStream = File.OpenRead(workInstructionPath);
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            
            // Sanitize filename - remove invalid characters
            var fileName = string.Join("_", (WorkInstruction.Title + WorkInstruction.Version).Split(Path.GetInvalidFileNameChars()));
            fileName = $"{fileName}.xlsx";
            
            await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            
            // Notify parent that download is done
            if (OnDownloadComplete.HasDelegate)
            {
                await OnDownloadComplete.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error downloading file: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            await OnDownloadStateChanged.InvokeAsync(false); // Notify: done
        }
    }

}
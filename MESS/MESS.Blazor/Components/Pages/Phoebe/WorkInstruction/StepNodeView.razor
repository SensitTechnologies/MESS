@using MESS.Data.Models
@using Serilog

<div class="step-node border rounded p-2 mb-2">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <button class="btn btn-sm btn-primary" @onclick="SwapField">
            @(ShowBody ? "Hide Details" : "Show Details")
        </button>

        <NodeActionMenu OnAction="HandleMoveAction" />
    </div>

    <div class="d-flex">
        <div class="w-50" style="min-width: 0;">
            <div class="editor-wrapper" style="width: 100%; max-width: 100%; overflow: auto;">
                    <BlazoredTextEditor @ref="EditorRef">
                        <ToolbarContent>
                            @((MarkupString)DefaultToolbarHtml)
                        </ToolbarContent>
                    </BlazoredTextEditor>
            </div>
        </div>

        <div class="w-50" style="min-width: 0;">
            <WorkInstructionImageManager
                PrimaryMedia="@Step.PrimaryMedia"
                SecondaryMedia="@Step.SecondaryMedia"
                ShowBody="@ShowBody"
                OnMediaChanged="HandleImageMediaChanged" />
        </div>
    </div>

</div>


@code {
    /// <summary>
    /// Gets or sets the step node data to be displayed and edited in this component.
    /// </summary>
    /// <remarks>
    /// This is required and represents the underlying data model for the rich text editor,
    /// including fields like Name and Body.
    /// </remarks>
    [Parameter, EditorRequired]
    public required Step Step { get; set; }

    /// <summary>
    /// Gets or sets the dictionary of editor references, keyed by Step ID.
    /// </summary>
    /// <remarks>
    /// This dictionary enables sharing and reusing editor instances across nodes.
    /// It must be provided by the parent component.
    /// </remarks>
    [Parameter, EditorRequired]
    public required Dictionary<int, BlazoredTextEditor> EditorRefs { get; set; }

    /// <summary>
    /// Gets or sets the dictionary of currently active fields being edited, keyed by Step ID.
    /// </summary>
    /// <remarks>
    /// This tracks which field (e.g., Name or Body) is currently active for editing per step.
    /// </remarks>
    [Parameter, EditorRequired]
    public required Dictionary<int, string> ActiveFields { get; set; }
    
    /// <summary>
    /// Event callback to handle a node action like move, insert, or delete.
    /// </summary>
    /// <remarks>
    /// The parent handles this action by modifying the list of nodes appropriately.
    /// </remarks>
    [Parameter]
    public EventCallback<(Step step, string action)> OnAction { get; set; }
    
    // Track which field is showing
    private bool ShowBody
    {
        get
        {
            if (ActiveFields.TryGetValue(Step.Id, out var field))
                return field == "Body";

            ActiveFields[Step.Id] = "Name";  // default to Name
            return false;                    // false = show Name
        }
        set => ActiveFields[Step.Id] = value ? "Body" : "Name";
    }

    
    private BlazoredTextEditor? EditorRef
    {
        get => EditorRefs.TryGetValue(Step.Id, out var editor) ? editor : null;
        set
        {
            if (value != null)
            {
                EditorRefs[Step.Id] = value;
            }
        }
    }
    
    private bool NeedsLoadAfterRender { get; set; } = true;
    
    private async Task HandleMoveAction(string action)
    {
        if (OnAction.HasDelegate)
        {
            await OnAction.InvokeAsync((Step, action));
        }
    }
    
    private async Task SwapField()
    {
        if (EditorRef == null) return;

        // Save current
        var currentHtml = await EditorRef.GetHTML();
        if (ShowBody)
        {
            Step.Body = currentHtml;
        }
        else
        {
            Step.Name = currentHtml;
        }

        // Swap
        ShowBody = !ShowBody;
        NeedsLoadAfterRender = true;

        StateHasChanged();
    }
    
    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (EditorRef == null)
            return;

        if (!NeedsLoadAfterRender)
            return;

        try
        {
            if (await WaitForEditorReady(EditorRef))
            {
                var contentToLoad = ShowBody ? (Step.Body ?? "") : (Step.Name ?? "");

                await EditorRef.LoadHTMLContent(contentToLoad);

                NeedsLoadAfterRender = false;
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error loading HTML content for field in step {StepId}", Step.Id);
        }
    }


    private async Task<bool> WaitForEditorReady(BlazoredTextEditor editor)
    {
        const int maxRetries = 15;
        const int delayMs = 200;

        for (int i = 0; i < maxRetries; i++)
        {
            try
            {
                if (editor == null) return false;
                await editor.GetHTML();
                return true;
            }
            catch
            {
                // Retry
            }
            await Task.Delay(delayMs);
        }
        return false;
    }
    
    private string DefaultToolbarHtml => @"
    <select class='ql-header'>
        <option selected></option>
        <option value='1'></option>
        <option value='2'></option>
        <option value='3'></option>
        <option value='4'></option>
        <option value='5'></option>
    </select>
    <span class='ql-formats'>
        <button class='ql-bold'></button>
        <button class='ql-italic'></button>
        <button class='ql-underline'></button>
        <button class='ql-strike'></button>
    </span>
    <span class='ql-formats'>
        <select class='ql-color'></select>
        <select class='ql-background'></select>
    </span>
    <span class='ql-formats'>
        <button class='ql-list' value='ordered'></button>
        <button class='ql-list' value='bullet'></button>
    </span>
    <span class='ql-formats'>
        <button class='ql-link'></button>
    </span>
    ";

    private Task HandleImageMediaChanged((List<string> Primary, List<string> Secondary) updated)
    {
        Step.PrimaryMedia = new List<string>(updated.Primary);
        Step.SecondaryMedia = new List<string>(updated.Secondary);

        StateHasChanged();
        return Task.CompletedTask;
    }
}

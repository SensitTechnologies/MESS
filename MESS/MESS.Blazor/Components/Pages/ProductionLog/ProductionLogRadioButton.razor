@using System.Drawing
@using MESS.Data.Models
@using MESS.Services.BrowserCacheManager
@using MESS.Services.ProductionLog
@using MESS.Services.Serialization
@using QRCoder
@inject ILocalCacheManager LocalCacheManager
@inject IProductionLogEventService ProductionLogEventService
@inject ISerializationService SerializationService
@attribute [StreamRendering(false)]

<li class="container list-group-item mb-2" role="group">
    <div class="row">
        <div class="col col-md-3 col-sm-12 col-3">
            <p class="d-block mb-1">@step.Name</p>
        </div>
        <div class="col col-5 col-md-5 col-sm-12">
            <p>@step.Body</p>
        </div>
        <div>
            <img src="@step.Content?.FirstOrDefault()" alt="Step Image" />
        </div>

        <div class="col container">
            <div class="d-flex align-items-center">
                <div class="d-inline-flex align-items-center gap-4">
                    <input type="radio"
                           checked="@(!logStep.Success)"
                           autocomplete="off"
                           @onclick="@(async (e) => await HandleButtonPress(false))"
                           class="btn-check"
                           name="radioBtn{@step.Name}"
                           id="radioFailureBtn{@step.Name}"/>
                    <label class="btn btn-outline-danger @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Failure" ? "active" : "")" for="radioFailureBtn{@step.Name}">Failure</label>

                    <input type="radio"
                           checked="@(logStep.Success)"
                           autocomplete="off"
                           class="btn-check"
                           name="radioBtn{@step.Name}"
                           id="radioSuccessBtn{@step.Name}"
                           @onclick="@(async (e) => await HandleButtonPress(true))"/>
                    <label class="btn btn-outline-success @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Success" ? "active" : "")" for="radioSuccessBtn{@step.Name}">Success</label>
                </div>
                @if (logStep != null)
                {

                    <div class="d-inline-flex">
                        @if (ShowOptionalNotesField)
                        {
                            <InputTextArea class="form-control mx-2 custom-textarea" @bind-Value:after="@(async () => await ProductionLogEventService.ChangeMadeToProductionLog())" @bind-Value="logStep.Notes"/>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
    <div>
        @if (step is { PartsNeeded.Count: > 0 } && _initialized)
        {
            <RequiredPartsList _serialNumberLogs="_serialNumberLogs" AfterSerialNumberInput="@AfterSerialNumberInput" />
        }
    </div>
</li>

@code {
    [Parameter]
    public required Step step { get; set; }
    [Parameter]
    public required ProductionLogStep logStep { get; set; }
    
    [Parameter] public EventCallback<(ProductionLogStep, bool?)> OnStepCompleted { get; set; }
    
    [Parameter]
    public string? ProductSerialNumber { get; set; }

    private List<SerialNumberLog> _serialNumberLogs { get; set; } = [];
    private bool _initialized = false;

    protected override void OnInitialized()
    {
        if (!logStep.Success.HasValue)
        {
            SetSelectedButton("");
        } else if (logStep.Success.Value)
        {
            SetSelectedButton("Success");
        } else if (!logStep.Success.Value)
        {
            SetSelectedButton("Failure");
        }
        
        SetOptionalNotes();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        InitializeSerialNumberLogs();
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            _initialized = true;
        }
        StateHasChanged();
    }


    /// Each part gets its own serial number log
    private void InitializeSerialNumberLogs()
    {
        if (_serialNumberLogs.Count == 0 && step?.PartsNeeded != null)
        {
            foreach (var part in step.PartsNeeded)
            {
                _serialNumberLogs.Add(new SerialNumberLog
                {
                    Part = part
                });
            }
        }
    }

    private void AfterSerialNumberInput(SerialNumberLog serialNumberLog)
    {
        serialNumberLog.ProductSerialNumber = ProductSerialNumber;
        serialNumberLog.SubmitTimeQc = DateTimeOffset.UtcNow;

        var updatedList = new List<SerialNumberLog>(SerializationService.CurrentSerialNumberLogs);
        updatedList.Add(serialNumberLog);

        SerializationService.CurrentSerialNumberLogs = updatedList;
    }
    
    private bool ShowOptionalNotesField { get; set; } = false;
    
    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        SelectedButton = SelectedButton == buttonName ? null : buttonName;
    }

    private void SetOptionalNotes()
    {
        if (!string.IsNullOrWhiteSpace(logStep.Notes) || (logStep.Success.HasValue && !logStep.Success.Value))
        {
            ShowOptionalNotesField = true;
        }
    }

    private async Task HandleButtonPress(bool? result)
    {
        if (SelectedButton == (result.HasValue ? (result.Value ? "Success" : "Failure") : ""))
        {
            result = null;
        }
        
        if (!result.HasValue)
        {
            ShowOptionalNotesField = false;
            await OnStepCompleted.InvokeAsync((logStep, null));
            SetSelectedButton("");
            return;
        }
        
        if (!result.Value)
        {
            ShowOptionalNotesField = !ShowOptionalNotesField;
            await OnStepCompleted.InvokeAsync((logStep, false));
        }
        else
        {
            ShowOptionalNotesField = false;
            await OnStepCompleted.InvokeAsync((logStep, true));
        }

        SetSelectedButton(result.Value ? "Success" : "Failure");
    }
}
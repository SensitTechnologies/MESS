@using System.Drawing
@using MESS.Data.Models
@using MESS.Services.BrowserCacheManager
@using MESS.Services.ProductionLog
@using QRCoder
@inject ILocalCacheManager LocalCacheManager
@inject IProductionLogEventService ProductionLogEventService
@attribute [StreamRendering]

<li class="list-group-item mb-2" role="group">
    <div class="row">
        <div class="col">
            <span>@step.Name</span>
        </div>

        <div class="col container">
            <div class="d-flex align-items-center">
                <div class="d-inline-flex align-items-center gap-4">
                    <input type="radio"
                           checked="@(!logStep?.Success)"
                           autocomplete="off"
                           @onclick="@(async (e) => await HandleButtonPress(false))"
                           class="btn-check"
                           name="radioBtn{@step.Name}"
                           id="radioFailureBtn{@step.Name}"/>
                    <label class="btn btn-outline-danger @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Failure" ? "active" : "")" for="radioFailureBtn{@step.Name}">Failure</label>

                    <input type="radio"
                           checked="@(logStep?.Success)"
                           autocomplete="off"
                           class="btn-check"
                           name="radioBtn{@step.Name}"
                           id="radioSuccessBtn{@step.Name}"
                           @onclick="@(async (e) => await HandleButtonPress(true))"/>
                    <label class="btn btn-outline-success @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Success" ? "active" : "")" for="radioSuccessBtn{@step.Name}">Success</label>
                </div>
                @if (logStep != null)
                {

                    <div class="d-inline-flex">
                        @if (ShowOptionalNotesField)
                        {
                            <InputTextArea class="form-control mx-2 custom-textarea" @bind-Value:after="@(async () => await ProductionLogEventService.ChangeMadeToProductionLog())" @bind-Value="logStep.Notes"/>
                        }


                        @if (logStep.WorkInstructionStep is { PartsNeeded: not null })
                        {
                            @foreach (var serialNumberLog in _serialNumberLogs)
                            {
                                <p>@serialNumberLog.Part?.PartName</p>
                                <InputText @bind-Value="@serialNumberLog.PartSerialNumber"></InputText>
                            }
                            <button type="button" class="btn btn-outline-primary" @onclick="@GenerateQRCode">Generate QR Code</button>
                            @if (!string.IsNullOrEmpty(QRCodeDataUrl))
                            {
                                <div>
                                    <img src="@QRCodeDataUrl" alt="QR Code" class="mt-2" style="max-width: 200px;" />
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</li>

@code {
    [Parameter]
    public required Step step { get; set; }
    [Parameter]
    public required ProductionLogStep logStep { get; set; }
    
    [Parameter] public EventCallback<(ProductionLogStep, bool?)> OnStepCompleted { get; set; }

    private List<SerialNumberLog> _serialNumberLogs { get; set; } = [];

    private string? QRCodeDataUrl;
    
    protected override void OnInitialized()
    {
        if (!logStep.Success.HasValue)
        {
            SetSelectedButton("");
        } else if (logStep.Success.Value)
        {
            SetSelectedButton("Success");
        } else if (!logStep.Success.Value)
        {
            SetSelectedButton("Failure");
        }
        
        SetOptionalNotes();
        InitializeSerialNumberLogs();
    }
    
    private void InitializeSerialNumberLogs()
    {
        _serialNumberLogs.Clear();

        if (logStep.WorkInstructionStep?.PartsNeeded == null)
        {
            return;
        }
        
        foreach (var part in logStep.WorkInstructionStep.PartsNeeded)
        {
            _serialNumberLogs.Add(new SerialNumberLog
            {
                Part = part,
                ProductionLogId = logStep.ProductionLogId,
                SubmitTimeQc = DateTimeOffset.UtcNow
            });
        }
    }
    
    private void GenerateQRCode()
    {
        var serialNumbers = string.Join(",", _serialNumberLogs.Select(x => x.PartSerialNumber));
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(serialNumbers, QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new BitmapByteQRCode(qrCodeData);
        var qrCodeImageArr = qrCode.GetGraphic(20);
    
        QRCodeDataUrl = $"data:image/png;base64,{Convert.ToBase64String(qrCodeImageArr)}";
    }

    private bool ShowOptionalNotesField { get; set; } = false;
    
    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        SelectedButton = SelectedButton == buttonName ? null : buttonName;
    }

    private void SetOptionalNotes()
    {
        if (!string.IsNullOrWhiteSpace(logStep.Notes) || (logStep.Success.HasValue && !logStep.Success.Value))
        {
            ShowOptionalNotesField = true;
        }
    }

    private async Task HandleButtonPress(bool? result)
    {
        if (SelectedButton == (result.HasValue ? (result.Value ? "Success" : "Failure") : ""))
        {
            result = null;
        }
        
        if (!result.HasValue)
        {
            ShowOptionalNotesField = false;
            await OnStepCompleted.InvokeAsync((logStep, null));
            SetSelectedButton("");
            return;
        }
        
        if (!result.Value)
        {
            ShowOptionalNotesField = !ShowOptionalNotesField;
            await OnStepCompleted.InvokeAsync((logStep, false));
        }
        else
        {
            ShowOptionalNotesField = false;
            await OnStepCompleted.InvokeAsync((logStep, true));
        }

        SetSelectedButton(result.Value ? "Success" : "Failure");
    }
}
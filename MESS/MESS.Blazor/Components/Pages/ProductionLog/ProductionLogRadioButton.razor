@using MESS.Data.Models
@using MESS.Blazor.Components.Utility
<li class="list-group-item btn-group mb-2" role="group">
    <div class="row">
        <div class="col">
            @step.Name
        </div>

        <div class="col container">
            <div class="d-flex align-items-center">
                <div class="d-inline-flex align-items-center">
                    <input type="radio"
                           checked="@(!logStep?.Success)"
                           autocomplete="off"
                           @onclick="@(() => HandleButtonPress(false))"
                           class="btn-check"
                           name="radioBtn{@step.Name}"
                           id="radioFailureBtn{@step.Name}"
                           @onchange="@(async e => { if (logStep != null) { await OnStepCompleted.InvokeAsync((logStep, false)); } })"/>
                    <label class="btn @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Failure" ? "btn-outline-danger" : "")" for="radioFailureBtn{@step.Name}">Failure</label>

                    <input type="radio"
                           checked="@(logStep?.Success)"
                           autocomplete="off"
                           class="btn-check"
                           name="radioBtn{@step.Name}"
                           id="radioSuccessBtn{@step.Name}"
                           @onclick="@(() => HandleButtonPress(true))"
                           @onchange="@(async e => { if (logStep != null) { await OnStepCompleted.InvokeAsync((logStep, true)); } })"/>
                    <label class="btn @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Success" ? "btn-outline-success" : "")" for="radioSuccessBtn{@step.Name}">Success</label>
                </div>
                @if (logStep != null)
                {
                
                    @if (ShowOptionalNotesField)
                    {
                        <InputTextArea class="form-control w-50 mx-5 custom-textarea" @bind-Value="logStep.Notes" />
                    }
                    @if (IsEditMode)
                    {
                        <TimePicker @bind-Time="logStep.SubmitTime" CssClass="mx-4"/>
                    }
                }
            </div>
        </div>
    </div>
</li>

@code {
    [Parameter]
    public required Step step { get; set; }
    [Parameter]
    public required ProductionLogStep logStep { get; set; }
    
    [Parameter] public EventCallback<(ProductionLogStep, bool)> OnStepCompleted { get; set; }
    // Only allow operators to change Time directly while in edit mode 
    [Parameter] public bool IsEditMode { get; set; }
    
    protected override void OnInitialized()
    {
        // If logStep.ID is 0 that indicates it is being created for the first time
        // if set to anything other than 0 it is being edited
        if (logStep.Id == 0) return;
        
        SetSelectedButton(logStep.Success ? "Success" : "Failure");
        SetOptionalNotes();
    } 

    private bool ShowOptionalNotesField { get; set; } = false;
    
    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        SelectedButton = SelectedButton == buttonName ? null : buttonName;
    }

    private void SetOptionalNotes()
    {
        if (!string.IsNullOrWhiteSpace(logStep.Notes) && !logStep.Success)
        {
            ShowOptionalNotesField = true;
        }
    }

    private void HandleButtonPress(bool result)
    {
        if (!result)
        {
            ShowOptionalNotesField = !ShowOptionalNotesField;
        }
        else
        {
            ShowOptionalNotesField = false;
        }

        SetSelectedButton(result ? "Success" : "Failure");
    }
}
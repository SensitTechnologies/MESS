@page "/production-log/new"
@page "/production-log/edit/{logId:int}"
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using MESS.Services.WorkInstruction
@inject IProductionLogService ProductionLogService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IWorkInstructionService WorkInstructionService
@rendermode InteractiveServer

<EditForm Model="@productionLog" OnValidSubmit="CreateProductionLog">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Product Name</label>
        <div class="col-md-4">
            @if (productionLog.Product != null)
            {
                <InputText class="form-control" @bind-Value="productionLog.Product.Name"/>
                <ValidationMessage For="@(() => productionLog.Product.Name)" />
            }
        </div>
        
        <div>
            @if (WorkInstructions != null)
            {
                <select @onchange="SetActiveWorkInstruction">
                    <option value="">Select Work Instruction</option>
                    @foreach (var instruction in WorkInstructions)
                    {   
                        <option value="@instruction.Id">@instruction.Title</option>
                    }
                </select>

                
            }
        </div>
        
        <div>
            @if (ActiveWorkInstruction != null)
            {
                <div>
                    @foreach (var step in ActiveWorkInstruction.Steps)
                    {
                        <p>@step.Name</p>
                        <InputCheckbox class="form-check" @bind-Value="@step.Success" />
                    }

                </div>
            }
        </div>
        
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int logId { get; set; }
    protected string Title = "Add";
    protected ProductionLog productionLog = new()
    {
        CreatedBy = "",
        CreatedOn = default,
        LastModifiedBy = "",
        LastModifiedOn = default
    };

    private List<WorkInstruction>? WorkInstructions { get; set; }
    private WorkInstruction? ActiveWorkInstruction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WorkInstructions = await WorkInstructionService.GetAllAsync();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (logId != 0)
        {
            Title = "Edit";
            productionLog = (await Http.GetFromJsonAsync<ProductionLog>("api/User/" + logId))!;
        }
    }
    protected void CreateProductionLog()
    {
        if (ActiveWorkInstruction == null)
        {
            Console.WriteLine("No Work Instruction selected.");
            return;
        }

        productionLog.LogSteps = ActiveWorkInstruction.Steps.Select(step => new ProductionLogStep
        {
            ProductionLogId = productionLog.Id,
            WorkInstructionStepId = step.Id,
            Success = step.Success
        }).ToList();

        ProductionLogService.Create(productionLog);
        Cancel();
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task SetActiveWorkInstruction(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            ActiveWorkInstruction = await WorkInstructionService.GetByIdAsync(id);
        }
    }


}
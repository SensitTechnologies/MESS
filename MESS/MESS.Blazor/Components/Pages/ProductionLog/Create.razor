@page "/production-log/new"
@page "/production-log/edit/{logId:int}"
@using MESS.Data.Models
@using MESS.Services.Product
@using MESS.Services.ProductionLog
@using MESS.Services.WorkInstruction
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@using Serilog
@inject IProductionLogService ProductionLogService
@inject NavigationManager NavigationManager
@inject IWorkInstructionService WorkInstructionService
@inject IProductService ProductService
@inject IJSRuntime JS
@inject ProtectedLocalStorage ProtectedLocalStorage

@rendermode InteractiveServer

<PageTitle>@Title</PageTitle>
<ErrorBoundary>
    <ChildContent>
        <EditForm FormName="EditProductionLog" Model="ProductionLog" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="Name" class="form-label">Product Name</label>
                <div class="col-md-4">
                    @if (ProductionLog.Product != null)
                    {
                        <InputText class="form-control" @bind-Value="ProductionLog.Product.Name"/>
                        <ValidationMessage For="@(() => ProductionLog.Product.Name)"/>
                    }
                </div>
                
                @if (!InProgress)
                {
                    <div>
                        @if (Products != null && logId == null)
                        {
                            <select @onchange="async e => await SetSelectedWorkInstructionId(int.Parse(e.Value?.ToString() ?? string.Empty))">
                                <option value="">Select Product</option>
                                @foreach (var product in Products)
                                {
                                    @if (product.WorkInstructions == null)
                                    {
                                        continue;
                                    }

                                    <option value="@product.WorkInstructions.First().Id">@product.Name</option>
                                }
                            </select>
                        }
                    </div>
                }

                <WorkInstructionStepList ActiveWorkInstruction="@ActiveWorkInstruction" ProductionLog="ProductionLog" OnStepCompleted="@((args) => OnStepCompleted(args.Item1, args.Item2))"/>
                
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
            
            
        </EditForm>
    </ChildContent>
    <ErrorContent Context="ex">
        <div class="alert alert-danger" role="alert">
            An error occurred: @ex.Message
        </div>
    </ErrorContent>
</ErrorBoundary>
@code {
    [Parameter]
    public int? logId { get; set; }
    private string Title = "Add";
    private bool InProgress { get; set; } = false;
    private const string InProgressKey = "INPROGRESS";
    
    protected ProductionLog ProductionLog = new();
    
    private List<Product>? Products { get; set; }
    private WorkInstruction? ActiveWorkInstruction { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await GetInProgressAsync();
        await LoadProducts();
        await LoadProductionLog();
    }

    /// Sets the local storage variable
    private async Task SetInProgressAsync(bool inProgress)
    {
        try
        {
            await ProtectedLocalStorage.SetAsync(InProgressKey, inProgress);
            InProgress = inProgress;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    /// If retrieval fails set in progress too false to allow user to restart workflow
    private async Task GetInProgressAsync()
    {
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<bool>(InProgressKey);
            if (result.Success)
            {
                InProgress = result.Value;
                return;
            }

            await SetInProgressAsync(false);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            var productsAsync = await ProductService.GetAllProductsAsync();
            Products = productsAsync.ToList();
        }
        catch (Exception e)
        {
            Log.Error("Error loading work instructions: {Message}", e.Message);
        }
    }
    
    private async Task LoadProductionLog()
    {
        if (logId.HasValue && logId.Value != 0)
        {
            await LoadExistingLog(logId.Value);
        }
    }
    
    
    private async Task SetSelectedWorkInstructionId(int? value)
    {
        try
        {
            if (value.HasValue)
            {
                await LoadActiveWorkInstruction(value.Value);
                await SetInProgressAsync(true);
            }
        }
        catch (Exception e)
        {
            Log.Error("Error Setting selected work instruction ID: Exception: {e}", e.Message);
        }

    }


    private async Task LoadActiveWorkInstruction(int id)
    {
        ActiveWorkInstruction = await WorkInstructionService.GetByIdAsync(id);
    }
    
    /// Loads a Production Log from the database
    private async Task LoadExistingLog(int id)
    {
        var existingProductionLog = await ProductionLogService.GetByIdAsync(id);
        if (existingProductionLog != null)
        {
            Title = "Edit";
            ProductionLog = existingProductionLog;

            if (ProductionLog.WorkInstruction != null)
            {
                await SetSelectedWorkInstructionId(ProductionLog.WorkInstruction.Id);
            }
            
        }
        else
        {
            Console.WriteLine($"Production log with ID {id} not found.");
        }
    }

    
    
    protected async Task HandleSubmit()
    {
        if (ActiveWorkInstruction == null)
        {
            Console.WriteLine("No Work Instruction selected.");
            return;
        }

        var currentTime = DateTimeOffset.UtcNow;

        ProductionLog.WorkInstruction = ActiveWorkInstruction;

        if (logId.HasValue)
        {
            // Update existing log
            ProductionLog.LastModifiedOn = currentTime;
            await ProductionLogService.UpdateAsync(ProductionLog);
        }
        else
        {
            // Create new log
            ProductionLog.CreatedOn = currentTime;
            ProductionLog.LastModifiedOn = currentTime;
            ProductionLog.SubmitTime = currentTime;
            await ProductionLogService.CreateAsync(ProductionLog);
        }
        
        ResetForm();
        NavigationManager.Refresh(true);
    }
    
    private void OnStepCompleted(ProductionLogStep step, bool success)
    {
        var currentTime = DateTimeOffset.UtcNow;

        step.Success = success;
        step.SubmitTime = currentTime;

        StateHasChanged();
    }

    private void ResetForm()
    {
    }
}
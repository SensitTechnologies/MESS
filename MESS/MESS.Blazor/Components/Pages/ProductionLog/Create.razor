@page "/production-log/new"
@page "/production-log/edit/{logId:int}"
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using MESS.Services.WorkInstruction
@inject IProductionLogService ProductionLogService
@inject NavigationManager NavigationManager
@inject IWorkInstructionService WorkInstructionService
@rendermode InteractiveServer

<EditForm FormName="EditProductionLog" Model="@productionLog" OnValidSubmit="CreateProductionLog">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Product Name</label>
        <div class="col-md-4">
            @if (productionLog.Product != null)
            {
                <InputText class="form-control" @bind-Value="productionLog.Product.Name"/>
                <ValidationMessage For="@(() => productionLog.Product.Name)" />
            }
        </div>
        
        <div>
            @if (WorkInstructions != null)
            {
                <select @bind="SelectedWorkInstructionId">
                    <option value="">Select Work Instruction</option>
                    @foreach (var instruction in WorkInstructions)
                    {
                        <option value="@instruction.Id">@instruction.Title</option>
                    }
                </select>
                
            }
        </div>

        <div>
            @if (ActiveWorkInstruction != null)
            {
                <div>
                    @for (var i = 0; i < ActiveWorkInstruction.Steps.Count; i++)
                    {
                        var step = ActiveWorkInstruction.Steps[i];
                        bool isDisabled = (i > 0 && !ActiveWorkInstruction.Steps[i - 1].Success);

                        <p>@step.Name</p>

                        <input type="checkbox"
                               disabled="@isDisabled"
                               class="form-check"
                               @onchange="@(e => OnStepCompleted(step, e))" />
                    }
                </div>
            }
        </div>

        
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? logId { get; set; }
    protected string Title = "Add";
    protected ProductionLog productionLog = new()
    {
        CreatedBy = "",
        CreatedOn = default,
        LastModifiedBy = "",
        LastModifiedOn = default
    };

    private List<WorkInstruction>? WorkInstructions { get; set; }
    private WorkInstruction? ActiveWorkInstruction { get; set; }
    private int? selectedWorkInstructionId;
    private int? SelectedWorkInstructionId
    {
        get => selectedWorkInstructionId;
        set
        {
            if (selectedWorkInstructionId != value)
            {
                selectedWorkInstructionId = value;
                if (value.HasValue)
                {
                    _ = LoadActiveWorkInstruction(value.Value);
                }
            }
        }
    }

    private async Task LoadActiveWorkInstruction(int id)
    {
        ActiveWorkInstruction = await WorkInstructionService.GetByIdAsync(id);

        if (ActiveWorkInstruction != null && ActiveWorkInstruction.Steps.Any())
        {
            ActiveWorkInstruction.Steps.First().StartTime = DateTimeOffset.UtcNow;
        }

        StateHasChanged();
    }

    
    protected override async Task OnInitializedAsync()
    {
        WorkInstructions = await WorkInstructionService.GetAllAsync();
        
        if (logId.HasValue && logId.Value != 0)
        {
            await LoadExistingLog(logId.Value);
        }
    }
    
    private async Task LoadExistingLog(int id)
    {
        var existingProductionLog = await ProductionLogService.GetByIdAsync(id);
        if (existingProductionLog != null)
        {
            Title = "Edit";
            productionLog = existingProductionLog;

            // Ensure LogSteps are loaded
            productionLog.LogSteps ??= new List<ProductionLogStep>();

            // Preselect the correct Work Instruction
            if (productionLog.WorkInstruction != null)
            {
                SelectedWorkInstructionId = productionLog.WorkInstruction.Id;
            }
        }
        else
        {
            Console.WriteLine($"Production log with ID {id} not found.");
        }

        StateHasChanged();
    }

    
    
    protected void CreateProductionLog()
    {
        if (ActiveWorkInstruction == null)
        {
            Console.WriteLine("No Work Instruction selected.");
            return;
        }

        productionLog.LogSteps = ActiveWorkInstruction.Steps.Select(step => new ProductionLogStep
        {
            ProductionLogId = productionLog.Id,
            WorkInstructionStepId = step.Id,
            Success = step.Success,
            StartTime = step.StartTime,
            EndTime = DateTimeOffset.UtcNow
        }).ToList();

        productionLog.WorkInstruction = ActiveWorkInstruction;

        ProductionLogService.Create(productionLog);
        Cancel();
    }
    
    private void OnStepCompleted(Step step, ChangeEventArgs e)
    {
        if (ActiveWorkInstruction?.Steps == null) return;

        if (bool.TryParse(e.Value?.ToString(), out bool isChecked) && isChecked)
        {
            step.Success = true;
            step.EndTime = DateTimeOffset.UtcNow;

            var steps = ActiveWorkInstruction.Steps;
            int currentIndex = steps.IndexOf(step);
            if (currentIndex + 1 < steps.Count)
            {
                var nextStep = steps[currentIndex + 1];
                nextStep.StartTime = DateTimeOffset.UtcNow;
            }
        }

        StateHasChanged();
    }



    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task SetActiveWorkInstruction(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            ActiveWorkInstruction = await WorkInstructionService.GetByIdAsync(id);

            if (ActiveWorkInstruction != null && ActiveWorkInstruction.Steps.Any())
            {
                var initialStep = ActiveWorkInstruction.Steps.First();
                initialStep.StartTime = DateTimeOffset.UtcNow;
            }
        }
    }



}
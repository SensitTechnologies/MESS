@page "/production-log/new"
@page "/production-log/edit/{logId:int}"
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using MESS.Services.WorkInstruction
@using Serilog
@inject IProductionLogService ProductionLogService
@inject NavigationManager NavigationManager
@inject IWorkInstructionService WorkInstructionService
@rendermode InteractiveServer

<PageTitle>@Title</PageTitle>
<ErrorBoundary>
    <ChildContent>
        <EditForm FormName="EditProductionLog" Model="ProductionLog" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="Name" class="form-label">Product Name</label>
                <div class="col-md-4">
                    
                    @if (ProductionLog.Product != null)
                    {
                        <InputText class="form-control" @bind-Value="ProductionLog.Product.Name"/>
                        <ValidationMessage For="@(() => ProductionLog.Product.Name)"/>
                    }
                </div>
                
                <div>
                    @if (WorkInstructions != null)
                    {
                        <select @onchange="async e => await SetSelectedWorkInstructionId(int.Parse(e.Value?.ToString() ?? string.Empty))">
                            <option value="">Select Work Instruction</option>
                            @foreach (var instruction in WorkInstructions)
                            {
                                <option value="@instruction.Id">@instruction.Title</option>
                            }
                        </select>
                        
                    }
                </div>

                <WorkInstructionStepList showNotesForStep="showNotesForStep" ActiveWorkInstruction="@ActiveWorkInstruction" ProductionLog="ProductionLog" OnStepCompleted="@((args) => OnStepCompleted(args.Item1, args.Item2))"/>
                
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
            
            
        </EditForm>
    </ChildContent>
    <ErrorContent Context="ex">
        <div class="alert alert-danger" role="alert">
            An error occurred: @ex.Message
        </div>
    </ErrorContent>
</ErrorBoundary>
@code {
    [Parameter]
    public int? logId { get; set; }
    protected string Title = "Add";
    protected ProductionLog ProductionLog = new();
    private Dictionary<int, bool> showNotesForStep = new();
    
    private List<WorkInstruction>? WorkInstructions { get; set; }
    private WorkInstruction? ActiveWorkInstruction { get; set; }
    private int? _selectedWorkInstructionId;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadWorkInstructions();
        await LoadProductionLog();
        InitializeShowNotesForStep();
    }
    
    private async Task LoadWorkInstructions()
    {
        try
        {
            WorkInstructions = await WorkInstructionService.GetAllAsync();
        }
        catch (Exception e)
        {
            Log.Error("Error loading work instructions: {Message}", e.Message);
        }
    }

    private async Task LoadProductionLog()
    {
        if (logId.HasValue && logId.Value != 0)
        {
            await LoadExistingLog(logId.Value);
        }
    }
    
    private void InitializeShowNotesForStep()
    {
        if (ActiveWorkInstruction == null) return;
        foreach (var step in ActiveWorkInstruction.Steps)
        {
            showNotesForStep[step.Id] = false;
        }
    }
    
    private async Task SetSelectedWorkInstructionId(int? value)
    {
        try
        {
            if (_selectedWorkInstructionId == value) return;
            _selectedWorkInstructionId = value;

            if (value.HasValue)
            {
                await LoadActiveWorkInstruction(value.Value);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Log.Error("Error Setting selected work instruction ID: Exception: {e}", e.Message);
        }

    }


    private async Task LoadActiveWorkInstruction(int id)
    {
        ActiveWorkInstruction = await WorkInstructionService.GetByIdAsync(id);

        if (ActiveWorkInstruction != null)
        {
            // For each step in the work instruction
            foreach (var step in ActiveWorkInstruction.Steps)
            {
                // Try to find existing log step
                var existingLogStep = ProductionLog.LogSteps
                    .FirstOrDefault(ls => ls.WorkInstructionStepId == step.Id);

                if (existingLogStep != null)
                {
                    // Sync the step with existing log data
                    step.Success = existingLogStep.Success;
                    step.SubmitTime = existingLogStep.SubmitTime;
                }
                else if (!ProductionLog.LogSteps.Any())
                {
                    // For new logs, initialize first step
                    if (ActiveWorkInstruction.Steps.First() == step)
                    {
                        step.SubmitTime = DateTimeOffset.UtcNow;
                    }
                }
            }
        }
        
        StateHasChanged();
    }
    
    /// Loads a Production Log from the database
    private async Task LoadExistingLog(int id)
    {
        var existingProductionLog = await ProductionLogService.GetByIdAsync(id);
        if (existingProductionLog != null)
        {
            Title = "Edit";
            ProductionLog = existingProductionLog;

            if (ProductionLog.WorkInstruction != null)
            {
                await SetSelectedWorkInstructionId(ProductionLog.WorkInstruction.Id);
                foreach (var step in ProductionLog.LogSteps)
                {
                    showNotesForStep[step.Id] = !string.IsNullOrEmpty(step.Notes) && !step.Success;
                }
            }
            
        }
        else
        {
            Console.WriteLine($"Production log with ID {id} not found.");
        }
    }

    
    
    protected async void HandleSubmit()
    {
        if (ActiveWorkInstruction == null)
        {
            Console.WriteLine("No Work Instruction selected.");
            return;
        }

        var currentTime = DateTimeOffset.UtcNow;
        foreach (var step in ActiveWorkInstruction.Steps)
        {
            var logStep = ProductionLog.LogSteps.FirstOrDefault(ls => ls.WorkInstructionStepId == step.Id);
            if (logStep == null) continue;
            logStep.Success = step.Success;
            logStep.SubmitTime = step.SubmitTime;
        }
        

        ProductionLog.WorkInstruction = ActiveWorkInstruction;

        if (logId.HasValue)
        {
            // Update existing log
            ProductionLog.LastModifiedOn = currentTime;
            await ProductionLogService.UpdateAsync(ProductionLog);
        }
        else
        {
            // Create new log
            ProductionLog.CreatedOn = currentTime;
            ProductionLog.LastModifiedOn = currentTime;
            ProductionLogService.Create(ProductionLog);
        }

        Cancel();
    }
    
    private void OnStepCompleted(Step step, bool success)
    {
        if (ActiveWorkInstruction?.Steps == null) return;

        var currentTime = DateTimeOffset.UtcNow;

        if (success)
        {
            step.Success = true;
            step.SubmitTime = currentTime;
        }
        else
        {
            step.Success = false;
            step.SubmitTime = currentTime;
            showNotesForStep[step.Id] = true;
        }

        StateHasChanged();
    }
    
    private void Cancel()
    {
        NavigationManager.NavigateTo("/production-log");
    }
}
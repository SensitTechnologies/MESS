@page "/production-log/new"
@page "/production-log/edit/{logId:int}"
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using MESS.Services.WorkInstruction
@using Serilog
@inject IProductionLogService ProductionLogService
@inject NavigationManager NavigationManager
@inject IWorkInstructionService WorkInstructionService
@rendermode InteractiveServer

<EditForm FormName="EditProductionLog" Model="@ProductionLog" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Product Name</label>
        <div class="col-md-4">
            
            @if (ProductionLog.Product != null)
            {
                <InputText class="form-control" @bind-Value="ProductionLog.Product.Name"/>
                <ValidationMessage For="@(() => ProductionLog.Product.Name)"/>
            }
        </div>
        
        <div>
            @if (WorkInstructions != null)
            {
                <select @bind="SelectedWorkInstructionId">
                    <option value="">Select Work Instruction</option>
                    @foreach (var instruction in WorkInstructions)
                    {
                        <option value="@instruction.Id">@instruction.Title</option>
                    }
                </select>
                
            }
        </div>
        
        <WorkInstructionStepList showNotesForStep="showNotesForStep" ActiveWorkInstruction="@ActiveWorkInstruction" ProductionLog="ProductionLog" OnStepCompleted="@((args) => OnStepCompleted(args.Item1, args.Item2))"/>
        
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? logId { get; set; }
    protected string Title = "Add";
    protected ProductionLog ProductionLog = new();
    private Dictionary<int, bool> showNotesForStep = new();
    
    // private bool ShowOptionalNotesField { get; set; } = false;

    private List<WorkInstruction>? WorkInstructions { get; set; }
    private WorkInstruction? ActiveWorkInstruction { get; set; }
    private int? _selectedWorkInstructionId;
    private int? SelectedWorkInstructionId
    {
        get => _selectedWorkInstructionId;
        set
        {
            if (_selectedWorkInstructionId == value) return;
            _selectedWorkInstructionId = value;
            if (value.HasValue)
            {
                _ = LoadActiveWorkInstruction(value.Value);
            }
        }
    }

    private async Task LoadActiveWorkInstruction(int id)
    {
        ActiveWorkInstruction = await WorkInstructionService.GetByIdAsync(id);

        if (ActiveWorkInstruction != null)
        {
            // For each step in the work instruction
            foreach (var step in ActiveWorkInstruction.Steps)
            {
                // Try to find existing log step
                var existingLogStep = ProductionLog.LogSteps
                    .FirstOrDefault(ls => ls.WorkInstructionStepId == step.Id);

                if (existingLogStep != null)
                {
                    // Sync the step with existing log data
                    step.Success = existingLogStep.Success;
                    step.SubmitTime = existingLogStep.SubmitTime;
                }
                else if (!ProductionLog.LogSteps.Any())
                {
                    // For new logs, initialize first step
                    if (ActiveWorkInstruction.Steps.First() == step)
                    {
                        step.SubmitTime = DateTimeOffset.UtcNow;
                    }
                }
            }
        }
        
        StateHasChanged();
    }


    
    protected override async Task OnInitializedAsync()
    {
        WorkInstructions = await WorkInstructionService.GetAllAsync();
        
        if (logId.HasValue && logId.Value != 0)
        {
            await LoadExistingLog(logId.Value);
        }
        
        if (ActiveWorkInstruction != null)
        {
            foreach (var step in ActiveWorkInstruction.Steps)
            {
                showNotesForStep[step.Id] = false;
            }
        }
    }
    
    private async Task LoadExistingLog(int id)
    {
        var existingProductionLog = await ProductionLogService.GetByIdAsync(id);
        if (existingProductionLog != null)
        {
            Title = "Edit";
            ProductionLog = existingProductionLog;

            if (ProductionLog.WorkInstruction != null)
            {
                SelectedWorkInstructionId = ProductionLog.WorkInstruction.Id;
            }
        }
        else
        {
            Console.WriteLine($"Production log with ID {id} not found.");
        }
    }

    
    
    protected async void HandleSubmit()
    {
        if (ActiveWorkInstruction == null)
        {
            Console.WriteLine("No Work Instruction selected.");
            return;
        }

        var currentTime = DateTimeOffset.UtcNow;
        foreach (var step in ActiveWorkInstruction.Steps)
        {
            var logStep = ProductionLog.LogSteps.FirstOrDefault(ls => ls.WorkInstructionStepId == step.Id);
            if (logStep == null) continue;
            logStep.Success = step.Success;
            logStep.SubmitTime = step.SubmitTime;
        }
        

        ProductionLog.WorkInstruction = ActiveWorkInstruction;

        if (logId.HasValue)
        {
            // Update existing log
            ProductionLog.LastModifiedOn = currentTime;
            await ProductionLogService.UpdateAsync(ProductionLog);
        }
        else
        {
            // Create new log
            ProductionLog.CreatedOn = currentTime;
            ProductionLog.LastModifiedOn = currentTime;
            ProductionLogService.Create(ProductionLog);
        }

        Cancel();
    }
    
    private void OnStepCompleted(Step step, bool success)
    {
        if (ActiveWorkInstruction?.Steps == null) return;

        var currentTime = DateTimeOffset.UtcNow;

        if (success)
        {
            step.Success = true;
            step.SubmitTime = currentTime;
        }
        else
        {
            step.Success = false;
            step.SubmitTime = currentTime;
            showNotesForStep[step.Id] = true;
        }

        StateHasChanged();
    }
    
    private void Cancel()
    {
        NavigationManager.NavigateTo("/production-log");
    }
}
@page "/production-log/new"
@page "/production-log/edit/{logId:int}"
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using MESS.Services.WorkInstruction
@inject IProductionLogService ProductionLogService
@inject NavigationManager NavigationManager
@inject IWorkInstructionService WorkInstructionService
@rendermode InteractiveServer

<EditForm FormName="EditProductionLog" Model="@productionLog" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Product Name</label>
        <div class="col-md-4">
            @if (productionLog.Product != null)
            {
                <InputText class="form-control" @bind-Value="productionLog.Product.Name"/>
                <ValidationMessage For="@(() => productionLog.Product.Name)" />
            }
        </div>
        
        <div>
            @if (WorkInstructions != null)
            {
                <select @bind="SelectedWorkInstructionId">
                    <option value="">Select Work Instruction</option>
                    @foreach (var instruction in WorkInstructions)
                    {
                        <option value="@instruction.Id">@instruction.Title</option>
                    }
                </select>
                
            }
        </div>

        <div>
            @if (ActiveWorkInstruction != null)
            {
                <ol class="list-group list-group-numbered container-fluid">
                    @for (var i = 0; i < ActiveWorkInstruction.Steps.Count; i++)
                    {
                        var step = ActiveWorkInstruction.Steps[i];
                        var logStep = productionLog.LogSteps?.FirstOrDefault(ls => ls.WorkInstructionStepId == step.Id);
                        var isChecked = logStep?.Success ?? false;

                        <li class="list-group-item btn-group mb-2 row row-cols-2" role="group">
                            <span class="col">
                                @step.Name
                            </span>
                            
                            <span class="col">
                                <input type="radio"
                                       checked="@isChecked"
                                       autocomplete="off"
                                       class="btn-check"
                                       name="radioBtn{@step.Name}"
                                       id="radioFailureBtn{@step.Name}"
                                       @onchange="@(e => OnStepCompleted(step, e, false))"/>
                                <label class="btn btn-outline-danger" for="radioFailureBtn{@step.Name}">Failure</label>

                                <input type="radio"
                                       checked="@isChecked"
                                       autocomplete="off"
                                       class="btn-check"
                                       name="radioBtn{@step.Name}"
                                       id="radioSuccessBtn{@step.Name}"
                                       @onchange="@(e => OnStepCompleted(step, e, true))"/>
                                <label class="btn btn-outline-success" for="radioSuccessBtn{@step.Name}">Success</label>
                            </span>
                        </li>
                    }
                </ol>
            }
        </div>

        
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? logId { get; set; }
    protected string Title = "Add";
    protected ProductionLog productionLog = new();

    private List<WorkInstruction>? WorkInstructions { get; set; }
    private WorkInstruction? ActiveWorkInstruction { get; set; }
    private int? _selectedWorkInstructionId;
    private int? SelectedWorkInstructionId
    {
        get => _selectedWorkInstructionId;
        set
        {
            if (_selectedWorkInstructionId == value) return;
            _selectedWorkInstructionId = value;
            if (value.HasValue)
            {
                _ = LoadActiveWorkInstruction(value.Value);
            }
        }
    }

    private async Task LoadActiveWorkInstruction(int id)
    {
        ActiveWorkInstruction = await WorkInstructionService.GetByIdAsync(id);

        if (ActiveWorkInstruction != null)
        {
            // For each step in the work instruction
            foreach (var step in ActiveWorkInstruction.Steps)
            {
                // Try to find existing log step
                var existingLogStep = productionLog.LogSteps
                    .FirstOrDefault(ls => ls.WorkInstructionStepId == step.Id);

                if (existingLogStep != null)
                {
                    // Sync the step with existing log data
                    step.Success = existingLogStep.Success;
                    step.SubmitTime = existingLogStep.SubmitTime;
                }
                else if (!productionLog.LogSteps.Any())
                {
                    // For new logs, initialize first step
                    if (ActiveWorkInstruction.Steps.First() == step)
                    {
                        step.SubmitTime = DateTimeOffset.UtcNow;
                    }
                }
            }
        }

        StateHasChanged();
    }


    
    protected override async Task OnInitializedAsync()
    {
        WorkInstructions = await WorkInstructionService.GetAllAsync();
        
        if (logId.HasValue && logId.Value != 0)
        {
            await LoadExistingLog(logId.Value);
        }
    }
    
    private async Task LoadExistingLog(int id)
    {
        var existingProductionLog = await ProductionLogService.GetByIdAsync(id);
        if (existingProductionLog != null)
        {
            Title = "Edit";
            productionLog = existingProductionLog;

            if (productionLog.WorkInstruction != null)
            {
                SelectedWorkInstructionId = productionLog.WorkInstruction.Id;
            }
        }
        else
        {
            Console.WriteLine($"Production log with ID {id} not found.");
        }
    }

    
    
    protected async void HandleSubmit()
    {
        if (ActiveWorkInstruction == null)
        {
            Console.WriteLine("No Work Instruction selected.");
            return;
        }

        var currentTime = DateTimeOffset.UtcNow;
        var updatedLogSteps = ActiveWorkInstruction.Steps.Select(step => new ProductionLogStep
        {
            ProductionLogId = productionLog.Id,
            WorkInstructionStepId = step.Id,
            Success = step.Success,
            SubmitTime = step.SubmitTime,
        }).ToList();

        productionLog.WorkInstruction = ActiveWorkInstruction;
        productionLog.LogSteps = updatedLogSteps;

        if (logId.HasValue)
        {
            // Update existing log
            productionLog.LastModifiedOn = currentTime;
            await ProductionLogService.UpdateAsync(productionLog);
        }
        else
        {
            // Create new log
            productionLog.CreatedOn = currentTime;
            productionLog.LastModifiedOn = currentTime;
            ProductionLogService.Create(productionLog);
        }

        Cancel();
    }
    
    private void OnStepCompleted(Step step, ChangeEventArgs e, bool success)
    {
        if (ActiveWorkInstruction?.Steps == null) return;

        var currentTime = DateTimeOffset.UtcNow;

        if (success)
        {
            step.Success = true;

            var steps = ActiveWorkInstruction.Steps;
            int currentIndex = steps.IndexOf(step);
            if (currentIndex + 1 < steps.Count)
            {
                var nextStep = steps[currentIndex + 1];
                nextStep.SubmitTime = currentTime;
            }
        }
        else
        {
            step.Success = false;
            step.SubmitTime = currentTime;
            
        }

        StateHasChanged();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/production-log");
    }
}
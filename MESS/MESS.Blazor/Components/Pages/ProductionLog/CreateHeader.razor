@using MESS.Data.Models
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-between gap-4 flex-sm-wrap header-container">
    <ProductSelect Products="@Products" OnProductSelected="@OnProductSelected"/>
    <WorkInstructionSelect WorkInstructions="@WorkInstructions" OnWorkInstructionSelected="@OnWorkInstructionSelected" />

    <div class="d-flex align-items-center">
        <label for="batchSizeInput" class="form-label me-2 mb-0">Batch Size</label>
        <input type="number"
               id="batchSizeInput"
               class="form-control"
               style="max-width: 75px"
               @bind="BatchSize"
               @bind:event="oninput"
               @onchange="@(() => OnBatchSizeChanged.InvokeAsync(BatchSize))"
               min="1" />
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(ActiveLineOperator))
{
    <div class="d-flex align-items-center justify-content-end">
        <button class="btn btn-primary btn-sm me-4" @onclick="NavigateToLogs">
            <i class="bi bi-card-list me-1"></i>My Production Logs
        </button>
        
        <span class="me-3">@ActiveLineOperator</span>
        <form method="post" action="/api/auth/logout">
            <button type="submit" class="btn btn-danger btn-sm">
                <i class="bi bi-box-arrow-right me-1"></i>Logout
            </button>
        </form>
    </div>
}
else
{
    <LineOperatorSelect LineOperators="@LineOperators" OnLineOperatorSelected="@OnLineOperatorSelected"/>
}

@code {
    /// <summary>
    /// Gets or sets the list of available products.
    /// </summary>
    [Parameter]
    public List<Product>? Products { get; set; }

    /// <summary>
    /// Event callback triggered when a product is selected.
    /// </summary>
    [Parameter]
    public EventCallback<int> OnProductSelected { get; set; }

    /// <summary>
    /// Gets or sets the list of available work instructions.
    /// </summary>
    [Parameter]
    public List<WorkInstruction>? WorkInstructions { get; set; }

    /// <summary>
    /// Event callback triggered when a work instruction is selected.
    /// </summary>
    [Parameter]
    public EventCallback<int> OnWorkInstructionSelected { get; set; }

    /// <summary>
    /// Gets or sets the list of available line operators.
    /// </summary>
    [Parameter]
    public List<ApplicationUser>? LineOperators { get; set; }

    /// <summary>
    /// Event callback triggered when a line operator is selected.
    /// </summary>
    [Parameter]
    public EventCallback<string> OnLineOperatorSelected { get; set; }

    /// <summary>
    /// Gets or sets the active line operator.
    /// </summary>
    [Parameter]
    public string? ActiveLineOperator { get; set; }
    
    /// <summary>
    /// Gets or sets the batch size for the current production log group.
    /// </summary>
    [Parameter]
    public int BatchSize { get; set; } = 1;

    /// <summary>
    /// Event callback triggered when the batch size is changed by the user.
    /// </summary>
    [Parameter]
    public EventCallback<int> OnBatchSizeChanged { get; set; }
    
    private void NavigateToLogs()
    {
        NavigationManager.NavigateTo("/production-logs");
    }
}
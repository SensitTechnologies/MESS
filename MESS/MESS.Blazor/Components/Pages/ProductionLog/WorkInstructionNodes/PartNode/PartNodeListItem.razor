@using MESS.Data.Models
@using MESS.Services.Serialization
@inject ISerializationService SerializationService

@if (_initialized)
{
    <div class="card p-0 mb-3">
        <div class="card-body">
            <div class="d-flex align-items-start w-100 gap-2">
                @if (ProductionLogs.Count > 1)
                {
                    <!-- Group with vertical stack: up arrow, input, down arrow -->
                    <div class="d-flex flex-column align-items-center" style="width: 100px; user-select: none;">
                        <button type="button"
                                @onclick="IncrementLogIndex"
                                class="btn btn-sm d-flex align-items-center justify-content-center p-0 w-100"
                                style="height: 35px;">
                            <i class="bi bi-caret-up" style="font-size: 1.0rem;"></i>
                        </button>

                        <div class="form-floating mb-0 flex-grow-1 w-100" style="height: 100%;">
                            <input type="number"
                                   id="logIndexInput"
                                   class="form-control text-center"
                                   style="width: 100%; min-width: 100px;"
                                   min="1"
                                   max="@ProductionLogs.Count"
                                   @bind="SelectedLogNumber"
                                   @bind:event="oninput"
                                   @onchange="ReloadPartsForSelectedIndex"
                                   onfocus="this.select()"/>
                            <label for="logIndexInput"
                                   style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                Which One?
                            </label>
                        </div>

                        <button type="button"
                                @onclick="DecrementLogIndex"
                                class="btn btn-sm d-flex align-items-center justify-content-center p-0 w-100"
                                style="height: 35px;">
                            <i class="bi bi-caret-down" style="font-size: 1.0rem;"></i>
                        </button>
                    </div>
                }

                <!-- RequiredPartsList immediately to the right of the input -->
                    <div class="d-flex flex-wrap justify-content-end gap-2">
                        <RequiredPartsList ProductionLogParts="ProductionLogParts" AfterSerialNumberInput="@AfterSerialNumberInput"/>
                    </div>
            </div>
        </div>
    </div>

@code {

    /// <summary>
    /// The part node that contains the parts to be displayed.
    /// This parameter is required.
    /// </summary>
    [Parameter]
    public required PartNode PartNode { get; set; }

    /// <summary>
    /// The list of all production logs. Required to access log IDs by index.
    /// </summary>
    [Parameter]
    public required List<ProductionLog> ProductionLogs { get; set; }

    private List<ProductionLogPart> ProductionLogParts { get; set; } = [];
    private bool _initialized = false;

    private int SelectedLogIndex { get; set; } = 0;

    // This property is 1-based for the UI binding:
    private int SelectedLogNumber
    {
        get => SelectedLogIndex + 1; // show 1-based to user
        set
        {
            var newIndex = value - 1; // convert back to 0-based
            if (newIndex < 0)
                newIndex = 0;
            else if (newIndex >= ProductionLogs.Count)
                newIndex = ProductionLogs.Count - 1;
            if (newIndex != SelectedLogIndex)
            {
                SelectedLogIndex = newIndex;
                ReloadPartsForSelectedIndex();
                StateHasChanged();
            }
        }
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        SerializationService.PartsReloadRequested += OnPartsReloadRequested;
    }

    private void OnPartsReloadRequested()
    {
        InitializeProductionLogParts();
        ReloadPartsForSelectedIndex();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Unsubscribes from the <see cref="SerializationService.PartsReloadRequested"/> event
    /// to prevent memory leaks when the component is disposed.
    /// </summary>
    public void Dispose()
    {
        SerializationService.PartsReloadRequested -= OnPartsReloadRequested;
    }

    /// <inheritdoc />
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            _initialized = true;
            ReloadPartsForSelectedIndex(); // load initially
            StateHasChanged();
        }
    }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        InitializeProductionLogParts();
    }

    private void InitializeProductionLogParts()
    {
        for (int i = 0; i < ProductionLogs.Count; i++)
        {
            var existing = SerializationService.GetPartsForLogIndex(i);

            // Only add new parts that aren't already present
            var newParts = PartNode.Parts
                .Where(p => !existing.Any(ep => ep.Part?.Id == p.Id))
                .Select(p => new ProductionLogPart { Part = p })
                .ToList();

            if (newParts.Any())
            {
                existing.AddRange(newParts);
                SerializationService.SetPartsForLogIndex(i, existing);
            }
        }
    }


    private void ReloadPartsForSelectedIndex()
    {
        if (SelectedLogIndex >= 0 && SelectedLogIndex < ProductionLogs.Count)
        {
            var loaded = SerializationService.GetPartsForLogIndex(SelectedLogIndex);

            // Safety fallback in case it was missed in initialization
            if (loaded.Count == 0)
            {
                loaded = PartNode.Parts
                    .Select(p => new ProductionLogPart { Part = p })
                    .ToList();

                SerializationService.SetPartsForLogIndex(SelectedLogIndex, loaded);
            }

            ProductionLogParts = loaded;
        }
        else
        {
            ProductionLogParts = [];
        }
    }

    private void AfterSerialNumberInput(ProductionLogPart updatedPart)
    {
        if (SelectedLogIndex < 0 || SelectedLogIndex >= ProductionLogs.Count)
            return;

        updatedPart.SubmitTimeQc = DateTimeOffset.UtcNow;

        // Update the displayed list first (in-place modification)
        var displayIndex = ProductionLogParts.FindIndex(p => p.Part?.Id == updatedPart.Part?.Id);
        if (displayIndex != -1)
        {
            ProductionLogParts[displayIndex] = updatedPart;
        }

        // Now sync to the serialization service
        var storedParts = SerializationService.GetPartsForLogIndex(SelectedLogIndex);
        var storedIndex = storedParts.FindIndex(p => p.Part?.Id == updatedPart.Part?.Id);
        if (storedIndex != -1)
        {
            storedParts[storedIndex] = updatedPart;
        }
        else
        {
            storedParts.Add(updatedPart);
        }

        SerializationService.SetPartsForLogIndex(SelectedLogIndex, storedParts);
    }

    private void IncrementLogIndex()
    {
        if (SelectedLogNumber < ProductionLogs.Count)
        {
            SelectedLogNumber++;
            ReloadPartsForSelectedIndex();
        }
    }

    private void DecrementLogIndex()
    {
        if (SelectedLogNumber > 1)
        {
            SelectedLogNumber--;
            ReloadPartsForSelectedIndex();
        }
    }
}
}
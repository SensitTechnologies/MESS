@using MESS.Data.Models
@using MESS.Services.CRUD.ProductionLogParts
@inject IProductionLogPartService ProductionLogPartService

@if (_initialized)
{
    <div class="card p-0 mb-3">
        <div class="card-body">
            <div class="d-flex align-items-start w-100 gap-2">
                @if (ProductionLogs.Count > 1)
                {
                    <div class="col-auto d-flex flex-column align-items-center" style="user-select: none;">
                        <button type="button" @onclick="IncrementLogIndex" class="btn btn-primary btn-sm w-100" style="height: 35px;">
                            <i class="bi bi-caret-up" style="font-size: 1.0rem;"></i>
                        </button>

                        <div class="form-floating mb-0 w-100" style="height: 100%;">
                            <input type="number"
                                   id="logIndexInput"
                                   class="form-control text-center"
                                   style="width: 100%; min-width: 85px;"
                                   min="1"
                                   max="@ProductionLogs.Count"
                                   @bind="SelectedLogNumber"
                                   @bind:event="oninput"
                                   onfocus="this.select()" />
                            <label for="logIndexInput">Which One?</label>
                        </div>

                        <button type="button" @onclick="DecrementLogIndex" class="btn btn-primary btn-sm w-100" style="height: 35px;">
                            <i class="bi bi-caret-down" style="font-size: 1.0rem;"></i>
                        </button>
                    </div>
                }

                <div class="col">
                    <RequiredPartsList ProductionLogParts="ProductionLogParts" AfterSerialNumberInput="@AfterSerialNumberInput" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// Gets or sets the <see cref="PartNode"/> associated with this component.
    /// </summary>
    [Parameter, EditorRequired] public required PartNode PartNode { get; set; }
    
    /// <summary>
    /// Gets or sets the list of <see cref="ProductionLog"/> instances referenced in this component.
    /// </summary>
    [Parameter, EditorRequired] public required List<ProductionLog> ProductionLogs { get; set; }

    private List<ProductionLogPart> ProductionLogParts { get; set; } = [];
    private bool _initialized;
    private int SelectedLogIndex;

    /// <summary>
    /// Gets or sets the selected log number (1-based UI value).
    /// When set, this property clamps the value and updates the selected log index accordingly.
    /// </summary>
    private int SelectedLogNumber
    {
        get => SelectedLogIndex + 1;
        set
        {
            var newIndex = Math.Clamp(value - 1, 0, ProductionLogs.Count - 1);
            if (newIndex != SelectedLogIndex)
            {
                SelectedLogIndex = newIndex;
                LoadPartsForSelectedIndex();
            }
        }
    }

    /// <summary>
    /// Subscribes to the <see cref="IProductionLogPartService.PartsReloadRequested"/> event on initialization.
    /// </summary>
    protected override void OnInitialized()
    {
        ProductionLogPartService.PartsReloadRequested += OnPartsReloadRequested;
    }

    /// <summary>
    /// Unsubscribes from the <see cref="IProductionLogPartService.PartsReloadRequested"/> event when the component is disposed.
    /// </summary>
    public void Dispose()
    {
        ProductionLogPartService.PartsReloadRequested -= OnPartsReloadRequested;
    }

    /// <summary>
    /// Ensures required parts are logged for each <see cref="ProductionLog"/> when parameters are set.
    /// </summary>
    protected override void OnParametersSet()
    {
        for (int i = 0; i < ProductionLogs.Count; i++)
        {
            ProductionLogPartService.EnsureRequiredPartsLogged(i, PartNode.Id, PartNode.Parts);
        }
    }

    /// <summary>
    /// Marks the component as initialized and loads part data after first render.
    /// </summary>
    /// <param name="firstRender">Whether this is the first render of the component.</param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _initialized = true;
            LoadPartsForSelectedIndex();
            StateHasChanged();
        }
    }

    /// <summary>
    /// Handles external requests to reload part data from the <see cref="IProductionLogPartService"/>.
    /// </summary>
    private void OnPartsReloadRequested()
    {
        for (int i = 0; i < ProductionLogs.Count; i++)
        {
            ProductionLogPartService.EnsureRequiredPartsLogged(i, PartNode.Id, PartNode.Parts);
        }

        LoadPartsForSelectedIndex();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Loads part data for the currently selected log index from the <see cref="IProductionLogPartService"/>.
    /// </summary>
    private void LoadPartsForSelectedIndex()
    {
        ProductionLogParts = ProductionLogPartService.GetPartsForNode(SelectedLogIndex, PartNode.Id);
    }

    /// <summary>
    /// Updates a <see cref="ProductionLogPart"/> with its serial number input and submit time,
    /// and stores the updated parts via the <see cref="IProductionLogPartService"/>.
    /// </summary>
    /// <param name="updatedPart">The part that was updated with serial number input.</param>
    private void AfterSerialNumberInput(ProductionLogPart updatedPart)
    {
        updatedPart.SubmitTimeQc = DateTimeOffset.UtcNow;

        var index = ProductionLogParts.FindIndex(p => p.Part?.Id == updatedPart.Part?.Id);
        if (index != -1)
            ProductionLogParts[index] = updatedPart;

        ProductionLogPartService.SetPartsForNode(SelectedLogIndex, PartNode.Id, ProductionLogParts);
    }

    private void IncrementLogIndex()
    {
        if (SelectedLogNumber < ProductionLogs.Count)
        {
            SelectedLogNumber++;
        }
    }

    private void DecrementLogIndex()
    {
        if (SelectedLogNumber > 1)
        {
            SelectedLogNumber--;
        }
    }
}
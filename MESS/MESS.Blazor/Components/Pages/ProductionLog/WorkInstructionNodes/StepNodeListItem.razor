@using System.Text.RegularExpressions
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using MESS.Blazor.Components.Carousel
@inject IProductionLogEventService ProductionLogEventService
@inject IJSRuntime JsRuntime

<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col col-md-6 col-sm-12 d-flex flex-column primary-content">
                <div class="card">
                    <div class="card-body">
                        <p class="card-text d-block mb-1" style="white-space: pre-wrap;">
                            @switch (ShowDetails)
                            {
                                case false:
                                    @((MarkupString)Step.Body)
                                    break;
                                case true when Step.DetailedBody != null:
                                    @((MarkupString)Step.DetailedBody)
                                    break;
                            }
                        </p>
                    </div>
                </div>

                <div class="mt-auto">
                    @if (_showRedTagDialog)
                    {
                        <RedTagDialog
                            AttemptCount="_attemptCount"
                            LogSteps="LogSteps"
                            Attempts="@LogSteps.SelectMany(s => s.Attempts).ToList()"
                            FailureNotes="@FailureNoteText"
                            StepDescription="@Step.Name"
                            OnCancel="OnCancelClicked"
                            OnSubmit="OnSubmitClicked" />
                    }
                    
                    @if (ShowOptionalNotesField)
                    {
                        <div class="d-flex align-items-start mt-3">
                            <FluentTextArea
                                @ref="_failureNoteTextArea"
                                data-testid="optional-notes"
                                class="flex-grow-1 me-2"
                                placeholder="Optional: Add a failure note (if needed)"
                                @oninput="HandleNoteChangedAsync"/>
                            
                            <!-- Red Tag Button next to failure note -->
                            <button type="button"
                                    class="btn btn-sm btn-danger px-2 py-1"
                                    @onclick:stopPropagation="true"
                                    @onclick="ToggleRedTagDialog"
                                    style="font-size: 0.75rem; white-space: nowrap;">
                                Red Tag
                            </button>
                        </div>
                    }

                    <div class="row mt-2 align-items-center">
                        <div class="col d-flex justify-content-start gap-3">
                            <div class="position-relative">
                                <!-- Success Button -->
                                <input type="radio"
                                       class="btn-check"
                                       name="statusToggle"
                                       id="radioSuccessBtn{@Step.Body}-@Step.Id"
                                       checked="@(SelectedButton == "Success")"
                                       @onclick="@(async (e) => await HandleButtonPress(true))"/>
                                <label class="btn btn-outline-success @(SelectedButton == "Success" ? "active" : "")"
                                       for="radioSuccessBtn{@Step.Body}-@Step.Id">
                                    Success
                                </label>

                                @if (_showSuccessFloat)
                                {
                                    <div class="floating-label" style="left: 50%; transform: translateX(-50%);">
                                        Success!
                                    </div>
                                }
                            </div>

                            <div class="position-relative">
                                <!-- Failure Button -->
                                <input type="radio"
                                       class="btn-check"
                                       name="statusToggle"
                                       id="radioFailureBtn{@Step.Body}-@Step.Id"
                                       checked="@(SelectedButton == "Failure")"
                                       @onclick="@(async (e) => await HandleButtonPress(false))"/>
                                <label class="btn btn-outline-danger d-flex align-items-center justify-content-between gap-2 @(SelectedButton == "Failure" ? "active" : "")"
                                       for="radioFailureBtn{@Step.Body}-@Step.Id">
                                    <span>Failure</span>
                                </label>

                                @if (_showFailureFloat)
                                {
                                    <div class="floating-label" style="left: 50%; transform: translateX(-50%); color: #dc3545;">
                                        Failure!
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col text-end">
                            @if (HasDetails)
                            {
                                <button @onclick="toggleDetails" class="btn btn-outline-secondary text-decoration-none" type="button">
                                    @(ShowDetails ? "Hide Details" : "Show Details")
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col col-md-6 secondary-content">
                @if (Step.PrimaryMedia.Count > 0 || Step.SecondaryMedia.Count > 0) 
                {
                    @if (ShowDetails)
                    {
                        if (Step.SecondaryMedia.Count > 0)
                        {
                            <Carousel
                                Images="@Step.SecondaryMedia"
                                AutoPlay="false"
                                Interval="3000"
                                ImageStyle="height: 500px; object-fit: contain;" />
                        }
                        else if (Step.PrimaryMedia.Count > 0)
                        {
                            <Carousel
                                Images="@Step.PrimaryMedia"
                                AutoPlay="false"
                                Interval="3000"
                                ImageStyle="height: 500px; object-fit: contain;" />
                        }
                    }
                    else if (Step.PrimaryMedia.Count > 0)
                    {
                        <Carousel
                            Images="@Step.PrimaryMedia"
                            AutoPlay="false"
                            Interval="3000"
                            ImageStyle="height: 500px; object-fit: contain;" />
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Represents the step data for the current work instruction.
    /// </summary>
    [Parameter]
    public required Step Step { get; set;}

    /// <summary>
    /// Represents the production log steps associated with the current step.
    /// </summary>
    [Parameter]
    public required List<ProductionLogStep> LogSteps { get; set; }

    /// <summary>
    /// Event callback triggered when the step is completed.
    /// </summary>
    [Parameter]
    public EventCallback<(List<ProductionLogStep>, bool?)> OnStepCompleted { get; set; }
    
    /// <summary>
    /// Gets or sets the failure note content explaining why the step was rejected.
    /// </summary>
    [Parameter] public string FailureNoteText { get; set; } = "";

    private FluentTextArea? _failureNoteTextArea;

    private string _currentAttemptNotes = "";

    private ProductionLogStepAttempt? _pendingFailureAttempt;

    private bool IsStepSuccessful(ProductionLogStep step) =>
        step.LatestAttempt?.Success == true;

    private bool? GetStepSuccessState(ProductionLogStep step) =>
        step.LatestAttempt?.Success;

    private bool HasDetails =>
        !IsHtmlEmpty(Step.DetailedBody) || (Step.SecondaryMedia?.Count ?? 0) > 0;

    private static bool IsHtmlEmpty(string? html)
    {
        if (string.IsNullOrWhiteSpace(html))
            return true;

        var textOnly = Regex.Replace(html, "<.*?>", "").Trim();

        return string.IsNullOrWhiteSpace(textOnly);
    }

    private bool _showSuccessFloat = false;
    private bool _showFailureFloat = false;

    // New backing fields for RedTagPrint props from your merge example
    // Fields
    private int _attemptCount = 1;

    /// <summary>
    /// Initializes component state, setting up part details and selected status.
    /// </summary>
    protected override void OnInitialized()
    {
        var states = LogSteps
            .Select(ls => ls.LatestAttempt?.Success)
            .Distinct()
            .ToList();

        if (states.Count == 1)
        {
            var state = states.Single();

            SelectedButton = state switch
            {
                true => "Success",
                false => "Failure",
                null => ""
            };
        }
        else
        {
            SelectedButton = "";
        }

        SetOptionalNotes();

        // Initialize part info for RedTagPrint from Step or elsewhere
        _attemptCount = LogSteps?.Count ?? 0;
    }

    /// <summary>
    /// Updates part details and selected state whenever parameters change.
    /// </summary>
    protected override void OnParametersSet()
    {
        var states = LogSteps
            .Select(ls => ls.LatestAttempt?.Success)
            .Distinct()
            .ToList();

        if (states.Count == 1)
        {
            var state = states.Single();

            SelectedButton = state switch
            {
                true => "Success",
                false => "Failure",
                null => ""
            };
        }
        else
        {
            SelectedButton = "";
        }

        // Keep Part info synced (optional)
        _attemptCount = LogSteps?.Count ?? _attemptCount;
    }

    private bool ShowDetails = false;

    private void toggleDetails()
    {
        ShowDetails = !ShowDetails;
        StateHasChanged();
    }

    private bool ShowOptionalNotesField { get; set; } = false;

    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        SelectedButton = buttonName;
    }

    private void SetOptionalNotes()
    {
        var attempt = LogSteps
            .Select(ls => ls.LatestAttempt)
            .FirstOrDefault(a => !string.IsNullOrWhiteSpace(a?.Notes) || (a?.Success.HasValue == true && !a.Success.Value));

        if (attempt != null)
        {
            // Do NOT set _currentAttemptNotes here so textarea starts blank
            FailureNoteText = attempt.Notes;  // This shows in red tag dialog
            ShowOptionalNotesField = true;
        }
        else
        {
            FailureNoteText = "";
            ShowOptionalNotesField = false;
        }
    }

    private async Task HandleButtonPress(bool? result)
    {
        if (!result.HasValue)
        {
            ShowOptionalNotesField = false;
            _pendingFailureAttempt = null;
            _currentAttemptNotes = string.Empty;
            SetSelectedButton("");
            return;
        }

        if (result.Value) // SUCCESS
        {
            foreach (var step in LogSteps)
            {
                step.Attempts.Add(new ProductionLogStepAttempt
                {
                    Success = true,
                    SubmitTime = DateTimeOffset.UtcNow,
                    Notes = ""
                });
            }

            await OnStepCompleted.InvokeAsync((LogSteps, true));

            _pendingFailureAttempt = null;
            _currentAttemptNotes = string.Empty;
            ShowOptionalNotesField = false;
            SetSelectedButton("Success");

            await ShowFloatMessage(true);
        }
        else // FAILURE
        {
            if (_pendingFailureAttempt != null)
            {
                _pendingFailureAttempt.Notes = _currentAttemptNotes;
                _pendingFailureAttempt = null;
            }

            _currentAttemptNotes = string.Empty;

            _pendingFailureAttempt = new ProductionLogStepAttempt
            {
                Success = false,
                SubmitTime = DateTimeOffset.UtcNow,
                Notes = ""
            };

            foreach (var logStep in LogSteps)
            {
                logStep.Attempts.Add(_pendingFailureAttempt);
            }

            ShowOptionalNotesField = true;
            SetSelectedButton("Failure");

            await OnStepCompleted.InvokeAsync((LogSteps, false));
            StateHasChanged();
            await Task.Yield();

            if (_failureNoteTextArea?.Element != null)
            {
                await JsRuntime.InvokeVoidAsync("AutoFocus.setFocus", _failureNoteTextArea.Id);
            }

            await ShowFloatMessage(false);
        }
    }

    private async Task HandleNoteChangedAsync(ChangeEventArgs e)
    {
        _currentAttemptNotes = e.Value?.ToString() ?? "";
        FailureNoteText = _currentAttemptNotes;  // update parameter for dialog

        if (_pendingFailureAttempt != null)
        {
            _pendingFailureAttempt.Notes = _currentAttemptNotes;
            await ProductionLogEventService.ChangeMadeToProductionLog();
        }
    }

    private async Task ShowFloatMessage(bool isSuccess)
    {
        if (isSuccess)
        {
            _showSuccessFloat = true;
            StateHasChanged();
            await Task.Delay(800);
            _showSuccessFloat = false;
        }
        else
        {
            _showFailureFloat = true;
            StateHasChanged();
            await Task.Delay(800);
            _showFailureFloat = false;
        }
        StateHasChanged();
    }
    
    private bool _showRedTagDialog = false;

    private void ToggleRedTagDialog()
    {
        _showRedTagDialog = !_showRedTagDialog;
    }
    
    private void OnCancelClicked()
    {
        _showRedTagDialog = false;
        StateHasChanged();
    }
    
    private void OnSubmitClicked()
    {
        _showRedTagDialog = false;
        StateHasChanged();
    }


}

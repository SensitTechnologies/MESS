@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using Mono.TextTemplating
@using MESS.Blazor.Components.Carousel
@inject IProductionLogEventService ProductionLogEventService

<div class="row">
    @* This stores the primary content i.e. the content that is always shown to the operator. The 'Name' field is always shown. *@
    <div class="col col-md-6 col-sm-12 col-3 primary-content">
        <div class="card">
            <div class="card-body">
                <p class="card-text d-block mb-1">@((MarkupString)Step.Name)</p>
            </div>
        </div>
    </div>
    
    <div class="col col-md-6 secondary-content">
        <div class="card">
            <div class="card-body">
                <Carousel
                    Images="@GetCombinedMedia()"
                    AutoPlay="false"
                    Interval="3000"
                    ImageStyle="height: 400px; object-fit: cover;" />
            </div>

        </div>
    </div>
    
</div>
<div class="row mt-3">
    <div class="col text-left">
        <input type="radio"
               checked="@(!LogStep.Success)"
               autocomplete="off"
               @onclick="@(async (e) => await HandleButtonPress(false))"
               class="btn-check"
               name="radioBtn{@Step.Name}"
               id="radioFailureBtn{@Step.Name}-@Step.Id"/>
        <label class="btn btn-outline-danger @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Failure" ? "active" : "")" for="radioFailureBtn{@Step.Name}-@Step.Id">Failure</label>

        <input type="radio"
               checked="@(LogStep.Success)"
               autocomplete="off"
               class="btn-check"
               name="radioBtn{@Step.Name}"
               id="radioSuccessBtn{@Step.Name}-@Step.Id"
               @onclick="@(async (e) => await HandleButtonPress(true))"/>
        <label class="btn btn-outline-success @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Success" ? "active" : "")" for="radioSuccessBtn{@Step.Name}-@Step.Id">Success</label>
        <button @onclick="toggleDetails" class="btn btn-outline-secondary text-decoration-none" type="button">
            @(ShowDetails ? "Hide Details" : "Show Details")
        </button>
    </div>
</div>


<div class="d-inline-flex">
    @if (ShowOptionalNotesField)
    {
        <InputTextArea data-testid="optional-notes" class="form-control mx-2 custom-textarea" @bind-Value:after="@(async () => await ProductionLogEventService.ChangeMadeToProductionLog())" @bind-Value="LogStep.Notes"/>
    }
</div>




@code {
    /// <summary>
    /// Represents the step data for the current work instruction.
    /// </summary>
    [Parameter]
    public required Step Step { get; set;}
    /// <summary>
    /// Represents the production log step associated with the current step.
    /// </summary>
    [Parameter]
    public required ProductionLogStep LogStep { get; set;}
    /// <summary>
    /// Event callback triggered when the step is completed.
    /// The tuple contains the production log step and a nullable boolean indicating success or failure.
    /// </summary>
    [Parameter]
    public EventCallback<(ProductionLogStep, bool?)> OnStepCompleted { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        if (!LogStep.Success.HasValue)
        {
            SetSelectedButton("");
        } else if (LogStep.Success.Value)
        {
            SetSelectedButton("Success");
        } else if (!LogStep.Success.Value)
        {
            SetSelectedButton("Failure");
        }
        
        SetOptionalNotes();
    }

    private bool ShowDetails = false;

    private void toggleDetails()
    {
        ShowDetails = !ShowDetails;
        StateHasChanged();
    }
    
    private List<string> GetCombinedMedia()
    {
        var combinedMedia = new List<string>();
    
        // Add primary media if available
        if (Step.PrimaryMedia.Count > 0)
        {
            combinedMedia.AddRange(Step.PrimaryMedia);
        }
    
        // Add secondary media if available
        if (Step.SecondaryMedia.Count > 0)
        {
            combinedMedia.AddRange(Step.SecondaryMedia);
        }
    
        return combinedMedia;
    }
    
    private bool ShowOptionalNotesField { get; set; } = false;
    
    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        SelectedButton = SelectedButton == buttonName ? null : buttonName;
    }
    
    private void SetOptionalNotes()
    {
        if (!string.IsNullOrWhiteSpace(LogStep.Notes) || (LogStep.Success.HasValue && !LogStep.Success.Value))
        {
            ShowOptionalNotesField = true;
        }
    }

    private async Task HandleButtonPress(bool? result)
    {
        if (SelectedButton == (result.HasValue ? (result.Value ? "Success" : "Failure") : ""))
        {
            result = null;
        }
        
        if (!result.HasValue)
        {
            ShowOptionalNotesField = false;
            await OnStepCompleted.InvokeAsync((LogStep, null));
            SetSelectedButton("");
            return;
        }
        
        if (!result.Value)
        {
            ShowOptionalNotesField = !ShowOptionalNotesField;
            await OnStepCompleted.InvokeAsync((LogStep, false));
        }
        else
        {
            ShowOptionalNotesField = false;
            await OnStepCompleted.InvokeAsync((LogStep, true));
        }

        SetSelectedButton(result.Value ? "Success" : "Failure");
    }
}
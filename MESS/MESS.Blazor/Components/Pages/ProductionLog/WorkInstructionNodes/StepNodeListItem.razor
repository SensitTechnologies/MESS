@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using Mono.TextTemplating
@using MESS.Blazor.Components.Carousel
@inject IProductionLogEventService ProductionLogEventService
@inject IJSRuntime JsRuntime

<div class="row">
    @* This stores the primary content i.e. the content that is always shown to the operator. The 'Name' field is always shown. *@
    <div class="col col-md-6 col-sm-12 col-3 primary-content">
        <div class="card">
            <div class="card-body">
                <p class="card-text d-block mb-1">
                    
                    @* Replace text with extra details i.e. body text *@
                    @switch (ShowDetails)
                    {
                        case false:
                            @((MarkupString)Step.Name)
                            break;
                        case true when Step.Body != null:
                            @((MarkupString)Step.Body)
                            break;
                    }
                </p>
            </div>
        </div>
    </div>
    
    
    <div class="col col-md-6 secondary-content">
        @if (Step.PrimaryMedia.Count > 0 || Step.SecondaryMedia.Count > 0)
        {
            <div class="card">
                <div class="card-body">
                    @if (ShowDetails && Step.SecondaryMedia.Count > 0)
                    {
                        <Carousel
                            Images="@Step.SecondaryMedia"
                            AutoPlay="false"
                            Interval="3000"
                            ImageStyle="height: 500px; object-fit: contain;" />
                    }
                    else if (!ShowDetails && Step.PrimaryMedia.Count > 0)
                    {
                        <Carousel
                            Images="@Step.PrimaryMedia"
                            AutoPlay="false"
                            Interval="3000"
                            ImageStyle="height: 500px; object-fit: contain;" />
                    }
                </div>

            </div>
        }
    </div>
    
</div>
<div class="row mt-3">
    <div class="col text-end">
        <input type="radio"
               checked="@(GetStepSuccessState(LogStep) == true)"
               autocomplete="off"
               class="btn-check"
               name="radioBtn{@Step.Name}"
               id="radioSuccessBtn{@Step.Name}-@Step.Id"
               @onclick="@(async (e) => await HandleButtonPress(true))"/>
        <label class="btn btn-outline-success @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Success" ? "active" : "")" for="radioSuccessBtn{@Step.Name}-@Step.Id">Success</label>
       
        <input type="radio"
               checked="@(GetStepSuccessState(LogStep) == false)"
               autocomplete="off"
               @onclick="@(async (e) => await HandleButtonPress(false))"
               class="btn-check"
               name="radioBtn{@Step.Name}"
               id="radioFailureBtn{@Step.Name}-@Step.Id"/>
        <label class="btn btn-outline-danger @(!string.IsNullOrEmpty(SelectedButton) && SelectedButton == "Failure" ? "active" : "")" for="radioFailureBtn{@Step.Name}-@Step.Id">Failure</label>
        
        <button @onclick="toggleDetails" class="btn btn-outline-secondary text-decoration-none" type="button">
            @(ShowDetails ? "Hide Details" : "Show Details")
        </button>
    </div>
</div>


<div class="d-inline-flex">
    <FluentTextArea 
        @ref="_failureNoteTextArea" 
        data-testid="optional-notes" 
        class="@(ShowOptionalNotesField ? "" : "d-none")" 
        @bind-Value="_currentAttemptNotes"
        @bind-Value:after="@(async () => await HandleNoteChangedAsync())" />
</div>




@code {
    /// <summary>
    /// Represents the step data for the current work instruction.
    /// </summary>
    [Parameter]
    public required Step Step { get; set;}
    /// <summary>
    /// Represents the production log step associated with the current step.
    /// </summary>
    [Parameter]
    public required ProductionLogStep LogStep { get; set;}
    /// <summary>
    /// Event callback triggered when the step is completed.
    /// The tuple contains the production log step and a nullable boolean indicating success or failure.
    /// </summary>
    [Parameter]
    public EventCallback<(ProductionLogStep, bool?)> OnStepCompleted { get; set; }

    private FluentTextArea? _failureNoteTextArea;
    
    private string _currentAttemptNotes = "";
    
    private ProductionLogStepAttempt? _pendingFailureAttempt;
    
    private bool IsStepSuccessful(ProductionLogStep step) =>
        step.LatestAttempt?.Success == true;
    
    private bool? GetStepSuccessState(ProductionLogStep step) =>
        step.LatestAttempt?.Success;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        if (LogStep.LatestAttempt.Success == null)
        {
            SetSelectedButton("");
        }
        else if (IsStepSuccessful(LogStep))
        {
            SetSelectedButton("Success");
        }
        else
        {
            SetSelectedButton("Failure");
        }

        SetOptionalNotes();
    }


    private bool ShowDetails = false;

    private void toggleDetails()
    {
        ShowDetails = !ShowDetails;
        StateHasChanged();
    }
    
    private bool ShowOptionalNotesField { get; set; } = false;
    
    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        SelectedButton = SelectedButton == buttonName ? null : buttonName;
    }
    
    private void SetOptionalNotes()
    {
        var attempt = LogStep.LatestAttempt;
        if (!string.IsNullOrWhiteSpace(attempt.Notes) || 
            (attempt.Success.HasValue && !attempt.Success.Value))
        {
            ShowOptionalNotesField = true;
        }
    }

    private async Task HandleButtonPress(bool? result)
    {
        if (!result.HasValue)
        {
            ShowOptionalNotesField = false;
            _pendingFailureAttempt = null;
            _currentAttemptNotes = string.Empty;
            SetSelectedButton("");
            return;
        }

        if (result.Value) // SUCCESS
        {
            var attempt = new ProductionLogStepAttempt
            {
                Success = true,
                SubmitTime = DateTimeOffset.UtcNow,
                Notes = ""
            };

            LogStep.Attempts.Add(attempt);
            _pendingFailureAttempt = null;
            _currentAttemptNotes = string.Empty;
            ShowOptionalNotesField = false;

            await OnStepCompleted.InvokeAsync((LogStep, true));
            SetSelectedButton("Success");
        }
        else // FAILURE
        {
            // If there's already a pending failure, finalize it by setting its notes
            if (_pendingFailureAttempt != null)
            {
                _pendingFailureAttempt.Notes = _currentAttemptNotes;
                _pendingFailureAttempt = null;
            }

            // Clear input for the next note
            _currentAttemptNotes = string.Empty;

            // Create new pending attempt
            _pendingFailureAttempt = new ProductionLogStepAttempt
            {
                Success = false,
                SubmitTime = DateTimeOffset.UtcNow,
                Notes = ""
            };
            LogStep.Attempts.Add(_pendingFailureAttempt);

            ShowOptionalNotesField = true;
            SetSelectedButton("Failure");

            await OnStepCompleted.InvokeAsync((LogStep, false));
            StateHasChanged();
            await Task.Yield();

            if (_failureNoteTextArea?.Element != null)
            {
                await JsRuntime.InvokeVoidAsync("AutoFocus.setFocus", _failureNoteTextArea.Id);
            }
        }
    }
    
    private async Task HandleNoteChangedAsync()
    {
        if (_pendingFailureAttempt != null)
        {
            _pendingFailureAttempt.Notes = _currentAttemptNotes;
            await ProductionLogEventService.ChangeMadeToProductionLog();
        }
    }
}
@using System.Text.RegularExpressions
@using MESS.Data.Models
@using MESS.Services.ProductionLogServices
@using MESS.Blazor.Components.Carousel
@inject IProductionLogEventService ProductionLogEventService
@inject IJSRuntime JsRuntime

<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col col-md-6 col-sm-12 d-flex flex-column primary-content">
                <div class="card">
                    <div class="card-body">
                        <p class="card-text d-block mb-1" style="white-space: pre-wrap;">
                            
                            @* Replace text with extra details i.e. body text *@
                            @switch (ShowDetails)
                            {
                                case false:
                                    @((MarkupString)Step.Body)
                                    break;
                                case true when Step.DetailedBody != null:
                                    @((MarkupString)Step.DetailedBody)
                                    break;
                            }
                        </p>
                    </div>
                </div>

                <div class="mt-auto">
                    @if (_showRedTagDialog && _pendingFailureAttempt is not null)
                    {
                        <RedTagDialog
                            StepName="@Step.Name"
                            FailureNotes="@_currentAttemptNotes"
                            AttemptTime="@_pendingFailureAttempt?.SubmitTime"
                            AttemptId="@(_pendingFailureAttempt?.Id)"
                            OnCancel="OnCancelClicked"
                            OnSubmit="OnSubmitClicked" />
                    }
                    
                    @if (ShowOptionalNotesField)
                    {
                        <div class="d-flex align-items-start mt-3">
                            <FluentTextArea
                                @ref="_failureNoteTextArea"
                                data-testid="optional-notes"
                                class="flex-grow-1 me-2"
                                placeholder="Optional: Add a failure note (if needed)"
                                @bind-Value="_currentAttemptNotes"
                                @bind-Value:after="@(async () => await HandleNoteChangedAsync())" />
                            
                            <!-- Red Tag Button next to failure note -->
                            <button type="button"
                                    class="btn btn-sm btn-danger px-2 py-1"
                                    @onclick:stopPropagation="true"
                                    @onclick="ToggleRedTagDialog"
                                    style="font-size: 0.75rem; white-space: nowrap;">
                                Red Tag
                            </button>
                        </div>
                    }

                    <div class="row mt-2">
                        <div class="col text-start">
                            <div class="position-relative d-inline-block">
                                <!-- Success Button -->
                                <input type="radio"
                                       class="btn-check"
                                       name="statusToggle"
                                       id="radioSuccessBtn{@Step.Body}-@Step.Id"
                                       checked="@(SelectedButton == "Success")"
                                       @onclick="@(async (e) => await HandleButtonPress(true))"/>
                                <label class="btn btn-outline-success @(SelectedButton == "Success" ? "active" : "")"
                                       for="radioSuccessBtn{@Step.Body}-@Step.Id">
                                    Success
                                </label>

                                @if (_showSuccessFloat)
                                {
                                    <div class="floating-label" style="left: 50%; transform: translateX(-50%);">
                                        Success!
                                    </div>
                                }
                            </div>
                            
                            <div class="position-relative d-inline-block">
                                <!-- Failure Button -->
                                <input type="radio"
                                       class="btn-check"
                                       name="statusToggle"
                                       id="radioFailureBtn{@Step.Body}-@Step.Id"
                                       checked="@(SelectedButton == "Failure")"
                                       @onclick="@(async (e) => await HandleButtonPress(false))"/>
                                <label class="btn btn-outline-danger @(SelectedButton == "Failure" ? "active" : "")"
                                       for="radioFailureBtn{@Step.Body}-@Step.Id">
                                    Failure
                                </label>

                                @if (_showFailureFloat)
                                {
                                    <div class="floating-label" style="left: 50%; transform: translateX(-50%); color: #dc3545;">
                                        Failure!
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col text-end">
                            @if (HasDetails)
                            {
                                <button @onclick="toggleDetails" class="btn btn-outline-secondary text-decoration-none" type="button">
                                    @(ShowDetails ? "Hide Details" : "Show Details")
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col col-md-6 secondary-content">
                @if (Step.PrimaryMedia.Count > 0 || Step.SecondaryMedia.Count > 0) 
                {
                    @if (ShowDetails)
                    {
                        if (Step.SecondaryMedia.Count > 0)
                        {
                            <Carousel
                                Images="@Step.SecondaryMedia"
                                AutoPlay="false"
                                Interval="3000"
                                ImageStyle="height: 500px; object-fit: contain;" />
                        }
                        else if (Step.PrimaryMedia.Count > 0)
                        {
                            <Carousel
                                Images="@Step.PrimaryMedia"
                                AutoPlay="false"
                                Interval="3000"
                                ImageStyle="height: 500px; object-fit: contain;" />
                        }
                    }
                    else if (Step.PrimaryMedia.Count > 0)
                    {
                        <Carousel
                            Images="@Step.PrimaryMedia"
                            AutoPlay="false"
                            Interval="3000"
                            ImageStyle="height: 500px; object-fit: contain;" />
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Represents the step data for the current work instruction.
    /// </summary>
    [Parameter]
    public required Step Step { get; set;}

    /// <summary>
    /// Represents the production log steps associated with the current step.
    /// </summary>
    /// <remarks>
    /// With one piece flow, this list will have just one log step. In batch mode, there will be many log steps, associated
    /// with one WI step.
    /// </remarks>
    [Parameter]
    public required List<ProductionLogStep> LogSteps { get; set; }

    /// <summary>
    /// Event callback triggered when the step is completed.
    /// The tuple contains the production log step and a nullable boolean indicating success or failure.
    /// </summary>
    [Parameter]
    public EventCallback<(List<ProductionLogStep>, bool?)> OnStepCompleted { get; set; }

    private FluentTextArea? _failureNoteTextArea;

    private string _currentAttemptNotes = "";

    private ProductionLogStepAttempt? _pendingFailureAttempt;

    private bool IsStepSuccessful(ProductionLogStep step) =>
        step.LatestAttempt?.Success == true;

    private bool? GetStepSuccessState(ProductionLogStep step) =>
        step.LatestAttempt?.Success;

    private bool HasDetails =>
        !IsHtmlEmpty(Step.DetailedBody) || (Step.SecondaryMedia?.Count ?? 0) > 0;

    private static bool IsHtmlEmpty(string? html)
    {
        if (string.IsNullOrWhiteSpace(html))
            return true;

        // Strip tags and decode entities if needed
        var textOnly = Regex.Replace(html, "<.*?>", "").Trim();

        return string.IsNullOrWhiteSpace(textOnly);
    }

    private bool _showSuccessFloat = false;
    private bool _showFailureFloat = false;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        var states = LogSteps
            .Select(ls => ls.LatestAttempt?.Success)
            .Distinct()
            .ToList();

        if (states.Count == 1)
        {
            var state = states.Single();

            SelectedButton = state switch
            {
                true => "Success",
                false => "Failure",
                null => "" // No attempts yet: show nothing selected
            };
        }
        else
        {
            SelectedButton = ""; // Mixed states: nothing selected
        }

        SetOptionalNotes();
    }
    
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        var states = LogSteps
            .Select(ls => ls.LatestAttempt?.Success)
            .Distinct()
            .ToList();

        if (states.Count == 1)
        {
            var state = states.Single();

            SelectedButton = state switch
            {
                true => "Success",
                false => "Failure",
                null => "" // All steps unattempted: show nothing selected
            };
        }
        else
        {
            SelectedButton = ""; // Mixed states: show nothing selected
        }
    }


    private bool ShowDetails = false;

    private void toggleDetails()
    {
        ShowDetails = !ShowDetails;
        StateHasChanged();
    }

    private bool ShowOptionalNotesField { get; set; } = false;

    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        SelectedButton = buttonName;
    }

    private void SetOptionalNotes()
    {
        var attempt = LogSteps
            .Select(ls => ls.LatestAttempt)
            .FirstOrDefault(a => !string.IsNullOrWhiteSpace(a?.Notes) || (a?.Success.HasValue == true && !a.Success.Value));

        if (attempt != null)
        {
            _currentAttemptNotes = attempt.Notes;
            ShowOptionalNotesField = true;
        }
    }

    private async Task HandleButtonPress(bool? result)
    {
        if (!result.HasValue)
        {
            ShowOptionalNotesField = false;
            _pendingFailureAttempt = null;
            _currentAttemptNotes = string.Empty;
            SetSelectedButton("");
            return;
        }

        if (result.Value) // SUCCESS
        {
            foreach (var step in LogSteps)
            {
                step.Attempts.Add(new ProductionLogStepAttempt
                {
                    Success = true,
                    SubmitTime = DateTimeOffset.UtcNow,
                    Notes = ""
                });
            }

            await OnStepCompleted.InvokeAsync((LogSteps, true));

            _pendingFailureAttempt = null;
            _currentAttemptNotes = string.Empty;
            ShowOptionalNotesField = false;
            SetSelectedButton("Success");

            await ShowFloatMessage(true);
        }
        else // FAILURE
        {
            // If there's already a pending failure, finalize it by setting its notes
            if (_pendingFailureAttempt != null)
            {
                _pendingFailureAttempt.Notes = _currentAttemptNotes;
                _pendingFailureAttempt = null;
            }

            // Clear input for the next note
            _currentAttemptNotes = string.Empty;

            // Create new pending attempt
            _pendingFailureAttempt = new ProductionLogStepAttempt
            {
                Success = false,
                SubmitTime = DateTimeOffset.UtcNow,
                Notes = ""
            };

            foreach (var logStep in LogSteps)
            {
                logStep.Attempts.Add(_pendingFailureAttempt);
            }

            ShowOptionalNotesField = true;
            SetSelectedButton("Failure");

            await OnStepCompleted.InvokeAsync((LogSteps, false));
            StateHasChanged();
            await Task.Yield();

            if (_failureNoteTextArea?.Element != null)
            {
                await JsRuntime.InvokeVoidAsync("AutoFocus.setFocus", _failureNoteTextArea.Id);
            }

            await ShowFloatMessage(false);
        }
    }
    
    private async Task HandleNoteChangedAsync()
    {
        if (_pendingFailureAttempt != null)
        {
            _pendingFailureAttempt.Notes = _currentAttemptNotes;
            await ProductionLogEventService.ChangeMadeToProductionLog();
            ProductionLogEventService.MarkDirty();
        }
    }

    private async Task ShowFloatMessage(bool isSuccess)
    {
        if (isSuccess)
        {
            _showSuccessFloat = true;
            StateHasChanged();
            await Task.Delay(800);
            _showSuccessFloat = false;
        }
        else
        {
            _showFailureFloat = true;
            StateHasChanged();
            await Task.Delay(800);
            _showFailureFloat = false;
        }
        StateHasChanged();
    }
    
    private bool _showRedTagDialog = false;

    private void ToggleRedTagDialog()
    {
        // If we don’t already have a pending failure, grab the latest one:
        if (_pendingFailureAttempt is null)
        {
            _pendingFailureAttempt = LogSteps
                .Select(ls => ls.LatestAttempt)
                .FirstOrDefault(a => a?.Success == false);

            // And copy its notes so the textarea shows the correct text:
            _currentAttemptNotes = _pendingFailureAttempt?.Notes ?? "";
        }

        _showRedTagDialog = !_showRedTagDialog;
    }
    
    private void OnCancelClicked()
    {
        _showRedTagDialog = false;
        StateHasChanged();
    }
    
    private void OnSubmitClicked()
    {
        _showRedTagDialog = false;
        StateHasChanged();
    }
    
}
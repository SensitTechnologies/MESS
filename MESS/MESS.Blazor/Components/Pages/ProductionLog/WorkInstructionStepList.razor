@using MESS.Data.Models
@using MESS.Blazor.Components.Pages.ProductionLog.WorkInstructionNodes
@using PartNode = MESS.Data.Models.PartNode
@using MESS.Blazor.Components.Pages.ProductionLog.WorkInstructionNodes.PartNode

@if (ActiveWorkInstruction != null && ProductionLogs?.Any() == true)
{
    <ul class="step">
        @foreach (var workInstructionNode in ActiveWorkInstruction.Nodes.OrderBy(wn => wn.Position))
        {
            // If workInstructionNode is of PartNode type it will not need to be added to a logStep. Only the StepNode will need to be added
            switch (workInstructionNode)
            {
                case Step instructionStep:
                    // Create or retrieve a list of log steps for all logs
                    var logSteps = new List<ProductionLogStep>();

                    foreach (var log in ProductionLogs)
                    {
                        var step = log.LogSteps?.FirstOrDefault(ls => ls.WorkInstructionStepId == instructionStep.Id);
                        if (step == null)
                        {
                            step = new ProductionLogStep
                            {
                                WorkInstructionStepId = instructionStep.Id,
                                WorkInstructionStep = instructionStep,
                                ProductionLogId = log.Id,
                            };
                            log.LogSteps?.Add(step);
                        }
                        logSteps.Add(step);
                    }

                    <li class="mb-3">
                        <div id="step-@instructionStep.Position">
                            <!-- If you have a batch-aware StepNodeListItem -->
                            <StepNodeListItem 
                                Step="instructionStep" 
                                LogSteps="logSteps"
                                OnStepCompleted="OnStepCompleted" />
                        </div>
                    </li>
                    break;

                case PartNode instructionPart:
                    <li class="mb-3">
                        <PartNodeListItem PartNode="instructionPart" />
                    </li>
                    break;

                default:
                    <div>Unknown Instruction type</div>
                    break;
            }

        }
        @if (ActiveWorkInstruction.CollectsProductSerialNumber)
        {
            <div class="card card-body">
                <div class="mb-2">
                    <div class="form-label">
                        @(ProductionLogs.Count == 1 ? "Product Serial Number" : "Product Serial Numbers")
                    </div>
                </div>

                <div class="d-flex flex-wrap gap-2 justify-content-around align-content-center">
                    @for (var i = 0; i < ProductionLogs.Count; i++)
                    {
                        var log = ProductionLogs[i];

                        <div class="form-floating flex-grow-1" style="min-width: 220px;">
                            <InputText
                                id=@($"productSerialNumber-{i}")
                                class="form-control tall-input text-lightweight"
                                @bind-Value="log.ProductSerialNumber" />
                            @if (ProductionLogs.Count > 1)
                            {
                                <label for=@($"productSerialNumber-{i}") class="form-label subtle-label">
                                    #@(i + 1)
                                </label>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </ul>
}

@code {
    /// <summary>
    /// The active work instruction being processed.
    /// </summary>
    [Parameter] public required WorkInstruction ActiveWorkInstruction { get; set; }

    /// <summary>
    /// The production logs associated with the current work instruction.
    /// </summary>
    [Parameter] public required List<ProductionLog> ProductionLogs { get; set; }

    /// <summary>
    /// Event callback triggered when a step is completed.
    /// The tuple contains the production log step and an optional boolean indicating completion status.
    /// </summary>
    [Parameter] public EventCallback<(List<ProductionLogStep>, bool?)> OnStepCompleted { get; set; }

    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        if (SelectedButton == buttonName)
        {
            SelectedButton = null;
        }
        else
        {
            SelectedButton = buttonName;
        }
    }

    private void ClearSelectedButton()
    {
        SelectedButton = null;
    }

    private string GetButtonClass(string buttonName)
    {
        string baseClass = "btn";

        if (buttonName == "Clear")
        {
            return string.IsNullOrEmpty(SelectedButton) ? $"{baseClass} btn-secondary" : $"{baseClass} btn-warning";
        }

        return SelectedButton == buttonName ? $"{baseClass} btn-primary" : $"{baseClass} btn-success";
    }
}

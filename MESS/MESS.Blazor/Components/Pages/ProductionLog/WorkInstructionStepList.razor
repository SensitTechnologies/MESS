@using MESS.Data.Models

@if (ActiveWorkInstruction == null || ProductionLog == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <ul class="list-group list-group-numbered container">
        @foreach (var step in ActiveWorkInstruction.Steps)
        {
            var logStep = ProductionLog.LogSteps?.FirstOrDefault(ls => ls.WorkInstructionStepId == step.Id);

            if (logStep == null && ProductionLog.LogSteps != null)
            {
                logStep = new ProductionLogStep
                {
                    WorkInstructionStepId = step.Id,
                    ProductionLogId = ProductionLog.Id,
                    SubmitTime = DateTimeOffset.UtcNow
                };
                ProductionLog.LogSteps.Add(logStep);
            }

            <li class="list-group-item btn-group mb-2" role="group">
                <div class="row">
                    <div class="col-8">
                        @step.Name
                    </div>

                    <div class="col-4">
                        <input type="radio"
                               checked="@(!logStep?.Success)"
                               autocomplete="off"
                               @onclick="() => ShowOptionalNotesField = !ShowOptionalNotesField"
                               class="btn-check"
                               name="radioBtn{@step.Name}"
                               id="radioFailureBtn{@step.Name}"
                               @onchange="@(async e => { if (logStep != null) { await OnStepCompleted.InvokeAsync((logStep, false)); } })"/>
                        <label class="btn btn-outline-danger" for="radioFailureBtn{@step.Name}">Failure</label>

                        <input type="radio"
                               checked="@(logStep?.Success)"
                               autocomplete="off"
                               class="btn-check"
                               name="radioBtn{@step.Name}"
                               id="radioSuccessBtn{@step.Name}"
                               @onchange="@(async e => { if (logStep != null) { await OnStepCompleted.InvokeAsync((logStep, true)); } })"/>
                        <label class="btn btn-outline-success" for="radioSuccessBtn{@step.Name}">Success</label>
                    </div>

                    @if (logStep != null && showNotesForStep.ContainsKey(logStep.WorkInstructionStepId) && showNotesForStep[logStep.WorkInstructionStepId] == true)
                    {
                        <div class="col-12">
                            Notes:
                            @if (logStep != null)
                            {
                                <InputTextArea @bind-Value="logStep.Notes"/>
                            }
                            else
                            {
                                <p>Loading...</p>
                            }
                        </div>
                    }

                </div>

            </li>
        }
    </ul>
}

@code {
    [Parameter] public required WorkInstruction ActiveWorkInstruction { get; set; }

    [Parameter] public required ProductionLog ProductionLog { get; set; }

    [Parameter] public EventCallback<(ProductionLogStep, bool)> OnStepCompleted { get; set; }

    [Parameter] public required Dictionary<int, bool> showNotesForStep { get; set; }

    private bool ShowOptionalNotesField { get; set; } = false;
}
@using MESS.Data.Models
@using MESS.Services.Serialization
@inject ISerializationService SerializationService

@if (ActiveWorkInstruction != null && ProductionLog != null)
{
    @if (!ActiveWorkInstruction.Steps.TrueForAll(ls => ls.PartsNeeded?.Count <= 0))
    {
        <div class="form-floating p-2 mb-2">
            <InputText id="productSerialNumber" class="form-control" @bind-Value="@ProductSerialNumber" @bind-Value:after="UpdateSerializationService"></InputText>
            <label for="productSerialNumber">Product Serial Number:</label>
        </div>
    }
    
    <ol class="step">
        @foreach (var step in ActiveWorkInstruction.Steps)
        {
            var logStep = ProductionLog.LogSteps?.FirstOrDefault(ls => ls.WorkInstructionStepId == step.Id);

            if (logStep == null && ProductionLog.LogSteps != null)
            {
                logStep = new ProductionLogStep
                {
                    WorkInstructionStepId = step.Id,
                    WorkInstructionStep = step,
                    ProductionLogId = ProductionLog.Id,
                };
                ProductionLog.LogSteps.Add(logStep);
            }
            
                <ProductionLogRadioButton ProductSerialNumber="@ProductSerialNumber" step="step" logStep="logStep" OnStepCompleted="OnStepCompleted"/>
        }
    </ol>
}

@code {
    [Parameter] public required WorkInstruction ActiveWorkInstruction { get; set; }

    [Parameter] public required ProductionLog ProductionLog { get; set; }

    [Parameter] public EventCallback<(ProductionLogStep, bool?)> OnStepCompleted { get; set; }

    private string? ProductSerialNumber { get; set; }

    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        if (SelectedButton == buttonName)
        {
            SelectedButton = null;
        }
        else
        {
            SelectedButton = buttonName;
        }
    }

    private void ClearSelectedButton()
    {
        SelectedButton = null;
    }

    private string GetButtonClass(string buttonName)
    {
        string baseClass = "btn";

        if (buttonName == "Clear")
        {
            return string.IsNullOrEmpty(SelectedButton) ? $"{baseClass} btn-secondary" : $"{baseClass} btn-warning";
        }

        return SelectedButton == buttonName ? $"{baseClass} btn-primary" : $"{baseClass} btn-success";
    }

    private void UpdateSerializationService()
    {
        SerializationService.CurrentProductNumber = ProductSerialNumber;
    }

}

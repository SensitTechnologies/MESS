@using MESS.Data.Models
@using MESS.Services.Serialization
@using MESS.Blazor.Components.Pages.ProductionLog.WorkInstructionNodes
@using PartNode = MESS.Data.Models.PartNode
@inject ISerializationService SerializationService

@if (ActiveWorkInstruction != null && ProductionLog != null)
{
    @if (ActiveWorkInstruction.PartsRequired)
    {
        <div class="form-floating p-2 mb-2">
            <InputText id="productSerialNumber" class="form-control" @bind-Value="@ProductSerialNumber" @bind-Value:after="UpdateSerializationService"></InputText>
            <label for="productSerialNumber">Product Serial Number:</label>
        </div>
    }
    <ul class="step">
        @foreach (var workInstructionNode in ActiveWorkInstruction.Nodes.OrderBy(wn => wn.Position))
        {
            var logStep = ProductionLog.LogSteps?.FirstOrDefault(ls => ls.WorkInstructionStepId == workInstructionNode.Id);
            // If workInstructionNode is of PartNode type it will not need to be added to a logStep. Only the StepNode will need to be added
            if (workInstructionNode is Step workInstructionStep && workInstructionNode.NodeType == WorkInstructionNodeType.Step)
            {
                if (logStep == null && ProductionLog.LogSteps != null)
                {
                    logStep = new ProductionLogStep
                    {
                        WorkInstructionStepId = workInstructionNode.Id,
                        WorkInstructionStep = workInstructionStep,
                        ProductionLogId = ProductionLog.Id,
                    };
                    ProductionLog.LogSteps.Add(logStep);
                }
                <li class="mb-3">
                    <StepNodeListItem OnStepCompleted="OnStepCompleted" LogStep="logStep" Step="workInstructionStep"/>
                </li>
            }
            else if (workInstructionNode is PartNode workInstructionPart && workInstructionNode.NodeType == WorkInstructionNodeType.Part)
            {
                <li class="mb-3">
                    <PartNodeListItem PartNode="workInstructionPart" ProductSerialNumber="@ProductSerialNumber"/>
                </li>
            }
            
            
        }
    </ul>
}

@code {
    /// <summary>
    /// The active work instruction being processed.
    /// </summary>
    [Parameter] public required WorkInstruction ActiveWorkInstruction { get; set; }

    /// <summary>
    /// The production log associated with the current work instruction.
    /// </summary>
    [Parameter] public required ProductionLog ProductionLog { get; set; }

    /// <summary>
    /// Event callback triggered when a step is completed.
    /// The tuple contains the production log step and an optional boolean indicating completion status.
    /// </summary>
    [Parameter] public EventCallback<(ProductionLogStep, bool?)> OnStepCompleted { get; set; }

    private string? ProductSerialNumber { get; set; }

    private string? SelectedButton { get; set; } = "";

    private void SetSelectedButton(string buttonName)
    {
        if (SelectedButton == buttonName)
        {
            SelectedButton = null;
        }
        else
        {
            SelectedButton = buttonName;
        }
    }

    private void ClearSelectedButton()
    {
        SelectedButton = null;
    }

    private string GetButtonClass(string buttonName)
    {
        string baseClass = "btn";

        if (buttonName == "Clear")
        {
            return string.IsNullOrEmpty(SelectedButton) ? $"{baseClass} btn-secondary" : $"{baseClass} btn-warning";
        }

        return SelectedButton == buttonName ? $"{baseClass} btn-primary" : $"{baseClass} btn-success";
    }

    private void UpdateSerializationService()
    {
        SerializationService.CurrentProductNumber = ProductSerialNumber;
    }

}

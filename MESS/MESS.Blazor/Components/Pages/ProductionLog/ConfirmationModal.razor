@inject NavigationManager Navigation

<div class="toast-container position-fixed top-50 start-50 translate-middle p-3 @(IsVisible ? "d-block" : "d-none")" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show confirmation-toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body">
            <p class="mb-4">@BodyText</p>
            <div class="d-flex justify-content-end gap-2">
                <button type="button" class="btn btn-outline-secondary" @onclick="Close">Cancel</button>
                <button class="btn btn-outline-secondary" @onclick="Submit">Submit</button>
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Determines whether the confirmation modal is visible.
    /// </summary>
    [Parameter] 
    public bool IsVisible { get; set; }

    /// <summary>
    /// Event callback that is invoked when the visibility state changes.
    /// </summary>
    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    /// <summary>
    /// The text displayed in the modal header.
    /// </summary>
    [Parameter]
    public string? HeaderText { get; set; }

    /// <summary>
    /// The text displayed in the modal body.
    /// </summary>
    [Parameter]
    public string? BodyText { get; set; }
    
    /// <summary>
    /// Event callback that is invoked when the modal is submitted.
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }
    
    /// <summary>
    /// Shows the confirmation modal with the specified body and header text.
    /// </summary>
    /// <param name="bodyText">The text to display in the modal body.</param>
    /// <param name="headerText">Optional text to display in the modal header.</param>
    public void Show(string bodyText, string headerText = "")
    {
        HeaderText = headerText;
        BodyText = bodyText;
        IsVisible = true;
        StateHasChanged();
    }

    /// <summary>
    /// Closes the confirmation modal by hiding it and clearing its header and body text.
    /// </summary>
    /// <remarks>
    /// This method can be called from parent components via <c>@ref</c> to programmatically dismiss the modal.
    /// It resets the visibility state and forces a UI re-render.
    /// </remarks>
    public void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private async Task Submit()
    {
        Close();
        await OnSubmit.InvokeAsync(true);
    }
}
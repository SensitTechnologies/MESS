@inject IProductionLogEventService ProductionLogEventService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthProvider
@implements IDisposable
@implements IAsyncDisposable
@using System.Text.RegularExpressions
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using Microsoft.AspNetCore.Components.Authorization

<div id="red-tag-printable" class="red-tag-horizontal-wrapper print-only" style="width: 456px; height: 228px;">
    <div class="red-tag-horizontal">
        <div class="red-tag-hole"></div>
        <div class="red-tag-content">
            <div class="tag-info-grid">
                <div class="tag-item"><span class="label">RED TAG</span></div>
                <div class="tag-item"><span class="label">Date:</span><span>@(AttemptTime?.LocalDateTime.ToString("g") ?? "N/A")</span></div>
                <div class="tag-item"><span class="label">ID:</span><span>@(AttemptId?.ToString() ?? "None")</span></div>
                <div class="tag-item"><span class="label">Product:</span> <span>@ProductionLogEventService.CurrentProductName</span></div>
                <div class="tag-item"><span class="label">Part Name:</span></div>
                <div class="tag-item"><span class="label">Part #:</span></div>

                <div class="tag-item"><span class="label">Work Instruction:</span> <span>@ProductionLogEventService.CurrentWorkInstructionName</span></div>
                <div class="tag-item"><span class="label">Step:</span> <span> @StepName</span></div>
                <div class="tag-item"><span class="label">Operator:</span> <span>@OperatorName</span></div>
                <div class="failure-note"><span class="label">Failure Note:</span> <span>@FailureNotes</span></div>
            </div>
        </div>
    </div>
</div>

<div class="mt-3 d-flex justify-content-end gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="OnCancelClicked">Cancel</button>
    <button type="button" class="btn btn-outline-secondary" @onclick="OnSubmitClicked">Print</button>
</div>

@code {
    /// <summary>
    /// The timestamp of the selected attempt.
    /// </summary>
    [Parameter]
    public DateTimeOffset? AttemptTime { get; set; }

    /// <summary>
    /// The ID of the selected attempt.
    /// </summary>
    [Parameter]
    public int? AttemptId { get; set; }
    
    /// <summary>
    /// Optional override for the current step description.
    /// If set, this value is displayed instead of steps from LogSteps.
    /// </summary>
    [Parameter]
    public string StepName { get; set; } = string.Empty;

    /// <summary>
    /// Notes entered by the operator describing the failure condition.
    /// Displayed in the red tag.
    /// </summary>
    [Parameter]
    public string FailureNotes { get; set; } = "";

    /// <summary>
    /// Event callback invoked when the Cancel button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback OnCancel { get; set; }

    /// <summary>
    /// Event callback invoked when the Print button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    /// <summary>
    /// List of production log steps passed from the parent component.
    /// Used to determine the step description if <see cref="Step"/> is not set.
    /// </summary>
    [Parameter]
    public List<ProductionLogStep>? LogSteps { get; set; }

    /// <summary>
    /// The name of the current operator resolved from authentication claims.
    /// </summary>
    private string OperatorName { get; set; } = string.Empty;

    /// <summary>
    /// JavaScript module reference used to invoke print functionality.
    /// </summary>
    private IJSObjectReference? _jsModule;

    /// <summary>
    /// Called by the framework when parameters are set.
    /// Logs debug information about each step and its attempts for diagnostics.
    /// </summary>
    protected override void OnParametersSet()
    {
        if (LogSteps != null)
        {
            foreach (var step in LogSteps)
            {
                var stepName = step.WorkInstructionStep?.Name ?? "(null)";
                var attemptsCount = step.Attempts?.Count ?? 0;
                Console.WriteLine($"[Debug] Step name: '{stepName}', Attempts count: {attemptsCount}");
            }
        }
    }

    /// <summary>
    /// Called when the component is initialized.
    /// Retrieves the operator's name from authentication claims.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthProvider.GetAuthenticationStateAsync()).User;

        string firstName = user.Claims.FirstOrDefault(c => c.Type.Contains("givenname", StringComparison.OrdinalIgnoreCase))?.Value ?? "";
        string lastName = user.Claims.FirstOrDefault(c => c.Type.Contains("surname", StringComparison.OrdinalIgnoreCase))?.Value ?? "";

        if (string.IsNullOrWhiteSpace(firstName) && string.IsNullOrWhiteSpace(lastName))
        {
            OperatorName = user.Claims.FirstOrDefault(c => c.Type == "name")?.Value
                           ?? user.Identity?.Name
                           ?? "Unknown Operator";
        }
        else
        {
            OperatorName = $"{firstName} {lastName}".Trim();
        }
    }

    /// <summary>
    /// Called after component render.
    /// Loads the required JavaScript module on first render.
    /// </summary>
    /// <param name="firstRender">True if this is the first time the component rendered.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "/Scripts/RedTagDialog.js");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Failed to load JS module: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Removes all HTML tags from the input string.
    /// </summary>
    /// <param name="input">String potentially containing HTML tags.</param>
    /// <returns>String with all HTML tags removed.</returns>
    private static string StripHtmlTags(string? input) =>
        string.IsNullOrWhiteSpace(input) ? "" : Regex.Replace(input, "<.*?>", "").Trim();

    /// <summary>
    /// Invokes the cancel event callback when Cancel button is clicked.
    /// </summary>
    private async Task OnCancelClicked() => await OnCancel.InvokeAsync();

    /// <summary>
    /// Invokes the print JavaScript and the submit event callback when Print button is clicked.
    /// </summary>
    private async Task OnSubmitClicked()
    {
        if (_jsModule is not null)
        {
            try
            {
                await _jsModule.InvokeVoidAsync("printRedTagById", "red-tag-printable");
            }
            catch (JSException ex)
            {
                Console.Error.WriteLine($"JS call failed: {ex.Message}");
            }
        }

        await OnSubmit.InvokeAsync();
    }

    /// <summary>
    /// Disposes the JavaScript module asynchronously when the component is destroyed.
    /// </summary>
    public async ValueTask DisposeAsync()
    {
        if (_jsModule is not null)
        {
            await _jsModule.DisposeAsync();
        }
    }

    /// <summary>
    /// Performs synchronous cleanup. No synchronous disposable resources used.
    /// </summary>
    public void Dispose()
    {
        // No synchronous disposable resources
    }
}

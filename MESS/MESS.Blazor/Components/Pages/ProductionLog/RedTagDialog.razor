@inject IProductionLogEventService ProductionLogEventService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthProvider
@implements IDisposable
@implements IAsyncDisposable
@using System.Text.RegularExpressions
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using Microsoft.AspNetCore.Components.Authorization

<div id="red-tag-printable" class="red-tag-horizontal-wrapper print-only" style="width: 456px; height: 228px;">
    <div class="red-tag-horizontal">
        <div class="red-tag-hole"></div>
        <div class="red-tag-content">
            <div class="tag-info-grid">
                <!-- Row 1 -->
                <div class="tag-item"><span class="label">RED TAG</span></div>
                <div class="tag-item"><span class="label">Date:</span> <span>@DateTime.Now.ToString("g")</span></div>
                @if (_internalAttempts != null && _internalAttempts.Count > 0)
                {
                    <div class="tag-item"><span class="label">ID:</span> <span>@AttemptNumber</span></div>
                }
                else
                {
                    <div class="tag-item"><span class="label">ID:</span> <span>None</span></div>
                }
                <div class="tag-item"><span class="label">Product:</span> <span>@ProductionLogEventService.CurrentProductName</span></div>
                <div class="tag-item"><span class="label">Part Name:</span></div>
                <div class="tag-item"><span class="label">Part #:</span></div>

                <!-- Row 2 -->
                <div class="tag-item"><span class="label">Work Instruction:</span> <span>@ProductionLogEventService.CurrentWorkInstructionName</span></div>
                <div class="tag-item"><span class="label">Step:</span><span class="step-truncate">@StripHtmlTags(StepDescription)</span></div>
                <div class="tag-item"><span class="label">Operator:</span> <span>@OperatorName</span></div>
                <div class="failure-note"><span class="label">Failure Note:</span> <span>@FailureNotes</span></div>
            </div>
        </div>
    </div>
</div>

<div class="mt-3 d-flex justify-content-end gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="OnCancelClicked">Cancel</button>
    <button type="button" class="btn btn-outline-secondary" @onclick="OnSubmitClicked">Print</button>
</div>

@code {
    /// <summary>
    /// The current attempt count for the failure event.
    /// </summary>
    [Parameter] public int AttemptCount { get; set; }

    /// <summary>
    /// The list of log steps associated with this red tag entry.
    /// </summary>
    [Parameter] public List<ProductionLogStep>? LogSteps { get; set; }

    /// <summary>
    /// Notes provided for the failure.
    /// </summary>
    [Parameter] public string FailureNotes { get; set; } = "";

    /// <summary>
    /// Event callback triggered when the Cancel button is clicked.
    /// </summary>
    [Parameter] public EventCallback OnCancel { get; set; }

    /// <summary>
    /// Event callback triggered when the Print button is clicked and processing is completed.
    /// </summary>
    [Parameter] public EventCallback OnSubmit { get; set; }

    /// <summary>
    /// The list of existing attempts passed into the component.
    /// </summary>
    [Parameter] public List<ProductionLogStepAttempt>? Attempts { get; set; }

    /// <summary>
    /// Gets or sets the description of the step associated with the failure.
    /// </summary>
    [Parameter] public string StepDescription { get; set; } = "";

    /// <summary>
    /// Gets or sets the name of the currently logged-in operator.
    /// If not set externally, it will be auto-populated from the authentication claims.
    /// </summary>
    [Parameter]
    public string OperatorName { get; set; } = string.Empty;

    /// <summary>
    /// Internal copy of attempts used for display logic.
    /// </summary>
    private List<ProductionLogStepAttempt>? _internalAttempts;

    /// <summary>
    /// Gets the number of step attempts associated with the current log entry.
    /// </summary>
    private int AttemptNumber => _internalAttempts?.Count ?? 0;

    /// <summary>
    /// The JavaScript module reference used for printing the red tag.
    /// </summary>
    private IJSObjectReference? _jsModule;

    /// <summary>
    /// Initializes the component asynchronously by loading the operator name from authentication claims if not provided.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(OperatorName))
        {
            var user = (await AuthProvider.GetAuthenticationStateAsync()).User;

            string firstName = user.Claims.FirstOrDefault(c => c.Type.Contains("givenname", StringComparison.OrdinalIgnoreCase))?.Value ?? "";
            string lastName = user.Claims.FirstOrDefault(c => c.Type.Contains("surname", StringComparison.OrdinalIgnoreCase))?.Value ?? "";

            if (string.IsNullOrWhiteSpace(firstName) && string.IsNullOrWhiteSpace(lastName))
            {
                OperatorName = user.Claims.FirstOrDefault(c => c.Type == "name")?.Value
                               ?? user.Identity?.Name
                               ?? "Unknown Operator";
            }
            else
            {
                OperatorName = $"{firstName} {lastName}".Trim();
            }
        }

        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Called when component parameters are set. Syncs internal state with external inputs.
    /// </summary>
    protected override void OnParametersSet()
    {
        if (Attempts != null)
        {
            _internalAttempts = new List<ProductionLogStepAttempt>(Attempts);
        }
    }

    /// <summary>
    /// Loads the JavaScript module after the component has rendered for the first time.
    /// </summary>
    /// <param name="firstRender">True if this is the first render of the component.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "/Scripts/RedTagDialog.js");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Failed to load JS module: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Removes HTML tags from the given input string.
    /// </summary>
    /// <param name="input">The input string potentially containing HTML tags.</param>
    /// <returns>The input string with HTML tags removed and trimmed.</returns>
    private static string StripHtmlTags(string? input) =>
        string.IsNullOrWhiteSpace(input) ? "" : Regex.Replace(input, "<.*?>", "").Trim();

    /// <summary>
    /// Handles the Cancel button click by invoking the OnCancel callback.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();
    }

    /// <summary>
    /// Handles the Print button click, prints the red tag, logs the failure attempt, and invokes OnSubmit.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnSubmitClicked()
    {
        if (_jsModule != null)
        {
            try
            {
                await _jsModule.InvokeVoidAsync("printRedTagById", "red-tag-printable");
            }
            catch (JSException ex)
            {
                Console.Error.WriteLine($"JS call failed: {ex.Message}");
            }
        }

        if (LogSteps != null)
        {
            var failureAttempt = new ProductionLogStepAttempt
            {
                Success = false,
                SubmitTime = DateTimeOffset.UtcNow,
                Notes = FailureNotes
            };

            foreach (var step in LogSteps)
            {
                step.Attempts.Add(failureAttempt);
            }

            await ProductionLogEventService.ChangeMadeToProductionLog();
        }

        await OnSubmit.InvokeAsync();
    }

    /// <summary>
    /// Disposes the JS module asynchronously.
    /// </summary>
    /// <returns>A ValueTask representing the asynchronous dispose operation.</returns>
    public async ValueTask DisposeAsync()
    {
        if (_jsModule is not null)
        {
            await _jsModule.DisposeAsync();
        }
    }

    /// <summary>
    /// Synchronous dispose method. Currently no synchronous resources to dispose.
    /// </summary>
    public void Dispose()
    {
        // No synchronous disposable resources
    }
}

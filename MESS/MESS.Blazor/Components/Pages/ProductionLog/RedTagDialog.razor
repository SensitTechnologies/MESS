@inject IProductionLogEventService ProductionLogEventService
@inject IJSRuntime JSRuntime
@implements IDisposable
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@implements IAsyncDisposable

<div id="red-tag-printable" class="red-tag-horizontal-wrapper print-only" style="width: 456px; height: 228px;">
    <div class="red-tag-horizontal">
        <div class="red-tag-hole"></div>
        <div class="red-tag-content">
            <h5 class="red-tag-header">REJECTED</h5>

            <div class="tag-info-grid">
                <div><span class="label">Date:</span> <span>@DateTime.Now.ToString("g")</span></div>
                <div><span class="label">ID:</span> <span>@(AttemptCount > 0 ? AttemptCount.ToString() : "None")</span></div>
                <div><span class="label">Product:</span> <span>@ProductionLogEventService.CurrentProductName</span></div>
                <div><span class="label">Part Name:</span> </div>
                <div><span class="label">Part #:</span> </div>
                <div><span class="label">Work Instruction:</span> <span>@ProductionLogEventService.CurrentWorkInstructionName</span></div>
                <div><span class="label">Step:</span> <span>@(LogSteps?.FirstOrDefault()?.WorkInstructionStep?.Name ?? "(No Step)")</span></div>
                <div><span class="label">Operator:</span> <span>@ProductionLogEventService.CurrentLineOperatorName</span></div>
            </div>
        </div>
    </div>
</div>

<div class="mt-3 d-flex justify-content-end gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="OnCancelClicked">Cancel</button>
    <button type="button" class="btn btn-outline-secondary" @onclick="OnSubmitClicked">Print</button>
</div>

@code {
    /// <summary>
    /// Gets or sets the count of attempts (e.g., the number of times a step was attempted).
    /// </summary>
    [Parameter]
    public int AttemptCount { get; set; }

    /// <summary>
    /// Gets or sets the list of production log steps related to this red tag step.
    /// </summary>
    [Parameter]
    public List<ProductionLogStep>? LogSteps { get; set; }

    /// <summary>
    /// Gets or sets the current failure notes text bound to the input.
    /// </summary>
    [Parameter]
    public string FailureNotes { get; set; } = "";
    
    /// <summary>
    /// Creates the closing feature of the red tag dialog for the cancel button.
    /// </summary>
    [Parameter]
    public EventCallback OnCancel { get; set; }
    
    /// <summary>
    /// Creates the printing feature of the red tag dialog for the submit (print) button.
    /// </summary>
    [Parameter]
    public EventCallback OnSubmit { get; set; }


    /// <summary>
    /// Reference to the imported JavaScript module for print functionality.
    /// </summary>
    private IJSObjectReference? module;
    
    /// <summary>
    /// Lifecycle method called after component render.
    /// Imports the JavaScript module for printing on first render.
    /// </summary>
    /// <param name="firstRender">Indicates if this is the first render.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./Components/Pages/ProductionLog/Create.razor.js");
        }
    }

    /// <summary>
    /// Handler for when the Cancel button is clicked.
    /// Currently placeholder for potential service calls or parent notifications.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();
        StateHasChanged(); // optional, to force UI update if needed
    }



    /// <summary>
    /// Handler for when the Print button is clicked.
    /// Prints the red tag element and adds a failed attempt to all log steps.
    /// Then notifies the service that a change was made.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnSubmitClicked()
    {
        if (module != null)
        {
            await module.InvokeVoidAsync("printRedTagById", "red-tag-printable");
        }

        if (LogSteps != null)
        {
            var failureAttempt = new ProductionLogStepAttempt
            {
                Success = false,
                SubmitTime = DateTimeOffset.UtcNow,
                Notes = FailureNotes
            };

            foreach (var step in LogSteps)
            {
                step.Attempts.Add(failureAttempt);
            }

            await ProductionLogEventService.ChangeMadeToProductionLog();
        }
        await OnSubmit.InvokeAsync();
    }


    /// <summary>
    /// Asynchronously disposes the JavaScript module to free resources.
    /// </summary>
    /// <returns>A ValueTask representing the asynchronous dispose operation.</returns>
    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    /// <summary>
    /// Synchronously disposes resources if any.
    /// Provided for compatibility with IDisposable interface.
    /// </summary>
    public void Dispose()
    {
        
    }
}

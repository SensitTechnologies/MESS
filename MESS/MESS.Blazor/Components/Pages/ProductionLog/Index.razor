@page "/production-log"
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@inject IProductionLogService ProductionLogService
@inject NavigationManager NavigationManager

@if (_productionLogs == null)
{
    <p>
        Loading...
    </p>
}
else
{
    <div>
        <button @onclick="ToNewPage">Create New Log</button>
    </div>
    @foreach (var log in _productionLogs)
    {
        <div>
            <p><strong>Log ID:</strong> @log.Id</p>
            <p><strong>Submitted At:</strong> @log.SubmitTime</p>
            <p><strong>Work Instruction:</strong> @(log.WorkInstruction?.Title ?? "N/A")</p>
            <button @onclick="() => DeleteProductionLog(log.Id)">Delete Production Log @log.Id</button>

            <div>
                <p><strong>Steps:</strong></p>
                @if (log.LogSteps != null && log.LogSteps.Any())
                {
                    <ul>
                        @foreach (var step in log.LogSteps)
                        {
                            <li>
                                <strong>@(step.WorkInstructionStep?.Name ?? "Unnamed Step")</strong>
                                @if (step.Success)
                                {
                                    <p class="text-bg-success">Success</p>
                                }
                                else
                                {
                                    <p class="text-bg-danger">Failed</p>
                                }

                                <small>Started: @(step.StartTime?.ToString("g") ?? "N/A")</small>
                                <br/>
                                <small>Ended: @(step.EndTime?.ToString("g") ?? "N/A")</small>
                                <br/>
                                <strong>Duration: @(step.Duration?.ToString(@"hh\:mm\:ss") ?? "N/A")</strong>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No Steps Logged</p>
                }
            </div>
            
            <div>
                <label>Total Time:</label>
                @ProductionLogService.GetTotalTime(log)
            </div>

            <p><strong>Product:</strong> @(log.Product?.Name ?? "N/A")</p>
            <p><strong>Line Operator:</strong> @log.LineOperator</p>
        </div>
    }
}
    
    
@code {
    private List<ProductionLog>? _productionLogs;

    protected override async Task OnInitializedAsync()
    {
        _productionLogs = await ProductionLogService.GetAllAsync();
    }
    

    private void ToNewPage()
    {
        NavigationManager.NavigateTo("/production-log/new");
    }

    private void DeleteProductionLog(int id)
    {
        // Remove Production Log from database
        ProductionLogService.Delete(id);

        // Update Production Log list state
        _productionLogs = _productionLogs?.Where(p => p.Id != id).ToList();
        StateHasChanged();
    }

}
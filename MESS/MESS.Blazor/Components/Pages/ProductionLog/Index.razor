@page "/production-log"
@using MESS.Data.Models
@using MESS.Services.ProductionLog
@using MESS.Services.SessionManager
@inject IProductionLogService ProductionLogService
@inject NavigationManager NavigationManager
@inject ISessionManager SessionManager

@if (_productionLogs == null)
{
<p>Loading...</p>
}
else
{
<div class="mb-3">
    <button class="btn btn-primary" @onclick="ToNewPage">Create New Log</button>
</div>

@foreach (var log in _productionLogs)
{
<div class="card mb-3">
    <div class="card-body">
        <h5 class="card-title">Log #@log.Id</h5>

        <dl class="row">
            <dt class="col-sm-3">Work Instruction:</dt>
            <dd class="col-sm-9">@(log.WorkInstruction?.Title ?? "N/A")</dd>

            <dt class="col-sm-3">Product:</dt>
            <dd class="col-sm-9">@(log.Product?.Name ?? "N/A")</dd>

            <dt class="col-sm-3">Line Operator:</dt>
            <dd class="col-sm-9">@log.LineOperator</dd>

            <dt class="col-sm-3">Total Time:</dt>
        </dl>

        <div class="mb-3">
            <p class="font-weight-bold">Steps:</p>
            @if (log.LogSteps != null && log.LogSteps.Any())
            {
            <ul class="list-group">
                @foreach (var step in log.LogSteps)
                {
                <li class="list-group-item">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@(step.WorkInstructionStep?.Name ?? "Unnamed Step")</strong>
                            <br />
                            <small>Submit Time: @(step.SubmitTime.ToLocalTime().ToString("g") ?? "N/A")</small>
                            <p>Notes: @step.Notes</p>
                        </div>
                        <div>
                            @if (!step.Success.HasValue)
                            {
                                <span class="badge bg-warning">Step Not Completed</span>
                            }
                            else if (step.Success.Value)
                            {
                                <span class="badge bg-success">Success</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Failure</span>
                            }
                        </div>
                    </div>
                </li>
                }
            </ul>
            }
            else
            {
            <p>No Steps Logged</p>
            }
        </div>

        <div class="d-flex gap-2">
            <button class="btn btn-outline-secondary btn-sm" @onclick="() => EditProductionLog(log.Id)">Edit</button>
            <button class="btn btn-danger btn-sm" @onclick="() => DeleteProductionLog(log.Id)">Delete</button>
        </div>
    </div>
</div>
}
}
    
    
@code {
    private List<ProductionLog>? _productionLogs;

    protected override async Task OnInitializedAsync()
    {
        var logIds = await SessionManager.GetProductionLogIdsAsync();
        if (logIds != null)
        {
            _productionLogs = await ProductionLogService.GetProductionLogsByListOfIdsAsync(logIds);
        }
    }
    

    private void ToNewPage()
    {
        NavigationManager.NavigateTo("/production-log/new");
    }

    private void EditProductionLog(int logId)
    {
        NavigationManager.NavigateTo($"/production-log/edit/{logId}");
    }
    
    private async void DeleteProductionLog(int id)
    {
        // Remove Production Log from database
        await ProductionLogService.DeleteAsync(id);

        // Update Production Log list state
        _productionLogs = _productionLogs?.Where(p => p.Id != id).ToList();
        StateHasChanged();
    }

}
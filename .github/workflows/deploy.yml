# This workflow will Deploy a .NET project that has been built and track the latest build's via artifacts

name: Deploy

on:
  # scheduled to execute on Monday - Thursday at 11:59 pm CDT ( translated into UTC )
  schedule: 
    # see schedule docs: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule
    # see cron syntax: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07
    # see CDT to UTC conversion: https://savvytime.com/converter/cdt-to-utc
    - cron: '59 4 * * 2-5'
  # Can be manually triggered from the github actions page: https://github.com/SensitTechnologies/MESS/actions/workflows/deploy.yml
  workflow_dispatch:

env:
  BUILD_COMMIT: 'last-build-version'
  LAST_DEPLOY_COMMIT: 'last-deploy-version'
  APP_ARTIFACT: .net-app

jobs:

  download-last-deployed:
    runs-on: ubuntu-latest

    outputs:
      last-version: ${{ steps.last-version.outputs.sha }}

    steps:
#       Steps to read last deployed artifact 
      - name: Get run ID of last Deploy workflow
        id: get-prev-run-id  
        run: |
          OTHER_REPO="${{ github.repository }}"
          WF_NAME="Deploy"
          RUN_ID=`gh run --repo ${OTHER_REPO} list --workflow ${WF_NAME} --json databaseId --jq .[1].databaseId`
          echo "Detected latest run id of ${RUN_ID} for workflow ${WF_NAME}"
          echo "run-id=${RUN_ID}" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Download last artifact from this workflow
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.LAST_DEPLOY_COMMIT }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.get-prev-run-id.outputs.run-id }}

      - name: Archive current deploy version number # (in case no new version or job doesn't finish)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LAST_DEPLOY_COMMIT }}
          path: ${{ env.LAST_DEPLOY_COMMIT }}.txt

      - name: Read last deployed SHA (if exists)
        id: last-version
        run: |
          if [ -f ${{ env.LAST_DEPLOY_COMMIT }}.txt ]; then
            echo "sha=$(cat ${{ env.LAST_DEPLOY_COMMIT }}.txt)" >> $GITHUB_OUTPUT
          else
            echo "sha=" >> $GITHUB_OUTPUT
          fi

  download-last-built:
    runs-on: ubuntu-latest

    outputs:
      built-version: ${{ steps.built-version.outputs.sha }}

    steps:
#       Steps to download Build artifact 
      - name: Get run ID of Build workflow
        id: get-run-id  
        run: |
          OTHER_REPO="${{ github.repository }}"
          WF_NAME="Build"
          RUN_ID=`gh run --repo ${OTHER_REPO} list --workflow ${WF_NAME} --json databaseId --jq .[0].databaseId`
          echo "Detected latest run id of ${RUN_ID} for workflow ${WF_NAME}"
          echo "run-id=${RUN_ID}" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Download artifact from "Build .Net Project" workflow
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BUILD_COMMIT }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.get-run-id.outputs.run-id }}

      - name: Read built commit SHA
        id: built-version
        run: |
          echo "sha=$(cat ${{ env.BUILD_COMMIT }}.txt)" >> $GITHUB_OUTPUT


  deploy:
    runs-on: ubuntu-latest

    needs: 
      - download-last-deployed 
      - download-last-built

    outputs:
      new-build: ${{ steps.compare.outputs.new-build }}

    steps:
#       Steps to read last deployed artifact 
#      - name: Get run ID of last Deploy workflow
#        id: get-prev-run-id  
#        run: |
#          OTHER_REPO="${{ github.repository }}"
#          WF_NAME="Deploy"
#          RUN_ID=`gh run --repo ${OTHER_REPO} list --workflow ${WF_NAME} --json databaseId --jq .[1].databaseId`
#          echo "Detected latest run id of ${RUN_ID} for workflow ${WF_NAME}"
#          echo "run-id=${RUN_ID}" >> "$GITHUB_OUTPUT"
#        env:
#          GH_TOKEN: ${{ github.token }}

#      - name: Download last artifact from this workflow
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.LAST_DEPLOY_COMMIT }}
#          github-token: ${{ github.token }}
#          repository: ${{ github.repository }}
#          run-id: ${{ steps.get-prev-run-id.outputs.run-id }}

#      - name: Archive current deploy version number # (in case no new version or job doesn't finish)
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.LAST_DEPLOY_COMMIT }}
#          path: ${{ env.LAST_DEPLOY_COMMIT }}.txt

#      - name: Read last deployed SHA (if exists)
#        id: last-version
#        run: |
#          if [ -f ${{ env.LAST_DEPLOY_COMMIT }}.txt ]; then
#            echo "sha=$(cat ${{ env.LAST_DEPLOY_COMMIT }}.txt)" >> $GITHUB_OUTPUT
#          else
#            echo "sha=" >> $GITHUB_OUTPUT
#          fi

#       Steps to download Build artifact 
#      - name: Get run ID of Build workflow
#        id: get-run-id  
#        run: |
#          OTHER_REPO="${{ github.repository }}"
#          WF_NAME="Build"
#          RUN_ID=`gh run --repo ${OTHER_REPO} list --workflow ${WF_NAME} --json databaseId --jq .[0].databaseId`
#          echo "Detected latest run id of ${RUN_ID} for workflow ${WF_NAME}"
#          echo "run-id=${RUN_ID}" >> "$GITHUB_OUTPUT"
#        env:
#          GH_TOKEN: ${{ github.token }}

#      - name: Download artifact from "Build .Net Project" workflow
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.BUILD_COMMIT }}
#          github-token: ${{ github.token }}
#          repository: ${{ github.repository }}
#          run-id: ${{ steps.get-run-id.outputs.run-id }}

#      - name: Read built commit SHA
#        id: built-version
#        run: |
#          echo "sha=$(cat ${{ env.BUILD_COMMIT }}.txt)" >> $GITHUB_OUTPUT

      - name: Compare SHAs
        id: compare
        run: |
          if [ "${{ needs.download-last-deployed.outputs.last-version }}" == "${{ needs.download-last-built.outputs.built-version }}" ]; then
            echo "No new build to deploy."
            echo "deploy=false" >> $GITHUB_OUTPUT
          else
            echo "New build detected!"
            echo "deploy=true" >> $GITHUB_OUTPUT
          fi


#      There is a new version. Deploy!
#      DO PUBLISH TO AZURE THINGS HERE

      - name: Record build SHA into last deployed sha 
        if: steps.compare.outputs.deploy == 'true'
        run: echo "$(cat ${{ env.BUILD_COMMIT }}.txt)" > ${{ env.LAST_DEPLOY_COMMIT }}.txt

      - name: Archive New version number
        if: steps.compare.outputs.deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LAST_DEPLOY_COMMIT }}
          path: ${{ env.LAST_DEPLOY_COMMIT }}.txt
          overwrite: true

#  publish:
#    runs-on: ubuntu-latest
#    needs: deploy
#    steps:
#      - name: publish to azure
#        if: needs.deploy.outputs.new-build == 'true'
#        run: